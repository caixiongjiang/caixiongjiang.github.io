<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GoLang on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/categories/golang/</link>
    <description>Recent content in GoLang on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 25 May 2021 02:35:34 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Linq 使用</title>
      <link>https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 25 May 2021 02:35:34 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/</guid>
      <description>前言 最近我负责了一个新项目，大概流程是从 DB 里拿出一堆数据之后，得到一个包含字段很多的结构体的 List，然后需要对这个 List 进行一系列的过滤，包括但不限于类似 sql 中的 where、group by、select 、按照某个字段排序、求并补交集之类的操作。
如果让我自己写，我肯定是一个一个条件慢慢写，但是代码库我是接手的别人的，我看了下现有的实现，大呼牛逼，原来目前对于这种操作已经有了成熟的解决方案了。
那就是：LINQ
Go-linq 介绍 语言集成查询（Language Integrated Query），缩写为 LINQ，是微软的一项技术，并且被应用在了 C# 中，它直接将一些列的查询操作集成在了编程语言中，使得开发者筛选数据的时候可以大大加快速度。详见：语言集成查询
在 Golang 中，语言本身并没有内置这种操作，不过好在有开源社区帮助我们实现了一个库 ahmetb/go-linq ，详细的支持的函数列表和操作可以看这里： https://pkg.go.dev/github.com/ahmetb/go-linq/v3
特性如下：
 没有使用任何第三方依赖，只使用了go 原生库 通过迭代器模式实现了惰性求值 并发安全 支持泛型方法 支持 array、slice、map、string、channel 和自定义集合类  go-linq 提供的方法可以按照是否支持泛型分为两大类。泛型方法都以 T 结尾。非泛型方法需要将函数的入参类型限制为 interface{} 并做类型断言。
基本使用 牛刀小试 首先，肯定是先引入包：
1  go get github.com/ahmetb/go-linq/v3   引入之后，就可以在项目里面用起来了。
我们找个例子先试一试，假设我要筛选出一个数组中的所有偶数，可以对比一下自己写和使用库的写法的区别：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.</description>
    </item>
    
    <item>
      <title>Go Channel 详解</title>
      <link>https://blog.riba2534.cn/blog/2020/go-channel-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 01 Sep 2020 11:13:34 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/go-channel-%E8%AF%A6%E8%A7%A3/</guid>
      <description>Go Channel 详解 Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。
它的操作符是箭头 &amp;lt;- 。
1 2  ch &amp;lt;- v // 发送值v到Channel ch中 v := &amp;lt;-ch // 从Channel ch中接收数据，并将数据赋值给v   (箭头的指向就是数据的流向)
就像 map 和 slice 数据类型一样, channel必须先创建再使用:
1  ch := make(chan int)   Channel类型 Channel类型的定义格式如下：
1  ChannelType = ( &amp;#34;chan&amp;#34; | &amp;#34;chan&amp;#34; &amp;#34;&amp;lt;-&amp;#34; | &amp;#34;&amp;lt;-&amp;#34; &amp;#34;chan&amp;#34; ) ElementType .   它包括三种类型的定义。可选的&amp;lt;-代表channel的方向。如果没有指定方向，那么Channel就是双向的，既可以接收数据，也可以发送数据。
1 2 3  chan T // 可以接收和发送类型为 T 的数据 chan&amp;lt;- float64 // 只可以用来发送 float64 类型的数据 &amp;lt;-chan int // 只可以用来接收 int 类型的数据   &amp;lt;-总是优先和最左边的类型结合。(The &amp;lt;- operator associates with the leftmost chan possible)</description>
    </item>
    
    <item>
      <title>彻底解决go get golang.org/x等包失败与VSCode golang插件安装失败问题</title>
      <link>https://blog.riba2534.cn/blog/2019/%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3go-get-golang.org-x%E7%AD%89%E5%8C%85%E5%A4%B1%E8%B4%A5%E4%B8%8Evscode-golang%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 23 Sep 2019 16:16:00 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3go-get-golang.org-x%E7%AD%89%E5%8C%85%E5%A4%B1%E8%B4%A5%E4%B8%8Evscode-golang%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</guid>
      <description>问题描述 由于某种众所周知的一些原因，https://golang.org/ golang 的官方域名是被墙了的，这也就导致了，在广大 go 开发者使用 golang 的时候，总会出现 go get 失败的问题。解决这个问题的办法，网上一搜一大堆，总结一下，网上大概有两种解决方案。
 因为 go get 不到的库，一般来说在 github 都有人做了镜像，这个时候一般是曲线救国，从 github 上面搞下来，然后把对应的东西放在对应目录，这种方式比较麻烦，而且比较慢。 用代理，需要一台国外服务器，开启一个 http 代理或者 socks5 代理，或者各种梯子，曲线救国，这种方式其实挺好的，我之前一直用这种方式，不过需要国外服务器以及其他一些知识。或者设置 GOPROXY 等。  解决方案 golang 的 1.13 版本已经正式发布了，这个版本中，新的包管理方式 Go module 已经正式被扶正，还有支持 go 模块代理。对于咱们中国的开发者来说，一个优秀的 Go 模块代理可以帮助我们解决很多问题。比如 Go 语言中最知名的 golang.org/x/&amp;hellip; 模块在中国大陆是无法访问到的，以前我们会用很多其他的办法来抓取他们，而若依靠一个可以访问到它们的模块代理，那么将事半功倍。更因为 Go 1.13 将 GOPROXY 默认成了中国大陆无法访问的 https://proxy.golang.org ，所以我们中国的开发者从今以后必须先修改 GOPROXY 才能正常使用 go 来开发应用了。为此，我们联合中国备受信赖的云服务提供商七牛云专门为咱们中国开发者而打造了一个 Go 模块代理：goproxy.cn。github地址：goproxy
那么如何使用这个代理呢？只需要一句命令。
1  go env -w GOPROXY=https://goproxy.cn,direct   完成。然后进行 go get 以及其他获取包的命令，都会经过七牛云进行代理，速度回有一个质的飞跃。前提是需要把 go 版本升级为 &amp;gt;=1.</description>
    </item>
    
    <item>
      <title>Golang的反射reflect深入理解和示例</title>
      <link>https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Thu, 29 Aug 2019 22:16:02 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/</guid>
      <description>Golang的反射reflect深入理解和示例 编程语言中反射的概念 在计算机科学领域，反射是指一类应用，它们能够自描述和自控制。也就是说，这类应用通过采用某种机制来实现对自己行为的描述（self-representation）和监测（examination），并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。
每种语言的反射模型都不同，并且有些语言根本不支持反射。Golang语言实现了反射，反射机制就是在运行时动态的调用对象的方法和属性，官方自带的reflect包就是反射相关的，只要包含这个包就可以使用。
多插一句，Golang的gRPC也是通过反射实现的。
interface 和 反射 在讲反射之前，先来看看Golang关于类型设计的一些原则
 变量包括（type, value）两部分  理解这一点就知道为什么nil != nil了   type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型 类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.  接下来要讲的反射，就是建立在类型之上的，Golang的指定类型的变量的类型是静态的（也就是指定int、string这些的变量，它的type是static type），在创建变量的时候就已经确定，反射主要与Golang的interface类型相关（它的type是concrete type），只有interface类型才有反射一说。
在Golang的实现中，每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型:
1  (value, type)   value是实际变量值，type是实际变量的类型。一个interface{}类型的变量包含了2个指针，一个指针指向值的类型【对应concrete type】，另外一个指针指向实际的值【对应value】。
例如，创建类型为*os.File的变量，然后将其赋给一个接口变量r：
1 2 3 4  tty, err := os.OpenFile(&amp;#34;/dev/tty&amp;#34;, os.O_RDWR, 0) var r io.Reader r = tty   接口变量r的pair中将记录如下信息：(tty, *os.File)，这个pair在接口变量的连续赋值过程中是不变的，将接口变量r赋给另一个接口变量w:
1 2  var w io.</description>
    </item>
    
    <item>
      <title>GoLang相关的问题以及搜到的解决办法</title>
      <link>https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Tue, 07 May 2019 22:11:55 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>GoLang相关的问题以及搜到的解决办法 在使用 golang 的时候，会碰到很多问题，但是自己每一个问题都发个博客这样有点浪费，所以记载一下问题以及解决方法的链接。
golang 中反引号（tag）的作用  Tags in Golang Golang的Tag语法   </description>
    </item>
    
  </channel>
</rss>
