<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>图像分割 on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/categories/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/</link>
    <description>Recent content in 图像分割 on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 Aug 2022 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/categories/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>图像分割的边角料</title>
      <link>https://caixiongjiang.github.io/blog/2022/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%9A%84%E8%BE%B9%E8%A7%92%E6%96%99%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 21 Aug 2022 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%9A%84%E8%BE%B9%E8%A7%92%E6%96%99%E7%9F%A5%E8%AF%86/</guid>
      <description>图像分割中的上采样方法 反最大池化的方法 在下采样中，我们通常采用最大池化的方法来进行。那么对应在上采样中，反最大池化的方法其实就是记住最大池化时得到像素在原图中的位置，将其他位置填充为0。如图所示：
最早的SegNet所使用的上采样就是这种方式！
转置卷积 第二种方法就是转置卷积,这种方法和前面的反最大池化方法的最大区别就是转置卷积的参数是可以用于学习训练的，它不是一个固定的策略！
这个图可能看的不是很准确，想看动图的可以访问PyTorch官方给出的动图
以3$\times$3的卷积核将2$\times$2变为4$\times$4的图像为例（没有填充，没有步幅）：
1.第一步就是要将2$\times$2的图像使用零padding成为一个6$\times$6（4+2*1得到）的图像
2.对该填充后的图像做3$\times$3的卷积，得到输出图像
在深度学习的论文中，出现反卷积/跨步卷积/上卷积其实指的就是这种转置卷积。
放一张一维的图用于理解：
指标计算 基本指标 在图像分割中的基本指标通常包括混淆矩阵、Recall、Precision、MIOU等指标。
二分类中：
TP：原来是正样本，正确预测为了正样本
FN：原来为正样本，错误预测为了负样本
FP：原来为负样本，错误预测为了正样本
TN：原来是负样本，正确预测为了负样本
Recall：正确预测为正样本的个数/原来正样本的个数
recall = TP/（TP+FN）
Precision：正确的预测为了正样本个数/预测为正样本的个数
precision = TP /（TP+FP）
IOU = 交集/并集
MIOU：平均的IOU
多分类时：
$miou = \frac{1}{k + 1}\sum_{i=0}^k TP /(TP + FP + FN)$
实操 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 &amp;#39;&amp;#39;&amp;#39; 混淆矩阵 Recall、Precision、MIOU计算 &amp;#39;&amp;#39;&amp;#39; import numpy as np from sklearn.</description>
    </item>
    
  </channel>
</rss>
