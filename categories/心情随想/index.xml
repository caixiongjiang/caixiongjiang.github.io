<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>心情随想 on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E6%83%B3/</link>
    <description>Recent content in 心情随想 on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 08 May 2021 18:07:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E6%83%B3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>博客迁移至hugo</title>
      <link>https://caixiongjiang.github.io/blog/2022/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3hugo/</link>
      <pubDate>Sat, 08 May 2021 18:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3hugo/</guid>
      <description>背景 两年前把个人博客从 WordPress 迁移到 Typecho ，当时的想法是觉得 WordPress 功能太复杂，维护太麻烦，所以就迁移到了相对小型的博客 Typecho，同样也是 PHP 开发的。当时采用了一个很漂亮的 HandSome 主题，但是后面我越来越发现博客的关键在于内容与质量，好不好看应该是其次的，我有点本末倒置了。
所以我打算换一种博客展示形式了
为什么不再是 Typecho? 说一说采用 Typecho 的缺点：
 由于工作后个人精力的原因，空闲时间并不多，没有很多时间维护服务器，所以需要一种更简单的博客维护方式。 目前的 Typecho 博客还放在腾讯云的一台服务器上，这个服务器再过一年多就过期了，而我又不经常更新与维护，导致了目前服务器版本还停留在 Ubuntu16.04，可能会存在很多历史问题，我懒得修 LAMP 这种动态博客的方式有点陈旧，我还会经常忘记 MySQL 的密码，长此以往，等到服务器快过期的时候一定是一个灾难。 我现在觉得博客应该专注于内容，不想搞那么些花里胡哨的东西，需要寻找一种新的博客展示方式。 现在静态博客比较流行，也比较流行 Serverless 的概念，我想试试  我的需求 我目前对博客的需求是：
 简洁：我希望功能与页面都简洁，能突出博客的内容即可，但是也不能太丑。 支持完整的 MarkDown 语法与数学公式支持 容易维护：我不想花费太多时间在服务器的维护上，也不想整天被黑客盯上，冲着我的网站扫个不停。 费用低一点：目前使用的云服务器是腾讯云的学生机，在毕业前我考虑到了毕业后没有学生优惠这件事，一下子买了好几年，但是总会过期的，过期后的 1C1G 的机器，一月好像顶我现在一年的费用，为了维护一个博客，不值得这样。 数据存储不希望使用数据库：放在云服务器上的 MySQL，比较危险，万一哪天服务器被黑了，直接给我删库我咋办，可以做一个定时备份，但是这样比较麻烦，使用 Markdown 这种文件存储的方式更好一些。 希望通过 Git 进行版本控制：写的多了，就知道版本控制的重要性了。 内容可以长时间存在，防止年久失修丢数据，目前来看，GitHub 可以满足这一点。  为什么是 Hugo? 经过我的一番调研，最终落在了 Hexo 和 Hugo 这两个静态页面生成器身上，由于我目前从事 Golang 开发，对 Go 语言比较熟悉，最后就选择 Hugo 了。(听说文章多了 Hexo 渲染的会很慢？)</description>
    </item>
    
  </channel>
</rss>
