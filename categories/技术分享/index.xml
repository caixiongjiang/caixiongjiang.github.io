<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术分享 on 🌀riba2534&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/</link>
    <description>Recent content in 技术分享 on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 11 Apr 2021 17:09:13 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BitTorrent简介</title>
      <link>https://caixiongjiang.github.io/blog/2021/bittorrent%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 11 Apr 2021 17:09:13 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2021/bittorrent%E7%AE%80%E4%BB%8B/</guid>
      <description>BitTorrent 简介 从 P2P 说起 经常在网上飙车的老司机应该都知道 BT 下载，但是有时候拿到了种子却下载不动，会不会很抓狂，是不是还觉得是自己网不行，那作为一个合格的老司机，我们需要探究一下下载不动的原因是什么，BT的运作方式是怎样的，如果你也有这样的疑惑，那么，系好安全带，我们一起来了解一下什么是 BT。
2001年4月，程序员布莱姆·科恩设计了一种协议，然后在2001年7月2日，他发布了 BitTorrent 客户端的第一个实现。
BT(BitTorrent)是 P2P 的一种实现，P2P也叫「对等网络」（英语：peer-to-peer， 简称P2P），是一种在对等者（Peer）之间分配任务和工作负载的分布式应用架构，是对等计算模型在应用层形成的一种网络形式。在P2P网络环境中，彼此连接的多台计算机之间都处于对等的地位，各台计算机有相同的功能，无主从之分，每个节点既充当服务器，为其他节点提供服务，也能作为客户端，享用其他节点提供的服务。
P2P有着很广泛的应用，比如 P2P金融（雾），区块链，BT下载等。它的关键字是去中心化，依靠用户群（peers）来互相传输数据，符合这种特征的都可以称之为 P2P。
BitTorrent 大家肯定有在互联网上下载各种资源的经历，比如电影电视剧，我们在网上一搜，就会搜到一些不知名的小网站，网站上通常会提供一个叫做「种子」的东西，我们使用时只需要把种子下载到电脑上，通常是一个后缀为 .torrent 的文件， 然后用迅雷或者其他的下载工具下载。
   搜索词 网站界面          在实际操作中，如果我们使用迅雷进行下载，有时候会发现种子下不动，有时候发现下的特别慢，有时候还被提示资源敏感，无法下载，还有时候迅雷提示你开会员可以加速（这个时候开一个会员基本就可以满速下载了，因为迅雷已经把资源提前下载到自己服务器了），我们可能产生一些疑惑：
  种子是什么？
  为什么资源有时候下不动，有时候速度那么慢？
  如何才能让我的BT下载速度变快？
  为了解决这个疑问，我们需要了解一下 BT 协议，全称是 BitTorrent，这个协议被设计用来实现 P2P(Peer to Peer) 下载。普通的 HTTP/FTP 下载使用 TCP/IP 协议，BitTorrent 协议是架构于 TCP/IP 协议之上的一个P2P文件传输通信协议，是一个应用层协议。
传统的下载是客户端请求服务器获取资源，下载方和资源提供方的角色很清楚。这样做的优点是简单，易于理解，我要下载东西，我就去请求服务器，缺点也很明显：
  一旦服务器故障，大家都无法下载
  服务器带宽有限，下载的人多速度必然下降</description>
    </item>
    
    <item>
      <title>正则表达式30分钟入门</title>
      <link>https://caixiongjiang.github.io/blog/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 17 Jul 2019 10:38:01 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/</guid>
      <description>转载自：https://deerchao.net/tutorials/regex/regex.htm
如何使用本教程 别被下面那些复杂的表达式吓倒，只要跟着我一步一步来，你会发现正则表达式其实并没有想像中的那么困难。当然，如果你看完了这篇教程之后，发现自己明白了很多，却又几乎什么都记不得，那也是很正常的——我认为，没接触过正则表达式的人在看完这篇教程后，能把提到过的语法记住80%以上的可能性为零。这里只是让你明白基本的原理，以后你还需要多练习，多使用，才能熟练掌握正则表达式。
除了作为入门教程之外，本文还试图成为可以在日常工作中使用的正则表达式语法参考手册。就作者本人的经历来说，这个目标还是完成得不错的——你看，我自己也没能把所有的东西记下来，不是吗？
本文将会对特别的字符做一些 斜体，加粗 处理，希望读者在阅读的时候可以多体会和留心这些细节，从而有更深刻的了解。# 正则表达式到底是什么东西？
在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。
很可能你使用过Windows/Dos下用于文件查找的通配符(wildcard)，也就是 &amp;lsquo;*&amp;rsquo; 和 &amp;lsquo;?&#39;。
如果你想查找某个目录下的所有的Word文档的话，你会搜索 *.doc。在这里，&amp;quot; * &amp;ldquo;会被解释成任意的字符串。
和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2-3 个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像010-12345678或0376-7654321)。
入门 学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。
假设你在一篇英文小说里查找hi，你可以使用正则表达式 &amp;quot; hi &amp;ldquo;。
这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是 h, 后一个是 i。
通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配 hi, HI, Hi, hI 这四种情况中的任意一种。
不幸的是，很多单词里包含 hi 这两个连续的字符，比如 him, history, high 等等。用 hi 来查找的话，这里边的 hi 也会被找出来。如果要精确地查找 hi 这个单词的话，我们应该使用 \bhi\b。
\b 是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是 \b 并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。
如果需要更精确的说法，\b 匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在) \w。
假如你要找的是 hi 后面不远处跟着一个 Lucy，你应该用 \bhi\b.*\bLucy\b。
这里，. 是另一个元字符，匹配除了换行符以外的任意字符。*同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.* 连在一起就意味着任意数量的不包含换行的字符。现在 \bhi\b.*\bLucy\b 的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。
换行符就是 &#39;\n&#39;, ASCII编码为10(十六进制0x0A)的字符。</description>
    </item>
    
    <item>
      <title>Golang 中的 Map 原理</title>
      <link>https://caixiongjiang.github.io/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 14 Jul 2019 17:12:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <description>什么是映射函数 要明白 map 是如何工作的的，我们需要先讨论一下 map 函数。一个 map 函数用以将一个值映射到另一个值。给定一个值，我们叫 key，它就会返回另外一个值，称为 value。
map(key) → value现在，map 还没什么用，除非我们放入一些数据。我们需要一个函数来将数据添加到 map 中
insert(map, key, value)和一个函数从 map 中移除数据
delete(map, key)在实现上还有一些有趣的点比如查询某个 key 当前在 map 中是否存在，但这已经超出了我们今天要讨论的范围。相反我们今天只专注于这几个点；插入，删除和如何将 key 映射到 value。
Go 中的 map 是一个 hashmap Hashmap 是我要讨论的的 map 的一种特定实现，因为这也是 Go runtime 中所采用的实现方式。Hashmap 是一种经典的数据结构，提供了平均 O(1) 的查询时间复杂度，即使在最糟的情况下也有 O(n) 的复杂度。也就是说，正常情况下，执行 map 函数的时间是个常量。
这个常量的大小部分取决于 hashmap 的设计方式，而 map 存取时间从 O(1) 到 O(n) 的变化则取决于它的 hash 函数。
hash 函数 什么是 hash 函数 ？一个 hash 函数用以接收一个未知长度的 key 然后返回一个固定长度的 value。</description>
    </item>
    
  </channel>
</rss>
