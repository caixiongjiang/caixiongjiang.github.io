<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>消息队列 on 🌀riba2534&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 消息队列 on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 27 Jun 2020 00:54:00 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NSQ使用入门</title>
      <link>https://caixiongjiang.github.io/blog/2020/nsq%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 27 Jun 2020 00:54:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2020/nsq%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</guid>
      <description>NSQ使用入门 简介 消息队列是进程间通信或同一进程不同线程间进行通信一种方式，可以将服务异步化，对流量进行整形，削峰填谷，是高并发、大数据场景下不可或缺的中间件；使得消息生产者和消费者解耦，方便系统模块化设计。
NSQ是一个基于Go语言的分布式实时消息平台，它基于MIT开源协议发布，由bitly公司开源出来的一款简单易用的消息中间件。 官方和第三方还为NSQ开发了众多客户端功能库，如官方提供的基于HTTP的nsqd、Go客户端go-nsq、Python客户端pynsq、基于Node.js的JavaScript客户端nsqjs、异步C客户端libnsq、Java客户端nsq-java以及基于各种语言的众多第三方客户端功能库。
特性   Distributed NSQ提供了分布式的，去中心化，且没有单点故障的拓扑结构，稳定的消息传输发布保障，能够具有高容错和HA（高可用）特性。
  Scalable易于扩展NSQ支持水平扩展，没有中心化的brokers。内置的发现服务简化了在集群中增加节点。同时支持pub-sub和load-balanced 的消息分发。
  Ops FriendlyNSQ非常容易配置和部署，生来就绑定了一个管理界面。二进制包没有运行时依赖。官方有Docker image。
  Integrated高度集成官方的 Go 和 Python库都有提供。而且为大多数语言提供了库。
  消息不持久化，全在内存。可配置&amp;ndash;mem-queue-size来超出阈值的消息写到硬盘
  保证at least once投递。nsqd没挂的前提下，由于超时，连接断开，重新入队等原因，消息可能多次投递，client自己保证消费消息的操作是具有幂等性的。
  值得注意的是，重要的是 nsqd 和 nsqlookupd 守护进程被设计成独立运行，没有相互之间的沟通或协调。
  概念 Topic ：一个topic就是程序发布消息的一个逻辑键，当程序第一次发布消息时就会创建topic。
Channels ：channel与消费者相关，是消费者之间的负载均衡，channel在某种意义上来说是一个“队列”。每当一个发布者发送一条消息到一个topic，消息会被复制到所有消费者连接的channel上，消费者通过这个特殊的channel读取消息，实际上，在消费者第一次订阅时就会创建channel。Channel会将消息进行排列，如果没有消费者读取消息，消息首先会在内存中排队，当量太大时就会被保存到磁盘中。
Messages：消息构成了我们数据流的中坚力量，消费者可以选择结束消息，表明它们正在被正常处理，或者重新将他们排队待到后面再进行处理。每个消息包含传递尝试的次数，当消息传递超过一定的阀值次数时，我们应该放弃这些消息，或者作为额外消息进行处理。
nsqd：nsqd 是一个守护进程，负责接收，排队，投递消息给客户端。它可以独立运行，不过通常它是由 nsqlookupd 实例所在集群配置的（它在这能声明 topics 和 channels，以便大家能找到）。
nsqlookupd：nsqlookupd 是守护进程负责管理拓扑信息。客户端通过查询 nsqlookupd 来发现指定话题（topic）的生产者，并且 nsqd 节点广播话题（topic）和通道（channel）信息。有两个接口：TCP 接口，nsqd 用它来广播。HTTP 接口，客户端用它来发现和管理。注：是消费者查询去哪里取消息，而不是生产者查询生产消息到哪里去
每个nsqd具有与nsqlookupd的长期TCP连接，在该连接上它定期推送其状态。此数据用于通知nsqlookupd将为消费者提供哪些nsqd地址。对于消费者，将公开HTTP /查找端点以进行轮询。
对于nsqlookupd，通过运行多个实例来实现高可用性。它们不直接相互通信，数据被认为最终是一致的。消费者轮询所有已配置的nsqlookupd实例并将响应联合起来。陈旧，不可访问或其他故障节点不会使系统停止运行。
nsqadmin：nsqadmin 是一套 WEB UI，用来汇集集群的实时统计，并执行不同的管理任务。 常用工具类：</description>
    </item>
    
    <item>
      <title>Kafka基础知识</title>
      <link>https://caixiongjiang.github.io/blog/2020/kafka%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 27 Apr 2020 16:17:04 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2020/kafka%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Kafka 简介  Apache Kafka is a distributed high throughput message system
Apache Kafka is a distributed streaming platform
 Apache Kafka是一个分布式发布 - 订阅消息系统和一个强大的队列，可以处理大量的数据，并使您能够将消息从一个端点传递到另一个端点。 Kafka适合离线和在线消息消费。 Kafka消息保留在磁盘上，并在群集内复制以防止数据丢失。 Kafka构建在ZooKeeper同步服务之上。 它与Apache Storm和Spark非常好地集成，用于实时流式数据分析。
设计理念  低延迟：以时间复杂度 O(1) 的方式提供消息处理能力，即使对 TB 以上的数据也能保证常数时间复杂度的访问性能 高吞吐：即使在非常廉价的商用机器上也能做到单机支持每秒十万条以上的消息传输 水平扩展：支持 Kafka Broker 间的消息分区，及分布式消费，同时支持在线水平扩展 顺序性：保证每个 Partition 内的消息顺序传输 多场景：同时支持离线数据处理和实时数据处理  kafka基础   Kafka引入了 Consumer Group模式来进行工作
  一个Group内可以有多个消费者，Group内的消费者以队列模式进行工作
    Partition与消费模型
  Kafka中的一个topic是被打散分配在多个Partition中存储的，Consumer Group在消费时需要从不同的Partition中获取消息，如何重建Topic中的顺序呢
 没有办法，Kafka只保证消息在Partition中有序，而不管全局情况    Partition中的消息可以被不同的Group多次消费，那Partition中被消费的消息是何时删除的？Partition是如何知道一个Consumer Group的消费位置呢？</description>
    </item>
    
    <item>
      <title>主流消息队列介绍</title>
      <link>https://caixiongjiang.github.io/blog/2019/%E4%B8%BB%E6%B5%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 13 Dec 2019 20:32:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/%E4%B8%BB%E6%B5%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%8B%E7%BB%8D/</guid>
      <description>主流消息队列介绍  RabbitMQ  特点  Erlang 语言编写 为电信行业可靠性设计 支持 AMQP 协议 轻量级，容易部署及使用 每秒几万到十几万   劣势  消息大量堆积时，性能会下降 性能相比较于其他的比较差 Erlang 太冷门，不好维护     RocketMQ  特点  阿里巴巴 2012 开源，后来捐给 Apache 成了顶级项目 可靠性、稳定性高的国产消息队列，时延低 中文社区活跃 JAVA 开发，贡献者大多是中国人 比 RabbitMQ 的性能高出一个数量级，每秒钟能处理几十万条消息   劣势  作为国产的消息队列，在国际上没有那么流行     Kafka  特点  由 LinkedIn 开发，也是 Apache 顶级项目 早期为了获得高性能，设计方面有牺牲  不保证消息可靠性 可能丢失消息 不支持集群   当前的 Kafka 已经成熟，可靠性稳定性已经可以满足绝大多数场景 周边生态好，在大数据和流式计算领域，所有的相关开源软件都会优先支持 kafka 使用 Scala 和 JAVA 开发，Kafka 的异步收发性能是三者最好的   劣势  同步收发消息响应时延比较高  客户端发一条消息时，kafka 不会立即发送，而是要等一会攒一批再发送，所以不适合在线业务场景       ActiveMQ  特点  最老牌开源消息队列 十年前唯一可供选择的消息队列 存在的意义是兼容还在用的爷爷辈的系统   劣势  社区不活跃 功能和性能差     ZeroMQ  基于消息队列的多线程网络库 如果需求是把消息队列的功能集成进系统进程中，可以考虑使用   Pulsar  新兴消息队列产品 处于成长期 存储和计算分离设计 也许是未来发展方向，建议关注    </description>
    </item>
    
    <item>
      <title>消息队列的消息模型</title>
      <link>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 13 Dec 2019 20:32:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B/</guid>
      <description>消息队列的消息模型   主题和队列
  好的队列不是设计出来的，而是演进出来的
  最初的消息队列模型
 严格意义上的队列，数据结构中的队列 满足先进先出 要求满足严格有序 队列没有读操作，只有「出队」 多个生产者写，可消费到的信息是这些生产者生产的消息合集，每个消费者只能收到队列的一部分信息，任何一条消息只能被一个消费者收到 如果需要每个消费者都受到全量的消息怎么办？  为每个消费者单独创建一个队列，让生产者发送多份  方法比较蠢 浪费资源 生产者必须要知道有多少个消费者，违背了「解耦」的初衷        发布-订阅模型
  模型图
  发送方被称为发布者，接收方被称为订阅者
  服务端存放消息的容器叫做主题
  发布者将消息发布进主题中，订阅者需要先「订阅主题」
  「订阅」是一个动作，同时可以认为是主题在消费时的一个逻辑副本，每份订阅中，订阅者都可以接收到主题的所有消息
    对比
 在消息队列历史上很长时间，这两种模式是并存的，有些消息队列同时支持这两种模型，比如 ActiveMQ。 这两种模型，生产者就是发布者，消费者就是订阅者，队列就是主题 最大区别就是，一份消息数据能不能被消费多次      RabbitMQ 消息模型
  坚持使用队列模型的产品之一
  通过 Exchange 模块，此模块位于生产者和队列之间，生产者并不关心将消息发到哪个队列，而是将消息发送给 Exchange，由 Exchange 配置的策略来决定将消息投递到哪些队列当中</description>
    </item>
    
    <item>
      <title>消息队列的功能和用途</title>
      <link>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E7%94%A8%E9%80%94/</link>
      <pubDate>Fri, 13 Dec 2019 20:31:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E7%94%A8%E9%80%94/</guid>
      <description>消息队列的功能和用途  解耦  上游关注通知，不关注处理 下游只关注处理，约定好消息格式   流量控制  应对突发流量，削峰填谷  大量请求先放入消息队列，然后服务端按照自己最大能力去处理     广播  一条消息，可以被多个下游处理   异步  收到消息之后，不需要马上进行，提高效率  秒杀系统  用户秒杀只需要通过风险控制以及库存锁定这两个操作就可以了 后续生成订单，短信通知，可以用消息队列异步处理       冗余  消息可以被持久化，容易回溯   选择消息队列的基本标准  消息的可靠传递，确保不丢消息 Cluster 支持集群，确保不会因为某个节点而导致集群不可用 性能，性能要满足场景的需要    </description>
    </item>
    
  </channel>
</rss>
