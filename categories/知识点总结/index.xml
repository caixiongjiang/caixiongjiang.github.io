<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知识点总结 on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 知识点总结 on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Sep 2023 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C 编程知识杂谈</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</link>
      <pubDate>Fri, 15 Sep 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</guid>
      <description>C编程知识杂谈 typedef vs define typedef和define都是替一个对象取一个别名，以此增强程序的可读性，区别如下：
原理不同： #define是C语言中定义的语法，是预处理指令，在预处理时进行简单而机械的字符串替换，不作正确性检查，只有在编译已被展开的源程序时才会发现可能的错误并报错。
typedef是关键字，在编译时处理，有类型检查功能。它在自己的作用域内给一个已经存在的类型一个别名，但不能在一个函数定义里面使用typedef。用typedef定义数组、指针、结构等类型会带来很大的方便，不仅使程序书写简单，也使意义明确，增强可读性。
功能不同：
typedef用来定义类型的别名，起到类型易于记忆的功能。
另一个功能是定义机器无关的类型。
如定义一个REAL的浮点类型，在目标机器上它可以获得最高的精度：typedef long double REAL， 在不支持long double的机器上，会被看成typedef double REAL，在不支持double的机器上，会被看成typedef float REAL
#define不只是可以为类型取别名，还可以定义常量、变量、编译开关等。
作用域不同：
#define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用，而typedef有自己的作用域。
extern关键字 在C语言中，修饰符extern用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处引用”。extern声明不是定义，即不分配存储空间。
也就是说，在一个文件中定义了变量和函数， 在其他文件中要使用它们， 可以有两种方式：
1.使用头文件，然后声明它们，然后其他文件去包含头文件
2.在其他文件中直接extern
使用场景
现在要写一个c语言的模块，供以后使用（以后的项目可能是c的也可能是c++的），源文件事先编译好，编译成.so或.o都无所谓。头文件中声明函数时要用条件编译包含起来，如下： 1 2 3 4 5 6 7 8 9 #ifdef __cpluscplus extern &amp;#34;C&amp;#34; { #endif //some code #ifdef __cplusplus } #endif 也就是将所有函数的声明放在some code的位置。
如果这个模块已经存在了，模块的.h文件中没有extern &amp;ldquo;C&amp;quot;关键字，这个模块又不希望被改动的情况下，可以这样，在你的c++文件中，包含该模块的头文件时加上extern &amp;ldquo;C&amp;rdquo;, 如下： 1 2 3 extern &amp;#34;C&amp;#34; { #include &amp;#34;test_extern_c.h&amp;#34; } ifstream std::ifstream 是 C++ 标准库中的输入文件流类。它是 std::basic_ifstream 类的具体化，用于从文件中读取数据。</description>
    </item>
    
  </channel>
</rss>
