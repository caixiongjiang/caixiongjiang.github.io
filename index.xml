<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/</link>
    <description>Recent content on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Sep 2021 09:40:54 +0800</lastBuildDate>
    
        <atom:link href="https://blog.riba2534.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>数字货币双币投资策略入门</title>
        <link>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E5%8F%8C%E5%B8%81%E6%8A%95%E8%B5%84%E7%AD%96%E7%95%A5%E5%85%A5%E9%97%A8/</link>
        <pubDate>Mon, 20 Sep 2021 09:40:54 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E5%8F%8C%E5%B8%81%E6%8A%95%E8%B5%84%E7%AD%96%E7%95%A5%E5%85%A5%E9%97%A8/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E5%8F%8C%E5%B8%81%E6%8A%95%E8%B5%84%E7%AD%96%E7%95%A5%E5%85%A5%E9%97%A8/ -&lt;h1 id=&#34;数字货币双币投资策略入门&#34;&gt;数字货币双币投资策略入门&lt;/h1&gt;
&lt;p&gt;很多数字货币交易平台提供的理财产品中，有一种叫「双币理财」的产品。这种产品声称：&lt;strong&gt;无论比特币上涨或者下跌，用户总能赚得 BTC 或者 USDT 的收益&lt;/strong&gt;。举个例子，我们打开&lt;strong&gt;币安&lt;/strong&gt;提供的双币理财页面：&lt;a href=&#34;https://www.binance.com/zh-CN/dual&#34;&gt;双币投资&lt;/a&gt;&lt;/p&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210920095334.png&#34;/&gt;
&lt;p&gt;随后截个图，研究一下里面的信息，在图中，BTC 现货的价格是 &lt;strong&gt;47205&lt;/strong&gt;，交割日是 2021年9月24日（写文章时的日期是2021年9月20日）。如果我投入 &lt;strong&gt;1BTC&lt;/strong&gt;，在9月24日交割的时间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;strong&gt;BTC&lt;/strong&gt; 现货的价格大于等于 &lt;strong&gt;48000&lt;/strong&gt;，你就会收到 &lt;strong&gt;48172.8USDT&lt;/strong&gt;（赚了，因为你投入BTC时的成本价是47205）&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;BTC&lt;/strong&gt; 现货的价格小于 &lt;strong&gt;48000&lt;/strong&gt;，你就会收到 &lt;strong&gt;1.0036BTC&lt;/strong&gt;（赚了，因为你投入了1BTC，现在获得的BTC更多了）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;乍一看是不是有点不相信，世上真有这稳赚不赔的好事？这种理财方式的原理是什么呢，是不是有隐藏的风险，带着这些疑问，我最近探究了一下，有一些心得，和大家分享。&lt;/p&gt;
&lt;h1 id=&#34;期权option&#34;&gt;期权(Option)&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;为什么要讲&lt;strong&gt;期权&lt;/strong&gt;呢？细心的读者可能在上文中的图中发现，里面有一个&lt;strong&gt;行权价格&lt;/strong&gt;，这个价格意味着什么呢，这就不得不说到期权。&lt;/p&gt;
&lt;p&gt;期权英文为 option，大家都知道，option 有选择的意思，期权实质上是一种&lt;strong&gt;选择权&lt;/strong&gt;。通俗的解释一下，期权有两个字，一个是 期，一个是 权，期代表期限，权代表权利，&lt;strong&gt;期权的购买方，在某个期限，会得到某个权利&lt;/strong&gt;。举个例子：&lt;/p&gt;
&lt;p&gt;假设现在BTC现货价格是 4w 美元，小A向小B&lt;strong&gt;购买&lt;/strong&gt;了一张纸，这张纸上写了一句话：三天后，小A可以以 4.5w 美元的价格向小B购买1BTC。这张纸本身值 100 美元，这 100 美元需要由小A支付给小B。那么时间来到了三天后，有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BTC 价格变成了 5w 美元，这时候小A拿着这张纸找小B，用4w美元买到一个BTC，然后在市场上用5w美元的价格卖出去，这时候小A就赚了1w美元，当然这1w还得减去当时买这张纸的100美元费用。但是小B就哭了，卖纸得了 100美元，现在却得在时长上花5w美元买一个BTC，用4w的价格卖出去，亏损1w美元。&lt;strong&gt;这个过程称为行权，这 100 美元被称为 权利金&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;BTC价格变成了 3w 美元，这时候小A就有了选择权，明明在市场上可以以更便宜的价格买入BTC，为啥要找小B买呢。这时候，小A就可以选择不行权，这时候，小A就相当于亏了 100 美元，而小B这边，由于没人来找自己行权，赚了 100 美元。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面这个例子中，这张纸就是期权，上面记录了一个约定，由小A来选择是否执行。&lt;/p&gt;
&lt;p&gt;那么这时候，我们考虑一下，对于小A来说，在这场交易中，最大的亏损也就是 100 美金，但是如果BTC猛涨，小A的收益理论上来说是无限大的。但是对于小B来说，在这场交易中，最多赚 100 美金，但是如果亏损，理论上来说，亏损是无限的。&lt;/p&gt;
&lt;p&gt;那，是不是作为期权的卖方，很不划算，这个问题我们等会讨论。&lt;/p&gt;
&lt;h2 id=&#34;看涨期权&#34;&gt;看涨期权&lt;/h2&gt;
&lt;p&gt;解释完了期权，再来解释一下什么叫看涨期权。&lt;/p&gt;
&lt;p&gt;看涨期权，举个例子，就是你觉得比特币会涨。以上文中的小A举例，现在BTC的价格是 4w 美元，小A就去买入一张看涨期权，约定：在 7 天后，可以以 4.5w 美元的价格向小B&lt;strong&gt;买入&lt;/strong&gt; 1BTC，并且花费 100 美元来购买这张纸。&lt;/p&gt;
&lt;p&gt;到时候如果 BTC 价格比 4.5w 高，小A就赚了，小A可以低价在小B这里买，高价在市场卖出，赚差价。&lt;/p&gt;
&lt;p&gt;此时，小A作为买方在买入一张看涨期权，小B作为卖方在卖出一张看涨期权。&lt;/p&gt;
&lt;h2 id=&#34;看跌期权&#34;&gt;看跌期权&lt;/h2&gt;
&lt;p&gt;那什么是看跌期权呢，看跌期权的约定反过来，继续举例子。假设现在 BTC 的价格是 4w 美元，小A觉得他会跌，就向小B购买了一张纸：在 7 天后，可以以 3w 美元的价格把1BTC&lt;strong&gt;卖出&lt;/strong&gt;给小B。并且花了 100 美元来购买这张纸。&lt;/p&gt;
&lt;p&gt;看好了，这里是小A给小B卖出，而不是买入。&lt;/p&gt;
&lt;p&gt;如果到时候 BTC 价格是 2w 的话，小A就可以在市场上低价买入BTC，而在小B这里高价卖出，赚差价。&lt;/p&gt;
&lt;p&gt;此时，小A在买入一张看跌期权，小B在卖出一张看跌期权。&lt;/p&gt;
&lt;h1 id=&#34;期权卖方的角度&#34;&gt;期权卖方的角度&lt;/h1&gt;
&lt;p&gt;我们在这里探讨一下作为期权的卖方，到底亏不亏。&lt;/p&gt;
&lt;h2 id=&#34;卖出看涨期权&#34;&gt;卖出看涨期权&lt;/h2&gt;
&lt;p&gt;如果，你是个憨憨，直接按照上文中的方式卖，那你会亏的连裤子都不剩。刚才已经说了，理论亏损无限大。&lt;/p&gt;
&lt;p&gt;那么，作为一个聪明人，我们就要在做卖方的同时，加入一点策略，来控制风险。&lt;/p&gt;
&lt;p&gt;假设现在 BTC 现货价是 4w 美元，你卖出了一张看涨期权，&lt;strong&gt;挂钩价格是 6w 美元&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么为了控制风险，你要做的是&lt;strong&gt;在卖出一张看涨期权的同时，以市场的现价4w，买入 1BTC&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么 X 天后的价格，我们分情况讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果现在 BTC 价格是 7w ，买方会花 6w 美元来找你买 1BTC，那么实际上你是不亏的，因为你买入 BTC 的价格是 4w，你赚了差价 2w 加上100美元的权利金。&lt;/li&gt;
&lt;li&gt;如果 BTC 现在价格是 3w，买方不会来找你行权，你能赚取买方给你的权利金，而你买的 1BTC 仍然在你手里，那么你的收益是 1BTC+权利金。（如果按照币本位思想，你没亏，但是U本位思想，你实际上亏了）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述我们所说的策略，叫做 &lt;strong&gt;备兑看涨&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/4AD2E4DCDA9ADC4469F001A84236BF94.png&#34;/&gt;
&lt;h2 id=&#34;卖出看跌期权&#34;&gt;卖出看跌期权&lt;/h2&gt;
&lt;p&gt;假设现在 BTC 的价格是 4w 美元，&lt;strong&gt;你卖出了一张看跌期权，挂钩价格是 3w 美元&lt;/strong&gt;，x天后，买家会以3w美元的价格把 BTC 卖给你，权利金还是 100 美元。&lt;/p&gt;
&lt;p&gt;那么 X 天后，会发生什么呢，我们分情况讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设现在 BTC 价格是 5w 美元，BTC涨了，买家肯定不会花 5w 买 BTC ，而花 3w 卖出去，那么作为卖家，你赚了，&lt;strong&gt;你赚了 100 美元权利金&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;假设现在 BTC 价格是 2w 美元，BTC 跌了，买家就会花 2w 从市场上买入 BTC，花 3w 卖出去。那么作为卖家，这时候你会&lt;strong&gt;得到 1BTC加上买家给的权利金&lt;/strong&gt;。（以币本位的思想来看，你赚了，USDT本位来看，你亏了）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/CC4BC8CC7DE6ACF973FF3872834A7C5C.png&#34;/&gt;
&lt;h1 id=&#34;透过现象看本质&#34;&gt;透过现象看本质&lt;/h1&gt;
&lt;p&gt;实际上，双币理财的本质，就是你作为期权的卖方，你给平台卖期权。那么你是卖家，你就可以选择两种卖的方式。当：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卖出看涨期权时：假设你有一个 BTC，相当于你挂了一个限价单，这个单的卖出价格是挂钩价格。而你到了价格卖出还能获得一笔额外的权利金。本质上是：&lt;strong&gt;做空看涨期权 = 挂卖出限价单 + 收利息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;卖出看跌期权时：假设你手上有大量的 USDT，你想低价买入比特币，现在价格太贵了。那么就相当于你以挂钩价格挂了一个买入单，到了那个价格时，你不仅会获得 BTC ，你还会获得权利金。那么，本质上是：&lt;strong&gt;做空看跌期权 = 挂抄低限价单 + 收利息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;派网的工具&#34;&gt;派网的工具&lt;/h1&gt;
&lt;p&gt;派网提供了自动化的双币投资工具，Pionex双币理财公测默认在&lt;strong&gt;双币理财&lt;/strong&gt;产品上采用&lt;strong&gt;自动复投规则&lt;/strong&gt;，即每个开仓日按照&lt;strong&gt;指定复投规则&lt;/strong&gt;选择挂钩价，本息复利购买符合规则的双币理财产品。如果不了解基础的双币理财产品，请阅读最后的&lt;strong&gt;双币理财产品说明&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现已开放如下产品的自动复投规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;USDT双币理财&lt;/li&gt;
&lt;li&gt;BTC双币理财&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于派网的双币理财详细规则：&lt;a href=&#34;https://www.pionex.com/blog/zh-cn/dual-investment-product/&#34;&gt;https://www.pionex.com/blog/zh-cn/dual-investment-product/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;usdt双币理财&#34;&gt;USDT双币理财&lt;/h3&gt;
&lt;p&gt;USDT双币理财公测默认采用滚仓套利自动复投的规则，该规则具体为：&lt;/p&gt;
&lt;p&gt;如果当前持有的是USDT，则选择次日到期的双币理财进行操作，挂钩价的选择方式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设BTC在8月9日的结算价为X，则选取 0.925*X 并向上千位数取整作为挂钩价（如X=38,800，则0.925*38,800 = 35,890，向上取整后挂钩价为36,000）。单日预期收益率为0.08%左右，对应年化收益率约为30%；&lt;/li&gt;
&lt;li&gt;如果 0.925*X 并向上千位数取整作为挂钩价的年化收益率低于10%，会选择价格更高一档的千位数作为挂钩价。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果持有的USDT被换成了BTC，则该自动复投规则&lt;strong&gt;触发提前结算&lt;/strong&gt;。用户会领取到BTC作为结算币种。&lt;/p&gt;
&lt;h3 id=&#34;btc双币理财&#34;&gt;BTC双币理财&lt;/h3&gt;
&lt;p&gt;BTC双币理财公测默认采用滚仓套利自动复投的规则，该规则具体为：&lt;/p&gt;
&lt;p&gt;如果当前持有的是BTC，则选择次日到期的双币理财进行操作，挂钩价的选择方式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设BTC在8月9日的结算价为X，则选取 1.075*X 并向下千位数取整作为挂钩价（如X=41,000，则1.075*41,000 = 44,075，向下千位数取整后挂钩价为44,000）。单日预期收益率为0.05%左右，对应年化收益率约为20%；&lt;/li&gt;
&lt;li&gt;如果 1.075*X 并向下千位数取整作为挂钩价的年化收益率低于10%，会选择价格更低一档的千位数作为挂钩价。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果持有的BTC被换成了USDT，则该复投规则&lt;strong&gt;触发提前结算&lt;/strong&gt;。用户会领取到USDT作为结算币种。&lt;/p&gt;
&lt;p&gt;说了这么多，派网怎么注册呢，欢迎使用我的邀请链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pionex.cc/zh-CN/sign/ref/MY81cTx5&#34;&gt;https://www.pionex.cc/zh-CN/sign/ref/MY81cTx5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者使用下图二维码：&lt;/p&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/IMG_8508(20210824-234346).JPG&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;
&lt;p&gt;进行注册。&lt;/p&gt;
&lt;h1 id=&#34;小结&#34;&gt;小结&lt;/h1&gt;
&lt;h2 id=&#34;风险&#34;&gt;风险&lt;/h2&gt;
&lt;p&gt;看到这里，对于双币理财，原理应该已经理解了，双币投资的本质是&lt;strong&gt;作为期权的卖方赚取权利金&lt;/strong&gt;，那么风险也很容易明白。&lt;/p&gt;
&lt;p&gt;根据投资规则，唯一的不确定性在于结算币种。结算币种将由到期时的结算价与挂钩价的比较结果决定。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;投资BTC（卖出看涨期权）的风险在于如果出现大涨，则持有的BTC会在挂钩价被卖成USDT。即运行逻辑类似限价止盈单，有投资币种被卖飞的风险；&lt;/li&gt;
&lt;li&gt;投资USDT（卖出看跌期权）的风险在于如果出现大跌，则持有的USDT会在挂钩价被买成BTC。即运行逻辑类似限价抄底单，有短期被套的风险。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;利润回测&#34;&gt;利润回测&lt;/h2&gt;
&lt;p&gt;由于 BTC 的价格是长期上涨趋势，根据派网回测。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你投入的是 BTC，那么可以在BTC震荡趋势中获得BTC本位理财收益。&lt;strong&gt;平均年化收益约在10%~40%。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果投入的是 USDT，可以在BTC长期走势向上的趋势中获得U本位理财收益。&lt;strong&gt;平均年化收益约在15%~45%。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以不管你是坚定地屯币，还是只是想赚法币利润，卖期权都是一个好办法。&lt;/p&gt;
- https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E5%8F%8C%E5%B8%81%E6%8A%95%E8%B5%84%E7%AD%96%E7%95%A5%E5%85%A5%E9%97%A8/ - </description>
        </item>
    
    
    
        <item>
        <title>数据密集型应用系统设计_分布式系统的挑战</title>
        <link>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8C%91%E6%88%98/</link>
        <pubDate>Thu, 09 Sep 2021 17:34:48 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8C%91%E6%88%98/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8C%91%E6%88%98/ -&lt;h1 id=&#34;分布式系统的挑战&#34;&gt;分布式系统的挑战&lt;/h1&gt;
&lt;p&gt;本章对分布式系统可能出现的故障做了一个全面、近乎悲观的总结。故障可能来自&lt;strong&gt;网络问题&lt;/strong&gt;、&lt;strong&gt;时钟时序问题&lt;/strong&gt;等，并讨论这些问题的可控程度。&lt;/p&gt;
&lt;h1 id=&#34;故障与部分失效&#34;&gt;故障与部分失效&lt;/h1&gt;
&lt;p&gt;计算机设计一个非常谨慎的选择是：如果发生了某种内部错误，宁愿使计算机全部崩溃，而不是返回一个错误的结果，错误的结果往往更难处理。计算机隐藏了一切模糊的物理世界，呈现一个理想化的物理模型，以数学的方式完美运行。&lt;/p&gt;
&lt;p&gt;但是涉及到多个节点时，情况发生了根本性的变化。对于这种分布式系统，理想化的标准模型不再适用，我们必须面对一个可能混乱的现实：&lt;strong&gt;在一个现实世界中，各种各样的事情都可能出错&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在分布式系统中，可能出现系统的一部分工作正常，但其他某些部分出现难以预测的故障，我们称之为「&lt;strong&gt;部分失效&lt;/strong&gt;」。问题的难点就在于这种失效是不确定性的：&lt;strong&gt;如果涉及多个节点和网络，几乎肯定会碰到有时候网络正常，有时候则莫名的失败，这种不确定性和部分失效大大提高了分布式系统的复杂性&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;云计算和超算&#34;&gt;云计算和超算&lt;/h2&gt;
&lt;p&gt;关于如何构建大规模计算系统有以下几种不同的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规模的一个极端是高性能计算（HPC）。包含成千上万个CPU的超级计算机构建出一个庞大的集群，通常用于计算密集型的科学任务&lt;/li&gt;
&lt;li&gt;另一个极端是云计算。虽然云计算的定义并非那么明确，但是通常他具有一下特征：
&lt;ul&gt;
&lt;li&gt;多租户数据中心&lt;/li&gt;
&lt;li&gt;通用计算机&lt;/li&gt;
&lt;li&gt;用 IP 以太网链接&lt;/li&gt;
&lt;li&gt;弹性/按需资源分配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传统企业一般处于这两个极端之间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同集群构建方式所对应的错误处理方法也不同，对于高性能计算，通常会定期对任务进行快照，然后保存在持久性存储上，当某个节点出现故障，就干脆让系统停下来，等故障节点修复之后，从最近的快照点继续执行，&lt;/p&gt;
&lt;p&gt;本书重点是基于互联网的服务系统，这些系统与高性能计算有许多不同之处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们的互联网服务都是在线的，需要随时（7X24h）不间断运行，为用户提供低延迟服务，任何服务不可用的情况，都是不可取的。相比之下，对于高性能计算，比如天气模拟这种离线任务则可以暂停下来然后重启，影响相对较小&lt;/li&gt;
&lt;li&gt;高性能计算通常采用专有硬件，每个节点的可靠性很高，节点之间主要通过共享内存来进行通信，或者远程内存直接访问（RDMA）等技术进行通信。而云计算中的节点大多数是由通用机器构建，且成本相对低廉&lt;/li&gt;
&lt;li&gt;大型数据中心通常基于IP和以太网，采用 Clos 拓扑结构提供等分带宽。他们可以为 HPC 特定工作负载提供了更好的性能。&lt;/li&gt;
&lt;li&gt;系统越大，其中局部组件失效的概率就越大，在长时间运行期间，我们&lt;strong&gt;几乎总是可以假定某些东西发生了失效&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果系统可以容忍某些失败的节点，而使整体继续工作，则对系统运行帮助极大，例如：支持滚动升级（我们目前就是这样做的）&lt;/li&gt;
&lt;li&gt;对于全球分散部署的多数据中心，通信需要经过广域网，与本地网络相比，速度更慢且更加不可靠，而高性能计算通常假设所有节点位置靠近，紧密相连。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要是分布式系统可靠工作，就必然面临部分失效，这就需要依靠系统软件系统来提供容错机制。在分布式系统中，怀疑，悲观和偏执狂才能生存。&lt;/p&gt;
&lt;h1 id=&#34;不可靠的网络&#34;&gt;不可靠的网络&lt;/h1&gt;
&lt;p&gt;本书主要关注分布式无共享系统，即通过网络连接多个节点。所以有以下几点假定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络是跨节点通信的唯一路径&lt;/li&gt;
&lt;li&gt;每台机器都有自己的内存和磁盘&lt;/li&gt;
&lt;li&gt;一个机器不能直接访问另一台机器的内存或磁盘，除非通过网络发起请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;互联网以及大多数数据中心的内部网络都是异步网络，这种网络中，一个节点可以发送消息到另一个节点，但是网络并不保证它什么时候到达，甚至一定到达。发送之后，有很多事情可能出错：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求可能已经丢失（比如有人拔掉网线）&lt;/li&gt;
&lt;li&gt;请求可能正在某个队列中等待，无法马上发送&lt;/li&gt;
&lt;li&gt;远程节点已经失效&lt;/li&gt;
&lt;li&gt;远程接收节点可能暂时无法响应&lt;/li&gt;
&lt;li&gt;远程接收节点已经完成了请求处理，但是回复却在网络中 丢失/延迟&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210909173840.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;处理这种问题，我们一般采用超时机制：在等待了一段时间后，如果仍旧没有收到回复则放弃，并且认为响应不会到达。但是，即使判断他超时，仍然不清楚远程节点是否接收到了请求&lt;/p&gt;
&lt;h2 id=&#34;现实中的网络故障&#34;&gt;现实中的网络故障&lt;/h2&gt;
&lt;p&gt;一些系统研究和大量的侧面证据表明，网络问题出人意料的普遍，包括哪些由公司运营的数据中心。一家中型数据中心完成的调查发现，没有有12次网络故障，其中有一半涉及单台机器。一家中型数据中心调查发现，每月大约有12次网络故障。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在头条内部，我们也经常经历由机房故障导致的网络不可用，服务报警等。。大家应该也遇到很多次了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们必须处理或者测试网络故障，例如：集群可能死锁，即使网络恢复了也无法提供服务，甚至可能误删数据。如果触发了一些软件未定义的情形，则发生了任何意外都不奇怪。&lt;/p&gt;
&lt;p&gt;处理网络故障并不意味着总是需要复杂的容错设施：假定你的网络非常可靠，而万一出现问题，一种简单的方法是向用户提供错误信息。前提是，必须非常清楚接下来软件应该如何应对，以确保系统最终可以恢复。&lt;/p&gt;
&lt;p&gt;我们&lt;strong&gt;推荐人为有计划的触发网络问题，以测试系统的反应&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在字节内部，我们总是进行容灾演练，这一点做的还是不错的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;检测故障&#34;&gt;检测故障&lt;/h2&gt;
&lt;p&gt;许多系统都需要自动检测节点失效这样的功能，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡器需要避免向已失效的节点继续分发请求&lt;/li&gt;
&lt;li&gt;对于主从复制的分布式数据库，如果主节点失效，我们需要将某个节点提升成主节点。但，网络的不准确性很难准确判断节点是否失效&lt;/li&gt;
&lt;li&gt;由于网络的不准确性使得判断节点是否失效变的非常困难，而只有在某些特定场景下，获取可以明确的知道哪里错了&lt;/li&gt;
&lt;li&gt;假设可以登录节点，但发现服务器上没有监听目标端口（可能进程挂了），那操作系统会返回 RST 或 FIN 标志的数据包来辅助关闭或拒绝 TCP 链接。如果节点在处理请求的过程中发生了崩溃，就很难知道节点处理了多少数据&lt;/li&gt;
&lt;li&gt;如果服务进程崩溃，但是os仍在运行，可以通过脚本通知其他节点，以便新节点能快速接管而跳过等待超时。HBase 使用了这种方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，如果出了问题，你可能会在应用堆栈的某个级别拿到了一个关于错误的回复，但是最好假定最终收不到任何错误报告，接下来尝试重试，等待超时之后，如果还是没有收到响应，则最终声明节点已经失效。&lt;/p&gt;
&lt;h2 id=&#34;超时与无限期的延迟&#34;&gt;超时与无限期的延迟&lt;/h2&gt;
&lt;p&gt;如果超时是故障检测唯一的方法，那么超时时间应该设置多长呢？不信的是，没有标准答案。&lt;/p&gt;
&lt;p&gt;设置较长的超时意味着更长时间的等待，才能宣告节点失败，但是可能会误判，例如实际上节点只是出现暂时性的波动，被错误的宣布为失效。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;超时时间设置&lt;/th&gt;
&lt;th&gt;节点实际状态&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;长&lt;/td&gt;
&lt;td&gt;故障&lt;/td&gt;
&lt;td&gt;由于超时时间长，使整个系统延迟增大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;td&gt;故障&lt;/td&gt;
&lt;td&gt;理想情况，节点确实故障了，较短的超时时间能尽快发现问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;长&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;td&gt;由于设置了较长的超时时间，节点也确实没故障，这是立项情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;td&gt;设置了较短的超时时间，让其他节点误认为本节点发生故障，宣告失败，承担的职责被交给其他节点，这个过程会给其他节点以及网络带来额外负担&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设想一个虚拟的系统，其网络可以保证数据包的最大延迟在一定范围内：要么在时间 d 内完成交付，要么丢失。此外，假定一个非故障节点总能够在一段时间 r 内完成请求处理。此时，可以确定成功的请求总能够在 2d+r 时间内收到响应，如果在此事件内没有收到响应，则可以推断该网络发生了失效，那么 2d+r 是一个理想的设置。&lt;/p&gt;
&lt;p&gt;事实上，绝大多数系统都没有类似的保证：异步网络理论延迟无限大，多数服务端也不能保证在给定的时间内一定完成请求处理，如果超时时间太小，只需要一个短暂的网络延迟尖峰就会导致包超时进而将系统标记为失效。&lt;/p&gt;
&lt;h2 id=&#34;网络拥塞与排队&#34;&gt;网络拥塞与排队&lt;/h2&gt;
&lt;p&gt;就像驾车时有时候会交通堵塞一样，同样，计算机网络上的数据包延迟的变化根源往往在于排队。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同节点同时发送数据包到相同的目标节点时，网络交换机会出现排队，然后依次将数据包转发到目标网络。如果网络负载过重，数据包可能必须等待一段时间才能获得发送机会。如果数据量太大，交换机队列塞满，之后的数据包则会被丢弃，网络还在运转，但会引发大量数据包重传。&lt;/li&gt;
&lt;li&gt;数据包到达目标机器后，如果所有 CPU 核都处于繁忙状态，则网络数据包请求会被操作系统排队，直到应用程序能被处理。根据不同机器配置，这里也会引入一段等待时间。&lt;/li&gt;
&lt;li&gt;虚拟化环境下，CPU 核会切换虚拟机，从而导致正在运行的虚拟机系统会暂停几十毫秒。这段时间中，客户虚机无法从网络中接收任何数据，入向的包会被虚拟机管理器排队缓冲，进一步增加了网络的不确定性。&lt;/li&gt;
&lt;li&gt;TCP 执行拥塞控制时，节点会主动限制自己的发送速率以免加重网络链路接收节点负载。这意味着数据甚至在进入网络之前，已经在发送方开始了排队&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210909174000.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;所有以上的人为因素都会造成网络延迟的变化和不确定性。当系统还有足够的处理能力，排队之后可以快速处理；但当系统接近其最大设计上限时，系统负载过高，队列深度显著增大，排队对延迟的影响特别明显。&lt;/p&gt;
&lt;p&gt;更好的做法是，超时设置并不是一个不变的常量，而是持续测量响应时间及抖动，根据最新的响应时间自动调整。&lt;/p&gt;
&lt;h2 id=&#34;同步和异步网络&#34;&gt;同步和异步网络&lt;/h2&gt;
&lt;p&gt;如果网络层可以在规定的时间内保证数据包的发送，且不会丢弃数据包，那么分布式系统就会简单很多。为什么我们不能考虑在硬件层解决这个问题呢？使网络足够可靠，然后软件就无需为此担心。&lt;/p&gt;
&lt;p&gt;我们可以将数据中心网络与传统的固定电话网络（非移动蜂窝）进行对比分析，前者非常可靠，语音延迟和掉话的现象极为罕见，这样的固定电话网络需要持续的端到端低延迟和足够的带宽来传输音频数据。计算机网络能否实现类似的高可靠性和确定性？&lt;/p&gt;
&lt;p&gt;当通过电话打电话时，系统会动态建立一条电路：在整个线路上为呼叫分配一个固定的、带宽有保证的通信链路，该电路一直维持到通话结束。&lt;/p&gt;
&lt;p&gt;这种网络本质是同步的：即使数据中间经过了多个路由器，16bit 空间在电路建立时已经得到预留，不会受到排队的影响，由于没有排队，网络最大的端到端的延迟是固定的，我们称为有界延迟。&lt;/p&gt;
&lt;p&gt;这里就体现了固定电话和TCP连接的不同：电路方式总是预留固定带宽，在电路建立之后其他人无法使用，而TCP连接的数据包则会尝试使用所有可用的网络带宽。TCP可传送任意大小可变的数据块。&lt;/p&gt;
&lt;p&gt;如果数据中心网络和互联网是电路交换网络，那么在建立电路时就可以建立一个受保证的最大往返时间。但是，它们并不是：以太网和IP是&lt;strong&gt;分组交换协议&lt;/strong&gt;，不得不忍受排队的折磨，及其导致的网络无限延迟。这些协议没有电路的概念。&lt;/p&gt;
&lt;p&gt;为什么数据中心网络和互联网使用分组交换？答案是，它们针对 **突发流量（bursty traffic）**进行了优化。一个电路适用于音频或视频通话，在通话期间需要每秒传送相当数量的比特。另一方面，请求网页，发送电子邮件或传输文件没有任何特定的带宽要求——我们只是希望它尽快完成。&lt;/p&gt;
&lt;p&gt;如果想通过电路传输文件，你得预测一个带宽分配。如果你猜的太低，传输速度会不必要的太慢，导致网络容量闲置。如果你猜的太高，电路就无法建立（因为如果无法保证其带宽分配，网络不能建立电路）。因此，将电路用于突发数据传输会浪费网络容量，并且使传输不必要地缓慢。相比之下，TCP动态调整数据传输速率以适应可用的网络容量。&lt;/p&gt;
&lt;h1 id=&#34;不可靠的时钟&#34;&gt;不可靠的时钟&lt;/h1&gt;
&lt;p&gt;时钟和计时器非常重要，有许多应用程序以各种方式依赖于时钟，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;某个请求是否超时了？&lt;/li&gt;
&lt;li&gt;某项服务的 99% 的响应时间是多少？&lt;/li&gt;
&lt;li&gt;过去 5 分钟内，服务平均每天处理多少个查询？&lt;/li&gt;
&lt;li&gt;用户在我们网站上浏览花了多长时间？&lt;/li&gt;
&lt;li&gt;这篇文章什么时候发表？&lt;/li&gt;
&lt;li&gt;什么时间发送提醒邮件？&lt;/li&gt;
&lt;li&gt;这个缓存条目什么时候过期？&lt;/li&gt;
&lt;li&gt;日志错误信息的时间戳是多少&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述 1-4 测量持续时间（请求发送与接收响应的时间间隔），5-8 描述具体的某个时间点（在特定日期，特定时间发生的事件）&lt;/p&gt;
&lt;p&gt;在分布式系统中，时间是一个棘手的问题，由于跨节点通信不可能即时完成，消息经由网络从一台机器到另一台机器总是花费时间，但是网络有不确定性延迟，精确测量有很多不确定的挑战，这些情况使得多节点通信时很难确定先后顺序。&lt;/p&gt;
&lt;p&gt;网络上的每台机器都有自己的时钟硬件设备，通常是石英晶体震荡器。这些设备并非绝对准确。即每台机器维护自己本地时间版本，可能比其他机器稍快或更慢。我们通常用网络时间协议 NTP 去互联网同步时间，时间服务器则从精确度更高的时间源获取高精度时间&lt;/p&gt;
&lt;h2 id=&#34;单调时钟与墙上时钟&#34;&gt;单调时钟与墙上时钟&lt;/h2&gt;
&lt;p&gt;现代计算机内部至少有两种不同的时钟：一个是墙上时钟，一个是单调时钟。他们都可以衡量时间，但是我们要理解他们的不同。&lt;/p&gt;
&lt;h3 id=&#34;墙上时钟&#34;&gt;墙上时钟&lt;/h3&gt;
&lt;p&gt;根据某个日历（也叫墙上时间）返回当前的日期与实践，例如，Linux 中的 &lt;code&gt;clock_gettime(CLOCK_REALTIME)&lt;/code&gt; 会返回 1970年1月1日到现在以来的秒数和毫秒数，这就是时间戳，我们写程序应该经常使用到。&lt;/p&gt;
&lt;p&gt;墙上时钟可以和 NTP 同步，但是还存在一些其他问题，特别是如果本地时钟远远快于 NTP 服务器，强行重置之后会跳到某个之前的时间点。这种绿跳跃以及经常忽略闰秒，导致不适合测量时间间隔、&lt;/p&gt;
&lt;h3 id=&#34;单调时钟&#34;&gt;单调时钟&lt;/h3&gt;
&lt;p&gt;单调时钟更适合测量时间间隔，比如 Linux 中的 &lt;code&gt;clock_gettime(CLOCK_MONTONIC)&lt;/code&gt;。单调时钟名字来源于他们总是保证向前。&lt;/p&gt;
&lt;p&gt;在分布式系统中可以使用单调时钟测量一段任务的持续时间。&lt;/p&gt;
&lt;h2 id=&#34;时钟同步与准确性&#34;&gt;时钟同步与准确性&lt;/h2&gt;
&lt;p&gt;单调时钟不需要同步，墙上时钟需要根据 NTP 服务器或其他外部时间源做必要的调整，硬件和NTP服务器同步的过程中可能会出现一些莫名其妙的现象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机中的石英钟不够精确，存在漂移现象（运行速度会加快或者减慢）。时钟嫖一主要取决于机器的温度。谷歌假设其服务器的时钟便宜为200ppm（百万分之一），相当于如果每 30s 与服务器重新同步一次，则可能出现最大偏差为 6ms&lt;/li&gt;
&lt;li&gt;如果时钟与 NTP 服务器时钟差别太大，可能会出现拒绝同步，或者本地时钟将被强制性重置。在重置前后应用程序可能会时间突然倒退或者跳跃的现象。&lt;/li&gt;
&lt;li&gt;某些原因，与NTP服务器链接失败，会导致同步失败，往往不被注意到&lt;/li&gt;
&lt;li&gt;NTP同步如果网络有延迟，则同步的数据可能不准确&lt;/li&gt;
&lt;li&gt;NTP服务本身可能故障&lt;/li&gt;
&lt;li&gt;在虚拟机中，硬件时钟也是被虚拟化的，这对于需要精确时间的应用程序提供了额外的挑战。当虚拟机共享一个CPU核时，每个虚拟机会有数十毫秒的暂停。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;依赖同步的时钟&#34;&gt;依赖同步的时钟&lt;/h2&gt;
&lt;p&gt;如果应用要精确的使用时钟，就需要仔细监控所有节点上的时钟偏差。&lt;/p&gt;
&lt;h3 id=&#34;时间戳与时间顺序&#34;&gt;时间戳与时间顺序&lt;/h3&gt;
&lt;p&gt;如果两个客户端同时写入分布式数据库，谁先到达，哪一个是最新的呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210909174043.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有可能出现由于时间戳的不精确导致数据库误操作。&lt;/p&gt;
&lt;p&gt;这种冲突的解决办法被称为 最后写入获胜（LWW），在多主节点以及无主节点复制数据库中广泛使用。有些实现会在客户端生成时间戳而非服务器端，但是无论如何没有改变根本问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库写入可能会奇怪的丢失：后续发生的写操作却没法覆盖一个更早的值，原因是后者时钟太快了&lt;/li&gt;
&lt;li&gt;LWW 无法区分连续快速方发生的连续写操作（上图客户端A写入后才发生了客户端B的增量操作）和并发写入（每个写操作不依赖于其他写）。需要额外的因果关系跟踪机制（例如版本向量）来防止因果冲突。&lt;/li&gt;
&lt;li&gt;由于时钟精度的限制，两个节点可能各自独立产生了完全相同的时间戳。为了解决这种冲突，需要一个额外的仲裁值（简单理解为引入一个大随机数），但是该方法无法区分因果关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于排序来讲，基于递增计数器而不是振荡石英晶体的逻辑时钟是更可靠的方式。逻辑时钟并不测量一天的某个时间点或者时间间隔，而是事件的相对顺序（事件发生的前后关系）。与之对应的，墙上时钟和单调时钟都属于物理时钟。&lt;/p&gt;
&lt;h3 id=&#34;时钟的置信区间&#34;&gt;时钟的置信区间&lt;/h3&gt;
&lt;p&gt;墙上时钟会返回几微妙甚至纳秒级别的信息，但是这种精度的测量值可能并不可信。因为有偏差。&lt;/p&gt;
&lt;p&gt;因此我们不应该将时钟读数视为一个准确的时间点，而更应该视为带有置信区间的时间范围。例如，系统可能有 95% 的置信度认为当前时间介于 10.3-10.5 之间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个值是人为估的，没有准确值&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;全局快照的同步时钟&#34;&gt;全局快照的同步时钟&lt;/h3&gt;
&lt;p&gt;在“快照隔离和可重复读”中，我们讨论了快照隔离，这是数据库中非常有用的功能，需要支持小型快速读写事务和大型长时间运行的只读事务（用于备份或分析）。它允许只读事务看到特定时间点的处于一致状态的数据库，且不会锁定和干扰读写事务。&lt;/p&gt;
&lt;p&gt;快照隔离最常见的实现需要单调递增的事务ID。如果写入比快照晚（即，写入具有比快照更大的事务ID），则该写入对于快照事务是不可见的。在单节点数据库上，一个简单的计数器就足以生成事务ID。&lt;/p&gt;
&lt;p&gt;但是当数据库分布在许多机器上，也许可能在多个数据中心中时，由于需要协调，（跨所有分区）全局单调递增的事务ID会很难生成。事务ID必须反映因果关系：如果事务B读取由事务A写入的值，则B必须具有比A更大的事务ID，否则快照就无法保持一致。在有大量的小规模、高频率的事务情景下，在分布式系统中创建事务ID成为一个难以处理的瓶颈&lt;/p&gt;
&lt;p&gt;我们可以使用同步时钟的时间戳作为事务ID吗？如果我们能够获得足够好的同步性，那么这种方法将具有很合适的属性：更晚的事务会有更大的时间戳。当然，问题在于时钟精度的不确定性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210909174055&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了确保事务时间戳反映因果关系，在提交读写事务之前，Spanner在提交读写事务时，会故意等待置信区间长度的时间。通过这样，它可以确保任何可能读取数据的事务处于足够晚的时间，因此它们的置信区间不会重叠。为了保持尽可能短的等待时间，Spanner需要保持尽可能小的时钟不确定性，为此，Google在每个数据中心都部署了一个GPS接收器或原子钟，这允许时钟同步到大约7毫秒以内&lt;/p&gt;
&lt;h2 id=&#34;进程暂停&#34;&gt;进程暂停&lt;/h2&gt;
&lt;p&gt;另一个分布式中危险使用时钟的例子：假设数据库分区只有一个主节点，只有主节点接受写入，那么其他节点如何确信该主节点没有被宣告失效，可以安全写入呢？&lt;/p&gt;
&lt;p&gt;一种思路是主节点从其他节点获得一个租约，类似于一个带有超时的锁。某一个时间内只有一个节点可以拿到租约，某节点获得租约之后，在租约到期之前，他就是这段时间内的主节点。为了维持主节点的身份，节点必须在到期之前就定期更新租约，如果节点发生了故障，则续约失败，这样另一个节点到期之后就可以接管。&lt;/p&gt;
&lt;p&gt;流程可以如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;){
    req = &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;获取租约&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;租约截止时间&lt;/span&gt; - &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;系统当前时间&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;秒&lt;/span&gt;) {
        &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;刷新租约截止时间&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;租约有效&lt;/span&gt;) {
        &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;执行请求&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这段代码，依赖于同步的时钟，租约到期时间由另一台机器设置（例如，另一台机器的当前时间+30s得到租约到期时间），并和本地时钟进行比较，如果时钟之间有超过几秒的差异，这段代码可能会出问题。&lt;/p&gt;
&lt;p&gt;如果我们改为本地单调时钟，还有一个问题：代码假定时间检查点与请求处理时间间隔很短，通常代码运行足够快，所以设置 10s 的缓冲区来确保在请求处理过程中租约不会到期。&lt;/p&gt;
&lt;p&gt;如果程序运行过程中出现了暂停，比如线程在执行请求用了 15s,，这时候租约已经过期，另一个节点接管了主节点就会产生问题。&lt;/p&gt;
&lt;p&gt;那么一个线程会暂停这么多时间吗，产生的原因都可能有什么？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;很多编程语言有 GC，在运行期间会暂停正在运行的进程，这些GC可能甚至让程序暂停运行数分钟&lt;/li&gt;
&lt;li&gt;虚拟化环境中，可能会暂停虚拟机&lt;/li&gt;
&lt;li&gt;运行在终端用户设备（如笔记本电脑），执行也可能发生暂停&lt;/li&gt;
&lt;li&gt;操作系统执行线程上下文切换时，可能会产生GC&lt;/li&gt;
&lt;li&gt;操作系统配置了基于磁盘的内存交换分区，内存访问可能造成缺页中断，进而需要从磁盘中加载页。&lt;/li&gt;
&lt;li&gt;通过发送 SIGSTOP 信号来暂停 UNIX 进程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分布式中的一个节点，必须假定，执行过程中的任何时刻都可能被暂停相当长一段时间，包括在运行函数的中间。&lt;/p&gt;
&lt;h3 id=&#34;响应时间保证&#34;&gt;响应时间保证&lt;/h3&gt;
&lt;p&gt;某些软件如果在指定时间无法响应会造成严重后果，如：飞机、火箭、机器人，汽车和其他需要对输入传感器快速做出响应的组件等，这就是所谓的硬实时系统。&lt;/p&gt;
&lt;p&gt;要保证实时，需要来自多个层面的硬件支持，首先是一个实时操作系统，保证进程在给定的时间间隔内完成CPU时间片的调度分配。其次，库函数也必须考虑最坏的执行时间。然后，动态内存分配很可能受限，或者被完全禁止。&lt;/p&gt;
&lt;h3 id=&#34;调整垃圾回收影响&#34;&gt;调整垃圾回收影响&lt;/h3&gt;
&lt;p&gt;为了减少 GC 对程序造成的影响，现在一个较新的想法是把GC暂停视为节点的一个计划内的临时离线，当节点启动垃圾回收时，通知其他节点来接管客户端请求。此外，系统可以提前发出预警，让新请求不在来这个机器，这样此机器可以在无影响的情况下进行GC，对客户端隐藏了垃圾回收。&lt;/p&gt;
&lt;p&gt;这些措施虽然不能完全规避 GC 带来的影响，但是可以有效减少对应用层的影响。&lt;/p&gt;
&lt;h1 id=&#34;知识真相与谎言&#34;&gt;知识、真相与谎言&lt;/h1&gt;
&lt;p&gt;一个哲学问题，在分布式系统中，我们如何分别从分布式系统中来的信息哪些是真实的，哪些是假的，如果感知和测量的手段都不可靠，那么获得的信息有多大可信度。&lt;/p&gt;
&lt;h2 id=&#34;真相由多数决定&#34;&gt;真相由多数决定&lt;/h2&gt;
&lt;p&gt;假定一个发生非对称故障的网络环境，即某节点可以收到消息，但是它发出的消息要么被丢弃，要么被延迟发送。即使该节点本身运行良好，但其他节点无法顺利接受到响应，其他节点一直收不到他发的消息，就对网络宣布，该节点失效。&lt;/p&gt;
&lt;p&gt;接下来是一个情况稍好的场景，半断开的节点可能会注意到其发送的消息没有被其他节点确认，因此意识到网络一定发生了某种故障。但是其他节点还是会认为他发生了故障，宣布该节点失效。&lt;/p&gt;
&lt;p&gt;第三种情况，此节点的应用程序一直在 GC，所以无法处理其他节点的请求，其他节点得不到回应，就宣布此节点失效。&lt;/p&gt;
&lt;p&gt;这几个故事的寓意是，节点不能根据自己的信息来判断自身状态，分布式系统不能依赖于单个节点。目前，许多分布式算法都依赖投票，任何决策都需要来自多个节点的最小投票数，从而减少对特定节点的依赖。&lt;/p&gt;
&lt;h3 id=&#34;主节点与锁&#34;&gt;主节点与锁&lt;/h3&gt;
&lt;p&gt;很多情况，我们需要在系统范围内只能有一个实例，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只允许一个节点作为数据库分区的主节点，以防止出现脑裂&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(脑裂（split-brain）：指在一个高可用（HA）系统中，当联系着的两个节点断开联系时，本来为一个整体的系统，分裂为两个独立节点，这时两个节点开始争抢共享资源，结果会导致系统混乱，数据损坏。 对于无状态服务的HA，无所谓脑裂不脑裂；但对有状态服务(比如MySQL)的HA，必须要严格防止脑裂。)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;只允许一个事务或者客户端持有特定资源的锁，以防止同时写入从而导致数据被破坏。&lt;/li&gt;
&lt;li&gt;只允许一个用户使用特定用户名，确保用户名可以唯一标识用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在分布式系统实现过程需要注意，即使某个节点自认为他是 唯一的那个（例如分区的主节点，锁的持有者，成功拿走用户名的请求），但不一定获得了系统法定票数同意。&lt;/p&gt;
&lt;p&gt;当多数节点声明该节点已失效，而该节点还在充当唯一的那个，如果系统设计不周就会导致负面后果，该节点向其他节点继续发送消息，如果其他节点还选择相信他，就会出现错误行为。&lt;/p&gt;
&lt;h3 id=&#34;fencing令牌&#34;&gt;Fencing令牌&lt;/h3&gt;
&lt;p&gt;当使用锁和租约机制来保护资源并发访问时，必须确保过期的节点不影响其他部分。要实现这个目标，采用一种相当简单的技术。&lt;/p&gt;
&lt;p&gt;我们假设每次锁服务在授予锁和租约，都会返回一个令牌，该令牌每授予一次就会递增。客户端要求每次向存储发送写入请求时，都必须包含持有的令牌。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210909174214.(null)&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210909174219.(null)&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;拜占庭将军问题&#34;&gt;拜占庭将军问题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98&#34;&gt;https://zh.wikipedia.org/zh/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;防护令牌可以检测和阻止无意中发生错误的节点（例如，因为它尚未发现其租约已过期）。但是，如果节点有意破坏系统的保证，则可以通过使用假防护令牌发送消息来轻松完成此操作。&lt;/p&gt;
&lt;p&gt;在本书中，我们假设节点是不可靠但诚实的：它们可能很慢或者从不响应（由于故障），并且它们的状态可能已经过时（由于GC暂停或网络延迟），但是我们假设如果节点它做出了回应，它正在说出“真相”：尽其所知，它正在按照协议的规则扮演其角色。&lt;/p&gt;
&lt;p&gt;如果存在节点可能“撒谎”（发送任意错误或损坏的响应）的风险，则分布式系统的问题变得更困难了——例如，如果节点可能声称其实际上没有收到特定的消息。这种行为被称为拜占庭故障（Byzantine fault），在不信任的环境中达成共识的问题被称为拜占庭将军问题&lt;/p&gt;
&lt;p&gt;当一个系统在部分节点发生故障、不遵守协议、甚至恶意攻击、扰乱网络时仍然能继续正确工作，称之为**拜占庭容错（Byzantine fault-tolerant）**的，在特定场景下，这种担忧在是有意义的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在航空航天环境中，计算机内存或CPU寄存器中的数据可能被辐射破坏，导致其以任意不可预知的方式响应其他节点。由于系统故障非常昂贵（例如，飞机撞毁和炸死船上所有人员，或火箭与国际空间站相撞），飞行控制系统必须容忍拜占庭故障&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在多个参与组织的系统中，一些参与者可能会试图欺骗或欺骗他人。在这种情况下，节点仅仅信任另一个节点的消息是不安全的，因为它们可能是出于恶意的目的而被发送的。例如，像比特币和其他区块链一样的对等网络可以被认为是让互不信任的各方同意交易是否发生的一种方式，而不依赖于中心机构（central authority）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，在本书讨论的那些系统中，我们通常可以安全地假设没有拜占庭式的错误。在你的数据中心里，所有的节点都是由你的组织控制的（所以他们可以信任），辐射水平足够低，内存损坏不是一个大问题。制作拜占庭容错系统的协议相当复杂，而容错嵌入式系统依赖于硬件层面的支持。在大多数服务器端数据系统中，部署拜占庭容错解决方案的成本使其变得不切实际。&lt;/p&gt;
&lt;h3 id=&#34;弱谎言形式&#34;&gt;弱谎言形式&lt;/h3&gt;
&lt;p&gt;尽管我们假设节点通常是诚实的，但值得向软件中添加防止“撒谎”弱形式的机制——例如，由硬件问题导致的无效消息，软件错误和错误配置。这种保护机制并不是完全的拜占庭容错，因为它们不能抵挡决心坚定的对手，但它们仍然是简单而实用的步骤，以提高可靠性。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于硬件问题或操作系统、驱动程序、路由器等中的错误，网络数据包有时会受到损坏。通常，损坏的数据包会被内建于TCP和UDP中的校验和所俘获，但有时它们也会逃脱检测 。要对付这种破坏通常使用简单的方法就可以做到，例如应用程序级协议中的校验和。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可公开访问的应用程序必须仔细清理来自用户的任何输入，例如检查值是否在合理的范围内，并限制字符串的大小以防止通过大内存分配的拒绝服务。防火墙后面的内部服务对于输入也许可以只采取一些不那么严格的检查，但是采取一些基本的合理性检查（例如，在协议解析中）仍然是一个好主意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NTP客户端可以配置多个服务器地址。同步时，客户端联系所有的服务器，估计它们的误差，并检查大多数服务器是否对某个时间范围达成一致。只要大多数的服务器没问题，一个配置错误的NTP服务器报告的时间会被当成特异值从同步中排除。使用多个服务器使NTP更健壮（比起只用单个服务器来）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;理论系统模型与现实&#34;&gt;理论系统模型与现实&lt;/h2&gt;
&lt;p&gt;已经有很多算法被设计以解决分布式系统问题——例如，我们将在第九章讨论共识问题的解决方案。为了有用，这些算法需要容忍我们在本章中讨论的分布式系统的各种故障。&lt;/p&gt;
&lt;p&gt;算法的编写方式不应该过分依赖于运行的硬件和软件配置的细节。这就要求我们以某种方式将我们期望在系统中发生的错误形式化。我们通过定义一个系统模型来做到这一点，这个模型是一个抽象，描述一个算法可以假设的事情。&lt;/p&gt;
&lt;p&gt;关于时序假设，三种系统模型是常用的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;同步模型&lt;/strong&gt;：同步模型假定有上界的网络延迟，有上界的进程暂停和有上界的时钟误差。这并不意味着完全同步的时钟或者网络延迟为零。只是意味着你清楚的了解网络延迟、暂停和时漂移不会超过某个固定额上限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部分同步模型&lt;/strong&gt;：部分同步意味着系统在大多数情况下像一个同步的系统运行，但是有时候会超出网络延迟，进程暂停和时钟漂移的预期上界。这是一个比较现实的模型：大多数情况下，网络和进程比较稳定，但是我们必须考虑到任何关于时机的假设都有偶尔违背的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步模型&lt;/strong&gt;：在这个模型中一个算法不会对时机做任何假设，甚至里面根本没有时钟。某些算法可以支持纯异步模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有以下三种最常见的节点失效系统模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;崩溃-中止模型&lt;/strong&gt;：算法假设一个节点只能以一种方式发生故障，即遭遇系统崩溃。这意味着节点可能在任何时刻突然停止运行，且该节点以后永远消失，无法恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;崩溃-恢复模型&lt;/strong&gt;：节点可能在任意时刻发生崩溃，且可能会在一段未知的时间之后得到恢复并再次响应&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拜占庭（任意）失效模型&lt;/strong&gt;：如上一节所示，节点可能发生任何事情，包括试图作弊和欺骗其他节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;算法的正确性&#34;&gt;算法的正确性&lt;/h3&gt;
&lt;p&gt;定义算法的正确性，我们可以描述它的属性信息。例如：排序算法的输出具有以下特性：对于输出列表中的任何两个不同的元素，左边的元素小于右边的元素，这就是对一个列表进行排序的正确性描述。&lt;/p&gt;
&lt;p&gt;类似的思路，我们可以通过描述目标分布式算法的相关属性来定义其正确性。例如：对于锁服务的 fencing 令牌生成算法，要求算法必须具有以下属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一性：两个令牌请求不能获得相同的值&lt;/li&gt;
&lt;li&gt;单调递增：如果请求 x 返回了令牌 tx， 请求 y 返回了令牌 ty ,且 x 在 y 开始之前先完成，那么 tx &amp;lt; ty.&lt;/li&gt;
&lt;li&gt;可用性：请求令牌的节点如果不发生崩溃则一定会收到最终的响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果针对某个系统模型的算法在各种情况下都能满足定义好的属性要求，那么我们称这个算法是正确的&lt;/strong&gt;。它的意义是，我们换一个角度来看一种极端情况，所有节点全部崩溃，或者所有的网络延迟变得无限长，那么所有的算法都不可能完成其预期功能。&lt;/p&gt;
&lt;h3 id=&#34;安全与活性&#34;&gt;安全与活性&lt;/h3&gt;
&lt;p&gt;我们需要区分两个属性：安全性 和 活性。在上面的例子中，唯一性和单调递增属于安全属性，而可用性属于活性。&lt;/p&gt;
&lt;p&gt;这两种性质的区别是，活性的定义中通常会包含暗示「最终」一致性。&lt;/p&gt;
&lt;p&gt;安全性通常可以理解为「没有发生意外」，而活性则类似「预期的的事情最终一定会发生」。这个非正式定义中，有很多主观因素，不用过度解读。安全性和活性是有准确和数学化的描述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果违反了安全属性，我们可以明确指向发生的特定时间点（例如，唯一性如果被违反，我们可以定位到具体哪个操作产生了重复的令牌）。且一旦违反安全属性，违规行为无法撤销，破坏已实际发生。&lt;/li&gt;
&lt;li&gt;活性则反过来，可能无法明确某个具体的时间点（例如一个节点发送了一个请求，但还没有收到响应），但总希望在未来某个时间点可以满足要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区分安全性和活性的一个好处是可以帮助简化处理一些具有挑战性的系统模型。通常对于分布式算法，要求在所有可能的系统模型下，都必须符合安全属性。也就是即使所有的节点发生崩溃，或者整个网络终端，算法确保不会返回错误的结果。&lt;/p&gt;
&lt;p&gt;对于活性，则存在一些必要条件。我们可以说，只有多数节点没有崩溃，以及网络最终可以恢复的前提下，我们才能保证最终可以收到响应。部分同步模型的定义即要求任何网络终端只会持续一段有限的时间，然后得到了修复。系统最终返回到同步的一致状态。&lt;/p&gt;
&lt;h1 id=&#34;小结&#34;&gt;小结&lt;/h1&gt;
&lt;p&gt;本章讨论了分布式系统中可能发生的各种典型问题，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当通过网络发送数据包时，数据包可能会丢失或者延迟；同样，回复也能丢失或者延迟。所以如果没有收到回复，并不能确定消息是否发送成功。&lt;/li&gt;
&lt;li&gt;节点的时钟可能会与其他节点存在明显的不同步（尽管尽最大努力设置了NTP服务器），时钟还是可能会突然向前跳跃或者倒退，依靠精确的时钟存在一些风险，没有特别简单的办法来精确测量时钟的偏差范围。&lt;/li&gt;
&lt;li&gt;进程可能在执行过程中任意时候，遭遇长度未知的暂停（一个重要的原因是垃圾回收），结果他被其他节点宣告为失效，尽管后来又恢复执行，却对中间的暂停一无所知。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部分失效可能是分布式系统的关键特征，只要软件试图跨节点做任何事情，就有可能出现失败，或者随机变慢，或者根本无应答。对于分布式环境，我们的目标是简历容忍部分失效的软件系统，这样即使某些部件失效，系统还是可以继续运行。&lt;/p&gt;
&lt;p&gt;为了容忍错误，&lt;strong&gt;第一步是检测错误&lt;/strong&gt;，但是多数系统没有检测节点是否发生故障的准确机制，因此分布式算法更多依靠&lt;strong&gt;超时&lt;/strong&gt;来确定远程节点是否可用。但是，超时无法区分网络和节点故障，且可变的网络延迟有时会导致节点被误认为发生崩溃。&lt;/p&gt;
&lt;p&gt;检测到错误之后，让系统容忍失效也不容易。在典型的分布式环境下，没有全局变量，没有共享内存，没有约定的尝试或跨其他节点的共享状态。节点甚至不清楚现在的准确时间，更别提其他更高级的了。&lt;strong&gt;信息从一个节点流动到另一个节点只能是通过不可靠的网络来发送，单个节点无法安全的做出任意决策，而是需要多个节点之间的公式协议，并争取达到法定票数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果习惯与编写单机环境理想化环境运行的软件，当转向分布式时，种种看似凌乱的现实可能着实让人震惊。相反，如果单节点上即可解决问题，那么对于一个分布式系统工程师通常会被认为该问题微不足道。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可扩展性并不是使用分布式系统的唯一原因。容错与低延迟也是同样重要的目标，而后两者无法靠单节点来实现&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们也探讨了网络、时钟和进程的不可靠性是否是不可避免的自然规律，我们对此给出的结论是否定的：的确有可能在网络中提供硬实时的延迟保证或者具有上确界的延迟，但代价昂贵，且硬件资源利用很低。除了安全关键场景，目前绝大多数都选择了低成本。&lt;/p&gt;
&lt;p&gt;我们还探讨了高性能计算，他们采用更可靠的组件，发生故障时完全停止系统，之后重启。相比之下，分布式系统会长时间不间断运行，以避免影响服务级别。故障处理和系统维护多以节点为单位进行处理，或者理论上如此。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样看起来本章全是在揭露安全问题，前景黯淡。下一章，我们会讨论解决方案，重点是针对这些问题而设计的相关分布式算法&lt;/strong&gt;。&lt;/p&gt;
- https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8C%91%E6%88%98/ - </description>
        </item>
    
    
    
        <item>
        <title>数字货币期现套利入门</title>
        <link>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E6%9C%9F%E7%8E%B0%E5%A5%97%E5%88%A9%E5%85%A5%E9%97%A8/</link>
        <pubDate>Tue, 24 Aug 2021 22:28:10 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E6%9C%9F%E7%8E%B0%E5%A5%97%E5%88%A9%E5%85%A5%E9%97%A8/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E6%9C%9F%E7%8E%B0%E5%A5%97%E5%88%A9%E5%85%A5%E9%97%A8/ -&lt;h1 id=&#34;数字货币期现套利入门&#34;&gt;数字货币期现套利入门&lt;/h1&gt;
&lt;p&gt;我的博客一直定义为技术博客，但是最近几个月经历了币圈的毒打之后，我决定也写一写其他的内容，比如投资理财相关（仅代表个人理解，写错了别打我）。&lt;/p&gt;
&lt;p&gt;最近接触了一种风险很小的一种币圈的投资理财方式，叫做「期现套利」，把原理在这里做一个记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;期现套利是指某种期货合约，当期货市场与现货市场在价格上出现差距，从而利用两个市场的价格差距，低买高卖而获利。理论上，期货价格是商品未来的价格，现货价格是商品目前的价格，按照经济学上的同一价格理论，两者间的差距，即“基差”（基差=现货价格－期货价格）应该等于该商品的持有成本。一旦基差与持有成本偏离较大，就出现了期现套利的机会。其中，期货价格要高出现货价格，并且超过用于交割的各项成本，如运输成本、质检成本、仓储成本、开具发票所增加的成本等等。 期现套利主要包括正向买进期现套利和反向买进期现套利两种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;前置知识&#34;&gt;前置知识&lt;/h1&gt;
&lt;p&gt;本文需要一点前置知识：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你需要知道什么是数字货币，这个利用搜索引擎可以了解，如果想深入了解一下区块链原理，这里推荐一门课 &lt;a href=&#34;http://zhenxiao.com/blockchain/&#34;&gt;《区块链技术与应用》&lt;/a&gt; 讲的特别好（技术面），我就是看了这个课然后去币圈亏钱的&lt;/li&gt;
&lt;li&gt;你需要知道如何交易数字货币，常用的比如 &lt;a href=&#34;https://www.binance.com/zh-CN&#34;&gt;币安&lt;/a&gt;、&lt;a href=&#34;https://www.huobi.com/zh-cn/&#34;&gt;火币&lt;/a&gt; 等（打不开请科学上网）&lt;/li&gt;
&lt;li&gt;你需要知道 &lt;strong&gt;交割合约&lt;/strong&gt; 以及 &lt;strong&gt;永续合约&lt;/strong&gt; 的含义，可以看
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/58963815&#34;&gt;数字货币合约交易基础知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/371733315&#34;&gt;币圈的永续合约怎么理解？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;你需要知道永续合约中 &lt;strong&gt;资金费率&lt;/strong&gt; 的概念，下图是币安中 &lt;strong&gt;ETH/USDT&lt;/strong&gt; 永续合约交易对的信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/binance_usdt.PNG&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;
&lt;p&gt;可以看到右上角显示资金费率 &lt;strong&gt;0.0602%&lt;/strong&gt; ，那这个资金费率含义是什么呢？&lt;/p&gt;
&lt;p&gt;我们可以看一下，火币上面是怎么解释资金费率的？ &lt;a href=&#34;https://www.huobi.com/support/zh-cn/detail/900000106903&#34;&gt;资金费用说明&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永续合约没有到期或交割，需要通过“资金费用机制”来让合约价格锚定现货价格。
永续合约每8小时为一期，每期结束时进行结算。即00:00-8:00为一期，结算时间为8:00；8:00-16:00为一期，结算时间为16:00；16:00-次日00:00为一期，结算时间为00:00。以上时间均为GMT+8时间。
只有在结算时持有仓位的用户，才需要收取或支付资金费；如果在结算前已经平仓，则不需要收取或支付资金费用。
结算时，用户应当收取还是支付资金费用，由本期的资金费率以及该用户的持仓情况决定。当资金费率为正值时，多仓将支付资金费用，空仓将收取资金费用；当资金费率为负值时，多仓将收取资金费用，空仓将支付资金费用。
资金费用完全在用户之间进行结算，平台不会从中收取任何费用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;资金费用的计算
用户将收取或支付的资金费用计算方式如下：
&lt;code&gt;资金费用 = 净持仓量 * 合约面值 / 结算价 * 资金费率&lt;/code&gt;
其中，净持仓量 = 持有多仓数量（张） – 持有空仓数量（张）。
当资金费率大于0时，净持仓量大于0的用户需要支付资金费，净持仓量小于0的用户会收取资金费； 当资金费率小于0时，净持仓量大于0的用户会收取资金费，净持仓量小于0的用户需要支付资金费。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单一点来说，就是到了合约交割的时间，交易所系统就会通过一定的机制，让合约价格锚定现货价格，如果当前市场上多头比较多，&lt;strong&gt;那么就由多头给空头支付资金费率，反之由空投给多头支付资金费率&lt;/strong&gt;，记住这句话，这是我们套利的关键，再简单一点来说，如果 &lt;code&gt;资金费率 &amp;gt; 0&lt;/code&gt;，那么就是多头给空头进行支付资金费率，交易所不从中收取费用。&lt;/p&gt;
&lt;h1 id=&#34;套利原理原理&#34;&gt;套利原理原理&lt;/h1&gt;
&lt;p&gt;说起来，套利原理非常简单，即&lt;/p&gt;
&lt;p&gt;假设现在 ETH 的价格是 3000USDT 一个，你打算投入 6000USDT 进行期现套利，那么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你以 3000USDT 的价格买入 1 个ETH&lt;/li&gt;
&lt;li&gt;你在永续合约中以 3000USDT 的价格 1 倍做空 1 个ETH&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么不论币价是涨还是跌，对于你而言，你的总资金应该是处于一个稳定不变的状态，如果 ETH 上涨，你的现货会赚钱，合约会亏同样的钱，反之 ETH 下跌，你的合约会赚钱，但是你的现货会亏钱，这样盈亏是平衡的。聪明的小伙伴肯定已经看出来了，当资金费率进行结算的时候，合约的多头会给空头支付资金费率，而你是开了合约做空的，所以你也会收到多头支付的资金费率，那么就相当于，每进行一次资金费率结算，你就会收获一笔资金费率。&lt;/p&gt;
&lt;p&gt;那么你肯定会有一个问题，你咋知道资金费率是正的，万一是负的呢？很明显，资金费率确实可能是负值，但是我们可以看一下历史上资金费率的比率作为参考。我用爬虫爬了币安从2019年至今的所有资金费率数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.binance.com/zh-CN/futures/funding-history/1&#34;&gt;币安资金费率历史链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/riba2534/59910b32b8af4af5c53743d0fd4f8c73&#34;&gt;我爬取的币安2019年至今的资金费率数据&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写一个简单的脚本来看一下资金费率的情况：
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210824231858.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出，从2019年至今，最近的 1909 次资金费率结算中，有 1841 次资金费率都为正值，那么资金费率大于 0 的比率就是：&lt;strong&gt;96.4%&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，基本上只要你做空，就一定会收到多头的资金费率（就算资金费率为负值了，我们还可以及时止损，赶紧卖出即可）&lt;/p&gt;
&lt;p&gt;在实际操作中，你可以使用一个相对安全的合约杠杆来进行套利，你可以把做空的合约开成 2 倍或者 3 倍，在一个相对安全的范围内，爆仓的几率很小，这样可以充分利用你的资金。假设你还是拥有 6000USDT，你可以把其中 2/3 的资金买入现货，1/3 的资金用来开 2 倍做空的合约，这样你的盈亏也可以平衡，资金费率会赚的更多。&lt;/p&gt;
&lt;h1 id=&#34;如何操作呢&#34;&gt;如何操作呢？&lt;/h1&gt;
&lt;p&gt;原理已经知道了，那么具体如何操作呢，你大可以自己手动用币安或者火币进行操作，或者是自己写程序来调用币安或者火币提供的 API 接口来进行操作，但是作为一个懒人，有没有一个比较现成的方式呢？&lt;/p&gt;
&lt;p&gt;还真有，那就是 &lt;strong&gt;派网&lt;/strong&gt;，派网是一个专门做数字货币的量化交易网站，平台所有的币都在火币或者币安中，派网只写程序调用交易所提供的 API 来实现一些交易策略，派网里面提供 期现套利 的模块，作为用户，你只需要选好你想套利的币种，然后投入数字货币等着就行了，当然天下没有免费的午餐，派网会收取一定的手续费作为平台的利润。&lt;/p&gt;
&lt;p&gt;派网可以选择合约的倍数，开仓后如果有爆仓风险会自动调仓，将风险变成可控制的范围内，那么如何开始呢？&lt;/p&gt;
&lt;p&gt;在底 tab 栏点 套利，然后新建套利，选择币种，选择合约倍数，点开始就行了。&lt;/p&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/IMG_8509.PNG&#34; width=&#34;40%&#34; height=&#34;40%&#34;/&gt;
&lt;p&gt;下面以我的实盘来做个例子：&lt;/p&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/IMG_8505.PNG&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/IMG_8506.PNG&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/IMG_8507.PNG&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;
&lt;p&gt;从个人经验来看，投入三天，2w RMB，收益 42 RMB（上图是我加了仓之后的），基本上，1w RMB 的日收益在 7 块左右，这么算下来，年化大概 &lt;strong&gt;25%&lt;/strong&gt;，按照正常的投资来算，年化 25% 是一个很高的比率了，但是资金费率是动态变化的，可能多也可能少，所以一般来说，年化 20% 是没问题的，当然也可能更高~&lt;/p&gt;
&lt;p&gt;说了这么多，派网怎么注册呢，欢迎使用我的邀请链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pionex.cc/zh-CN/sign/ref/MY81cTx5&#34;&gt;https://www.pionex.cc/zh-CN/sign/ref/MY81cTx5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者使用下图二维码：&lt;/p&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/IMG_8508(20210824-234346).JPG&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;
&lt;p&gt;进行注册。&lt;/p&gt;
&lt;h1 id=&#34;风险提示&#34;&gt;风险提示&lt;/h1&gt;
&lt;p&gt;世上没有稳赚不赔的生意，只有相对而言的风险大小，上文所述的套利策略有以下风险：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;极速上涨或者极速下跌行情，合约有爆仓风险（可以开低杠杆合约，或者快到临界点及时停止交易）&lt;/li&gt;
&lt;li&gt;币安跑路（世界上最大的交易所凉了，那币圈差不多凉了）&lt;/li&gt;
&lt;li&gt;派网跑路&lt;/li&gt;
&lt;li&gt;usdt暴雷（真这样，那整个币圈就凉了）&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;声明：&lt;/p&gt;
&lt;p&gt;以上只是我的粗浅理解，投资有风险，投资须谨慎！&lt;/p&gt;
- https://blog.riba2534.cn/blog/2021/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E6%9C%9F%E7%8E%B0%E5%A5%97%E5%88%A9%E5%85%A5%E9%97%A8/ - </description>
        </item>
    
    
    
        <item>
        <title>数据密集型应用系统设计_数据存储与检索</title>
        <link>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/</link>
        <pubDate>Fri, 09 Jul 2021 21:32:17 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/ -&lt;h1 id=&#34;数据存储与检索&#34;&gt;数据存储与检索&lt;/h1&gt;
&lt;p&gt;从最基本的层面看，数据库只需要做两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向它插入数据时，它就保存数据&lt;/li&gt;
&lt;li&gt;查询数据时，它就返回数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章主要从数据库的角度来探讨：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何存储输入的数据&lt;/li&gt;
&lt;li&gt;收到查询请求时，如何重新找到数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作为一名普通的开发人员，我们不太可能从头实现一个自己的存储引擎，但是我们在做技术选型的时候，需要从众多的存储引擎中选一个最适合自己应用的，就需要对各种存储引擎底层机制有一个大概的了解。&lt;/p&gt;
&lt;p&gt;我们将研究两个存储引擎家族：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志结构的存储引擎&lt;/li&gt;
&lt;li&gt;面向页的存储引擎（如 B-Tree）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据库的核心数据结构&#34;&gt;数据库的核心：数据结构&lt;/h1&gt;
&lt;h2 id=&#34;一个简单的例子&#34;&gt;一个简单的例子：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;
de_set() {
    &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$2&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt;database
}

db_get() {
    grep &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;^&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;,&amp;#34;&lt;/span&gt; database | sed -e &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s/^&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;,//&amp;#34;&lt;/span&gt; | tail -n &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们实现了一个简单的 kv 存储的数据库，key 可以是任意值，value可以是一个 json，我们每次查找，都会获取key的最新值返回。&lt;/p&gt;
&lt;p&gt;我们来看一下这样做的特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次对数据进行追加，且旧值不会被覆盖，最后一次的值就是最新的值&lt;/li&gt;
&lt;li&gt;这种追加到文件末尾的方式通常足够高效，许多数据库内部也是使用日志（log），日志是一个仅支持追加式更新的数据文件，但是一个真正的数据库需要考虑的更多（并发控制、回收磁盘、控制日志文件大小）&lt;/li&gt;
&lt;li&gt;虽然写入的时候高效，但是如果日志文件产生了大量记录， do_get 性能会非常差，他只能进行 O(n) 扫描全表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那如何快速查找我们想要找的 key 的值呢，那就需要一个数据结构来索引它，最基本的想法就是存一些额外的数据，作为这些元数据的路标，帮助我们定位，但是引入额外的数据结构来维护索引，也是有开销的，每次写入数据&lt;strong&gt;不仅仅是简单的追加数据，还需要更新索引，因此任何类型的索引都会降低写入速度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里需要提一下存储引擎最终要的权衡设计：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;适量的索引可以提高查询速度&lt;/li&gt;
&lt;li&gt;每个索引都会减慢写入速度&lt;/li&gt;
&lt;li&gt;所以这里需要做一个权衡，通常来说，就是我们加索引不能随心所欲的乱加&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;哈希索引&#34;&gt;哈希索引：&lt;/h2&gt;
&lt;p&gt;先从简单的哈希索引开始介绍，通常为 kv ，是其他更复杂的索引的基础构造模块。&lt;/p&gt;
&lt;p&gt;KV大家已经很了解了，就理解成一个 map 就行。&lt;/p&gt;
&lt;p&gt;假设我们现在需要设计一个kv的存储引擎，数据采用追加文件的做法，如果我们要给数据加索引，一个最直观的做法是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map中的 key 值为键名，value 为字段在文件的偏移量。查找数据时，直接找到偏移量，就可以直接读取出文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210709215730.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是一个可行的做法，且是 Bitcask 存储引擎的默认做法。用 hash_map 在内存中存 key，占用内存小，且 value 可以存一个比较大的值。但是缺点是，需要把所有的key存在内存中，要保证内存大小。&lt;/p&gt;
&lt;p&gt;我们考虑一下优化方案，如果只追加到一个文件，如何避免磁盘空间被用尽呢？&lt;/p&gt;
&lt;p&gt;一个好的方案是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将日志分为一定大小的段&lt;/li&gt;
&lt;li&gt;文件到达一定大小时就关闭它，后面的数据写入新的日志文件中&lt;/li&gt;
&lt;li&gt;这些日志的段可以被压缩，在日志中丢弃重复的键&lt;/li&gt;
&lt;li&gt;压缩会使段减少，如果压缩后非常小，可以将段之间进行合并&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210709215806.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210709215826.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;经过这样操作后，每个段都有自己的哈希表，将键映射到文件的偏移量。查找的时候，先检查新的段的 hash_map，不存在的话， 再找第二新的段，以此类推。&lt;/p&gt;
&lt;p&gt;我们刚刚口糊了一个简单的kv存储引擎的实现方案，但是有些地方并不全面，我们还需要考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件格式：日志格式采用二进制格式会更省空间&lt;/li&gt;
&lt;li&gt;删除记录：如果要删除键和关联的值，可以在数据文件中给这个数据打一个标记（称为墓碑）。在合并的时候，如果发现这段数据有墓碑标记，就丢弃这些数据&lt;/li&gt;
&lt;li&gt;崩溃恢复：我们的数据都存在内存中，如果数据库突然崩溃，我们重启数据库的时候，只能重新读取日志文件重建一个哈希索引。但是如果日志文件特别大，那么就得扫描很长时间，则这个数据库很长时间才能启动起来。所以我们考虑给内存中存储的数据加快照，重启后直接读就行，快速重建&lt;/li&gt;
&lt;li&gt;部分写入的记录：数据库可能随时崩溃，包括将记录追加到日志的过程中。我们需要给数据增加校验值，如果数据不对，就丢弃。&lt;/li&gt;
&lt;li&gt;并发控制：文件的写入是有严格的先后顺序的，通常的实现是只有一个写线程，数据文件段是追加的，并且不可变，他们可以被其他多个线程读取。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加写的方式是不是很浪费空间，为什么不采用不断更新原文件来实现呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在旋转式磁盘上，顺序写比随机写入速度快得多&lt;/li&gt;
&lt;li&gt;如果段文件是追加的或不可改变的，那并发和数据恢复则要简单的多。不必担心重写值会发生崩溃的情况，留下一个新值和部分旧值混在一起的文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哈希表索引也有局限性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希表需要存储在内存中，内存的大小有限。如果放入磁盘中维护哈希表是一件很困难的事.&lt;/li&gt;
&lt;li&gt;区间查询效率不高，不能查某个区间范围所有键，只能逐个查找的方式查询键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sstables-和-lsm-tree&#34;&gt;SSTables 和 LSM-Tree&lt;/h2&gt;
&lt;p&gt;我们改变上述文件格式：要求哈希表的 key-value 需要按照键的顺序排序。&lt;/p&gt;
&lt;p&gt;这种格式被称为排序字符串表，也叫  SSTable，要求每个键在每个合并的段文件中只能出现一次（压缩过程中已经确保了）。SSTable有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合并段更加简单高效，即使文件大于可用内存。方法类似于合并排序，并发读多个文件，比较每个文件的第一个键，拷贝到输出文件。这样就可以完成排序（相同的键出现在多个输入段时，保留新新值，删除旧值）&lt;/li&gt;
&lt;li&gt;在文件中查找特定键时，不需要在内存中保存所有键索引，保存一些稀疏的范围索引即可。（假设我们要查 handiwork，我们不知道他的偏移量，但是我们知道 handbag 和 handsome 的偏移量，可以确定要查的字段一定位于两者之间，那我们就可以在一小段内顺序查找了）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果所有的键和值都能保持固定的大小，我们可以考虑采用二分查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;构建和维护-sstables&#34;&gt;构建和维护 SSTables&lt;/h3&gt;
&lt;p&gt;数据的写入是随机的，我们首先要保证如何让数据按键排序。在磁盘上维护排序结构是可行的，不过，将其保存在内存中更加容易，那么现在的问题就转化成了一个数据结构问题，而内存排序有很多广为人知的数据结构，各种平衡树，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红黑树（在 C++ STL 中 std::map 就是默认key有序，底层是用红黑树来实现）&lt;/li&gt;
&lt;li&gt;AVL树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们插入、删除、更新数据时间复杂度都是 log 级别。&lt;/p&gt;
&lt;p&gt;那这时我们的存储引擎基本流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在内存中维护一棵平衡树&lt;/li&gt;
&lt;li&gt;当这棵树的大小超过某个阈值，将其作为 SSTable 文件落盘，继续维护一棵新的树&lt;/li&gt;
&lt;li&gt;后台进程周期性的执行压缩合并过程，合并多个段文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述还存在一个问题，如果数据库崩溃（即写在了内存中但是还未落盘），最近的写入就会丢失，为了避免该问题，我们可以在磁盘上保留惨淡，这个日志不需要对键进行排序，唯一的作用就是在崩溃后恢复内存表，每当内存表写入 SSTable 后，则相应的日志可以丢弃。&lt;/p&gt;
&lt;h3 id=&#34;从-sstables-到-lsm-tree&#34;&gt;从 SSTables 到 LSM-Tree&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1441835&#34;&gt;深入理解什么是LSM-Tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上算法的本质是 LevelDB 和 RocksDB 使用的，主要用于嵌入到其他应用程序的 KV 存储引擎库。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;字节内部自研的 Abase 实质上就是基于 RocksDB 实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;收到 Google &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf&#34;&gt;Bigtable原版论文&lt;/a&gt;  &lt;a href=&#34;https://arthurchiao.art/blog/google-bigtable-zh/&#34;&gt;Bigtable中文翻译&lt;/a&gt; &lt;a href=&#34;https://www.bysocket.com/wp-content/uploads/2018/08/Google-Bigtable%E4%B8%AD%E6%96%87%E7%89%88_1.0.pdf&#34;&gt;Bigtable中文&lt;/a&gt; 这篇论文启发，引入了 SSTable 这个术语。这个索引结构以&lt;strong&gt;日志合并树&lt;/strong&gt;（Log-Structured Merge-Tree）来命名，&lt;strong&gt;基于合并和压缩排序文件原理的存储引擎通常都被称为 LSM 存储引擎。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lucene 是Elasticsearch和 Solr等全文搜索系统所使用的索引引擎，它采用了类似的方法来保存其词典。全文索引比 kv索引复杂的多，但是基于一些类似的想法：给定搜索查询的某个单词，找到提及该单词的所有文档。主要使用 KV 实现，其中键是单词，值是所有包含该单词的文档的ID的列表。在 Lucene 中，从词条到 posting list 的映射关系保存在类 SSTable 的排序文件中，这些文件可以后台合并。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;性能优化&#34;&gt;性能优化：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查找每个不存在的键时，LSM-tree 性能可能会很慢
&lt;ul&gt;
&lt;li&gt;在确定键不存在之前，必须先检查内存表，然后一直回溯到最旧的段文件。&lt;/li&gt;
&lt;li&gt;为了优化这种情况，我们一般使用 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8&#34;&gt;布隆过滤器 &lt;/a&gt;（布隆过滤器可以用于检索一个元素是否在一个集合中，速度较快）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同策略会影响甚至决定 SSTables 压缩和合并具体顺序的实际，最常见的方式是大小分级和层级压缩.
&lt;ul&gt;
&lt;li&gt;LevelDB 和 RocksDB 使用分层压缩&lt;/li&gt;
&lt;li&gt;HBase 使用大小分级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LSM-Tree 的基本思想（保存在后台合并的一系列 SSTable）足够简单有效。技术数据集远远大于内存，仍然能够正常工作。由于数据按顺序存储，因此可以有效进行区间查询，由于磁盘是顺序写入的，所以 LSM-Tree 可以支持非常搞的吞吐量&lt;/p&gt;
&lt;h2 id=&#34;b-tree&#34;&gt;B-Tree&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;B树我们应该都很熟悉了，在这里我们主要关注一下和之前日志结构索引的不同和一些特性即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;关于具体数据结构的学习，可以看:https://segmentfault.com/a/1190000020416577&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然日志结构索引正在逐渐受到更多的认可，但是它还不是最常见的索引类型。&lt;/p&gt;
&lt;p&gt;BTree应该是我们最常见的索引结构了。时至今日，它仍然是几乎所有关系型数据库的标准索引实现。许多非关系型数据库也经常使用。&lt;/p&gt;
&lt;p&gt;和 SSTable 思路差不多，BTree 保留按键排序的 kv 对，这样可以实现高效的 kv 查询和区间查询，但是相似的地方仅此而已，Btree 本质上具有非常不同的设计理念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志结构索引将数据库分解为大小可变的段，通常为几兆字节或者更大，并且按顺序写入&lt;/li&gt;
&lt;li&gt;BTree 将数据库分解成固定大小的块或页，传统大小为 4KB ，页是内部读写的最小单元，这种设计更接近底层硬件，因为磁盘也是按照固定大小的块排列&lt;/li&gt;
&lt;li&gt;每个页面都可以使用地址或者位置进行标识，这样可以让一个页面引用另一个页面，类似于指针，它指向磁盘的地址，而不是内存。用这些页面引用来构造一个树，就是 B 树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210709215956.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面的例子可以看出，我们要查找 251 ，我们沿着根节点往下找，每个节点存储的都是一个范围的页的磁盘地址，只有叶子节点才存储具体的值。&lt;/p&gt;
&lt;p&gt;在 B 树中，一个节点有几个儿子节点，这个数量称为 分支因子，在实际中分支因子取决于存储页面 引用和范围边界所需的空间总量，通常为几百个&lt;/p&gt;
&lt;p&gt;如果需要对 B 树进行更新，搜索包含这个键的叶子页，更改页的值，并将页写回磁盘，如果要添加新键，就需要找到其范围内包含新键的页，并将其添加到页。如果此页中没有足够的空间，就把这个页分裂成两个页，并且其父页也需要包含分裂之后的新的键范围。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210709220015.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个算法确保了树的平衡，具有n个键的 B-tree 总是具有 O(logn) 的深度，大多数数据库可以适合 3-4 层的 btree，因此不需要遍历非常深的页面层次即可找到所需的页（分支因子为500的4kb页的四级树存储高达 256TB）&lt;/p&gt;
&lt;h3 id=&#34;使b-tree可靠&#34;&gt;使B-Tree可靠&lt;/h3&gt;
&lt;p&gt;B树写操作是新数据覆盖旧数据，它假设覆盖不会改变页的磁盘的存储位置。这与 LSM 形成鲜明对比，LSM-Tree 仅追加更新文件，不会修改文件。&lt;/p&gt;
&lt;p&gt;在具体的实体磁盘执行这个操作， 首先要移动磁头，然后旋转盘面，然后用新数据覆盖旧数据。SSD的话更加复杂。所以很可能会出问题，为了能使数据库快速恢复，我们支持一个数据结构，叫：预写日志 WAL 。这是一个仅能追加的文件，在数据库崩溃时，可以将数据库恢复到最近一致的状态。&lt;/p&gt;
&lt;p&gt;多个线程访问B树时，需要注意并发控制，通常使用锁存器保护树的数据结构正常完成。这方面，日志结构化的方式比较简单，因为他们在后台执行合并操作，不会干扰前台。&lt;/p&gt;
&lt;h3 id=&#34;优化b-tree&#34;&gt;优化B-Tree&lt;/h3&gt;
&lt;p&gt;B-tree已经存在了很长时间，这里列举一些优化措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一些数据库，比如 LMDB，不使用覆盖页和维护 WAL 来进行崩溃恢复，而是使用写时复制方案。修改的页被写入不同的位置。这种方案对并发控制也很有帮助。&lt;/li&gt;
&lt;li&gt;保存键的缩略信息，而不是完整的键，这样可以节省页空间。特别是树中间的页，只需要提供足够的信息来描述键的起止范围，这样就可以让更多的键压入到页中，从而减少层数。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这个变种有时候称为 B+ 树，然而优化是如此常见，以至于不能和其他 B-tree 变种区分开来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;一般来说，页可以存放在磁盘的任何位置，没有要求相邻的页需要存放在相邻磁盘位置。但是随机放比较低效，所以，许多B-Tree实现尝试将树进行布局，以便相邻叶子页可以按顺序保存在磁盘上。但是随着树增长，保持这个顺序会变得越来越困难。相比之下 LSM-Tree 则完全没有这个问题。&lt;/li&gt;
&lt;li&gt;添加额外指针到树中。例如，每个叶子页面会向左和向右引用其他兄弟页，这样可以顺序扫描键，不用跳回到父页面&lt;/li&gt;
&lt;li&gt;B-tree 的变种如分行树，借鉴了一些日志结构的想法来减少磁盘寻道。对比 B-Tree 和 LSM-Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;B-Tree&lt;/th&gt;
&lt;th&gt;LSM-Tree&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;代码实现&lt;/td&gt;
&lt;td&gt;更加成熟&lt;/td&gt;
&lt;td&gt;发展阶段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;读取更快&lt;/td&gt;
&lt;td&gt;写入更快，读取较慢（需要在不同的压缩阶段检查不同数据结构和SSTable）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;写入速度&lt;/td&gt;
&lt;td&gt;比较慢，因为写入是随机在磁盘中的位置&lt;/td&gt;
&lt;td&gt;比较快，顺序加日志，磁头顺序转动，写入速度快得多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;擦写次数&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;td&gt;反复压缩和SSTable合并，日志结构数据会重写数据多次，这种影响被称为放大，对于 SSD，由于只能承受有限次擦写磁盘，更关注放大指标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;占用空间大小&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;td&gt;占用空间更小，比较好的压缩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;并发性能&lt;/td&gt;
&lt;td&gt;响应延迟比较有确定性&lt;/td&gt;
&lt;td&gt;压缩过程中可能会干扰正在进行的读写操作，及时存储引擎尝试增量的进行压缩，并且不影响并发访问，由于磁盘并发资源有限，当执行昂贵的并发操作时，容易发生读写请求等待的情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据结构&lt;/td&gt;
&lt;td&gt;每个键都恰好对应索引中的某个位置，而日志结构的存储引擎可能在不同段中具有相同键的多个副本 如果希望提供强大的事务，B-Tree更有吸引力 在许多关系数据库中吗，事务隔离是通过键范围锁来实现，并且在 B-Tree 索引中，这些锁可以直接定义到树中&lt;/td&gt;
&lt;td&gt;比较新颖，以后会越来越多使用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;其他索引&#34;&gt;其他索引&lt;/h2&gt;
&lt;p&gt;到目前为止，我们说的都是 KV 索引，对应于关系模型中的主键索引，主键唯一标识关系表中的一行，或者文档数据库的一个文档，或者图数据库的一个点。数据库的其他记录通过其主键来引用该行/文档/顶点，该索引用于解析此类引用。&lt;/p&gt;
&lt;p&gt;二级索引很常见，在关系数据库中，可以使用 &lt;code&gt;CREATE INDEX&lt;/code&gt; 命令来创建二级索引，很容易通过 KV 索引来构建，它的键不是唯一的，即可能有很多行具有相同键。这样可以通过两种方式解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使索引每个值成为匹配行标识的列表&lt;/li&gt;
&lt;li&gt;增加一些行标识使每个键变得唯一&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;在索引中存值&#34;&gt;在索引中存值&lt;/h3&gt;
&lt;p&gt;我们已经有了主键索引，那么在额外假的索引中就不用直接存储元数据，只存储一个引用就可以，存储行的具体位置被称为堆文件。这样存在多个二级索引时，可以避免复制数据，实际数据只保存在一个位置.&lt;/p&gt;
&lt;p&gt;在 MySQL InnoDB 引擎中，表的主键始终是聚集索引，二级索引引用主键位置。&lt;/p&gt;
&lt;h3 id=&#34;多列索引&#34;&gt;多列索引&lt;/h3&gt;
&lt;p&gt;现在讨论的仍然是将一个键映射到一个值，如果我们的需求是同时查询表的多个列，如文档中的多个字段。&lt;/p&gt;
&lt;p&gt;最常见的多列索引称为 &lt;strong&gt;级联索引&lt;/strong&gt;，通过将几个字段连接组成一个键，进行排序&lt;/p&gt;
&lt;h3 id=&#34;全文搜索和模糊索引&#34;&gt;全文搜索和模糊索引&lt;/h3&gt;
&lt;p&gt;目前，我们讨论的都是有确切数据。还有一些其他索引，如:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全文搜索引擎通常支持对一个单词的所有同义词进行查询，忽略语法上的变体&lt;/li&gt;
&lt;li&gt;其他模糊搜索则沿着文档和机器学习方向发展。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;在内存中保存所有数据&#34;&gt;在内存中保存所有数据&lt;/h3&gt;
&lt;p&gt;现在内存价格逐渐便宜，数据集不那么大，用内存可以更好的服务。&lt;/p&gt;
&lt;p&gt;比如我们常用的 redis ，这部分就不说了.&lt;/p&gt;
&lt;h1 id=&#34;事务处理与分析处理&#34;&gt;事务处理与分析处理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;主要了解 OLTP 与 PLAP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事务指一个逻辑单元的一组读写操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ACID&lt;/strong&gt;，是指&lt;a href=&#34;https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&#34;&gt;数据库管理系统&lt;/a&gt;（&lt;a href=&#34;https://baike.baidu.com/item/DBMS&#34;&gt;DBMS&lt;/a&gt;）在写入或更新资料的过程中，为保证&lt;a href=&#34;https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1&#34;&gt;事务&lt;/a&gt;（transaction）是正确可靠的，所必须具备的四个特性：&lt;a href=&#34;https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%80%A7&#34;&gt;原子性&lt;/a&gt;（atomicity，或称不可分割性）、&lt;a href=&#34;https://baike.baidu.com/item/%E4%B8%80%E8%87%B4%E6%80%A7&#34;&gt;一致性&lt;/a&gt;（consistency）、&lt;a href=&#34;https://baike.baidu.com/item/%E9%9A%94%E7%A6%BB%E6%80%A7&#34;&gt;隔离性&lt;/a&gt;（isolation，又称独立性）、&lt;a href=&#34;https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E6%80%A7&#34;&gt;持久性&lt;/a&gt;（durability）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据处理大致可以分成两大类：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;联机事务处理OLTP（on-line transaction processing）、联机分析处理OLAP（On-Line Analytical Processing）。&lt;/p&gt;
&lt;p&gt;OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。&lt;/p&gt;
&lt;p&gt;OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。&lt;/p&gt;
&lt;p&gt;OLTP 系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；&lt;/p&gt;
&lt;p&gt;OLAP 系统则强调数据分析，强调SQL执行市场，强调磁盘I/O，强调分区等。&lt;/p&gt;
&lt;p&gt;OLTP与OLAP之间的比较：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210709220104.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210709220116.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在我们实际应用中：&lt;/p&gt;
&lt;p&gt;常见的 OLTP 数据库例如 MySQL，常见的 OLAP 系统，比如 Hive，clickHouse&lt;/p&gt;
&lt;h1 id=&#34;列式存储&#34;&gt;列式存储&lt;/h1&gt;
&lt;p&gt;在大多数 OLTP 数据库中，存储以行的方式来进行布局：来自表的一行的所有值彼此相邻存储。文档数据库也类似。&lt;/p&gt;
&lt;p&gt;那相对的，列式存储的想法也很简单：不要将一行中的所有值存在一起，而是将每列中的所有值存在一起。&lt;/p&gt;
&lt;p&gt;在列式存储中比较著名的，有 ClickHouse.&lt;/p&gt;
&lt;h3 id=&#34;什么是clickhouse&#34;&gt;什么是ClickHouse?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://clickhouse.tech/docs/zh/&#34;&gt;https://clickhouse.tech/docs/zh/&lt;/a&gt; ClickHouse中文官网，讲的比较详细&lt;/p&gt;
&lt;p&gt;ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。在传统的行式数据库系统中，数据总是按照行来存储，同一行的数据总是被物理的存储在一起，常见的行式数据库有：&lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;Postgres&lt;/code&gt;和&lt;code&gt;MS SQL Server&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;行&lt;/th&gt;
&lt;th&gt;学生&lt;/th&gt;
&lt;th&gt;学号&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#0&lt;/td&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#1&lt;/td&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#2&lt;/td&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在列式存储数据库中，数据按照如下方式存储：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列号&lt;/th&gt;
&lt;th&gt;#0&lt;/th&gt;
&lt;th&gt;#1&lt;/th&gt;
&lt;th&gt;#2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;学生&lt;/td&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;学号&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Other&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们很容易看出两种存储方式的区别。不同的数据存储方式适用不同的业务场景，数据访问的场景包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行了何种查询、多久查询一次以及各类查询的比例；&lt;/li&gt;
&lt;li&gt;每种类型的查询(行、列和字节)读取多少数据；&lt;/li&gt;
&lt;li&gt;读取数据和更新之间的关系；&lt;/li&gt;
&lt;li&gt;使用的数据集大小以及如何使用本地的数据集；&lt;/li&gt;
&lt;li&gt;是否使用事务,以及它们是如何进行隔离的；&lt;/li&gt;
&lt;li&gt;数据的复制机制与数据的完整性要求；&lt;/li&gt;
&lt;li&gt;每种类型的查询要求的延迟与吞吐量等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统负载越高，依据使用场景进行定制化就越重要，并且定制将会变的越精细。没有一个系统能够同时适用所有不同的业务场景。如果系统适用于广泛的场景，在负载高的情况下，要兼顾所有的场景，那么将不得不做出选择。是要平衡还是要效率？&lt;/p&gt;
&lt;h3 id=&#34;olap场景的关键特征&#34;&gt;OLAP场景的关键特征&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;绝大多数是读请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据以相当大的批次(&amp;gt; 1000行)更新，而不是单行更新;或者根本没有更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已添加到数据库的数据不能修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于读取，从数据库中提取相当多的行，但只提取列的一小部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宽表，即每个表包含着大量的列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询相对较少(通常每台服务器每秒查询数百次或更少)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于简单查询，允许延迟大约50毫秒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列中的数据相对较小：数字和短字符串(例如，每个URL 60个字节)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理单个查询时需要高吞吐量(每台服务器每秒可达数十亿行)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务不是必须的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对数据一致性要求低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个查询有一个大表。除了他以外，其他的都很小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询结果明显小于源数据。换句话说，数据经过过滤或聚合，因此结果适合于单个服务器的RAM中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列式数据库更适合olap场景的原因&#34;&gt;列式数据库更适合OLAP场景的原因&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;行式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://clickhouse.tech/docs/zh/images/row-oriented.gif&#34; alt=&#34;Row oriented&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;列式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/column-oriented.gif&#34; alt=&#34;Column oriented&#34;&gt;&lt;/p&gt;
&lt;p&gt;很容易看出其中的差别，我们考虑一下为什么会发生这种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对分析类查询，通常只需要读取表的一小部分列。在列式数据库中你可以只读取你需要的数据。例如，如果只需要读取100列中的5列，这将帮助你最少减少20倍的I/O消耗。&lt;/li&gt;
&lt;li&gt;由于数据总是打包成批量读取的，所以压缩是非常容易的。同时数据按列分别存储这也更容易压缩。这进一步降低了I/O的体积。&lt;/li&gt;
&lt;li&gt;由于I/O的降低，这将帮助更多的数据被系统缓存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于执行一个查询需要处理大量的行，因此在整个向量上执行所有操作将比在每一行上执行所有操作更加高效。同时这将有助于实现一个几乎没有调用成本的查询引擎。如果你不这样做，使用任何一个机械硬盘，查询引擎都不可避免的停止CPU进行等待。所以，在数据按列存储并且按列执行是很有意义的。&lt;/p&gt;
&lt;p&gt;有两种方法可以做到这一点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向量引擎：所有的操作都是为向量而不是为单个值编写的。这意味着多个操作之间的不再需要频繁的调用，并且调用的成本基本可以忽略不计。操作代码包含一个优化的内部循环。&lt;/li&gt;
&lt;li&gt;代码生成：生成一段代码，包含查询中的所有操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是不应该在一个通用数据库中实现的，因为这在运行简单查询时是没有意义的。但是也有例外，例如，MemSQL使用代码生成来减少处理SQL查询的延迟(只是为了比较，分析型数据库通常需要优化的是吞吐而不是延迟)。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;概括来讲，存储引擎分为两大类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对事务处理( OLTP )优化的架构&lt;/li&gt;
&lt;li&gt;针对分析型(OLAP)的优化架构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们典型的访问模式存在很大差异 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OLTP系统通常面向用 户，这意味着他们可能收到大量的请求。为了处理负载，应用程序通常在每个查询中只涉及少量的记录。应用程序基于某种键来请求记录 ，而存储引擎使用索引来查找所请求键的数据。磁盘寻道时间往往是瓶颈 。&lt;/li&gt;
&lt;li&gt;由于不是直接面对最终用户 ，数据仓库和类似的分析型系统相对并不太广为人知，它们主要由业务分析师使用。 处理的查询请求数目远低于OLTP系统， 但每 个查询通常要求非常苛刻，需要在短时间 内扫描数百万条记录。 磁盘带宽(不是 寻道时间)通常是瓶颈，而面向列的存储对于这种工作负载成为日益流行的解决 方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在OLTP方面，由两个主要流派的存储引擎 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志结构流派，它只允许追加式更新文件和删除过时的文件，但不会修改 已写入的文件 。 BitCask、 SSTables、 LSM-tree、 LeveIDB、 Cassandra、 HBase、 Lucene 等属于此类。&lt;/li&gt;
&lt;li&gt;原地更新流派，将磁盘视为可以覆盖的一组固定大小的页。 B-tree是这一哲学的最典型代表，它已用于所有主要的关系数据库，以及大量的非关系数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日志结构的存储引擎是一个相对较新的方案。其关键思想是系统地将磁盘上随机访问写入转为顺序写入，由于硬盘驱动器和SSD的性能特性，可以实现更高的写入吞吐量。作为应用开发人员，掌握更多有关存储引擎内部的知识，可以更好地了解哪种工具最适合你的具体应用。&lt;/p&gt;
- https://blog.riba2534.cn/blog/2021/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/ - </description>
        </item>
    
    
    
        <item>
        <title>Go Linq 使用</title>
        <link>https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Tue, 25 May 2021 02:35:34 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/ -&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近我负责了一个新项目，大概流程是从 DB 里拿出一堆数据之后，得到一个包含字段很多的结构体的 &lt;code&gt;List&lt;/code&gt;，然后需要对这个 &lt;code&gt;List&lt;/code&gt; 进行一系列的过滤，包括但不限于类似 sql 中的  &lt;code&gt;where&lt;/code&gt;、&lt;code&gt;group by&lt;/code&gt;、&lt;code&gt;select&lt;/code&gt; 、按照某个字段排序、求并补交集之类的操作。&lt;/p&gt;
&lt;p&gt;如果让我自己写，我肯定是一个一个条件慢慢写，但是代码库我是接手的别人的，我看了下现有的实现，大呼牛逼，原来目前对于这种操作已经有了成熟的解决方案了。&lt;/p&gt;
&lt;p&gt;那就是：&lt;strong&gt;LINQ&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;go-linq-介绍&#34;&gt;&lt;code&gt;Go-linq&lt;/code&gt; 介绍&lt;/h1&gt;
&lt;p&gt;语言集成查询（Language Integrated Query），缩写为 &lt;code&gt;LINQ&lt;/code&gt;，是微软的一项技术，并且被应用在了 C# 中，它直接将一些列的查询操作集成在了编程语言中，使得开发者筛选数据的时候可以大大加快速度。详见：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%AF%AD%E8%A8%80%E9%9B%86%E6%88%90%E6%9F%A5%E8%AF%A2&#34;&gt;语言集成查询&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Golang 中，语言本身并没有内置这种操作，不过好在有开源社区帮助我们实现了一个库 &lt;a href=&#34;https://github.com/ahmetb/go-linq/tree/v3.2.0&#34;&gt;ahmetb/go-linq&lt;/a&gt; ，详细的支持的函数列表和操作可以看这里： &lt;a href=&#34;https://pkg.go.dev/github.com/ahmetb/go-linq/v3&#34;&gt;https://pkg.go.dev/github.com/ahmetb/go-linq/v3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;特性如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有使用任何第三方依赖，只使用了go 原生库&lt;/li&gt;
&lt;li&gt;通过迭代器模式实现了惰性求值&lt;/li&gt;
&lt;li&gt;并发安全&lt;/li&gt;
&lt;li&gt;支持泛型方法&lt;/li&gt;
&lt;li&gt;支持 array、slice、map、string、channel 和自定义集合类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;go-linq 提供的方法可以按照是否支持泛型分为两大类。泛型方法都以 &lt;code&gt;T&lt;/code&gt; 结尾。非泛型方法需要将函数的入参类型限制为 &lt;code&gt;interface{}&lt;/code&gt; 并做类型断言。&lt;/p&gt;
&lt;h1 id=&#34;基本使用&#34;&gt;基本使用&lt;/h1&gt;
&lt;h2 id=&#34;牛刀小试&#34;&gt;牛刀小试&lt;/h2&gt;
&lt;p&gt;首先，肯定是先引入包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go get github.com/ahmetb/go-linq/v3
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;引入之后，就可以在项目里面用起来了。&lt;/p&gt;
&lt;p&gt;我们找个例子先试一试，假设我要筛选出一个数组中的所有偶数，可以对比一下自己写和使用库的写法的区别：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;github.com/ahmetb/go-linq/v3&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#228b22&#34;&gt;// 定义数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	a := []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;}
	&lt;span style=&#34;color:#228b22&#34;&gt;// 普通过滤
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	a1 := []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; v%&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; {
			a1 = &lt;span style=&#34;color:#658b00&#34;&gt;append&lt;/span&gt;(a1, v)
		}
	}
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(a1) &lt;span style=&#34;color:#228b22&#34;&gt;// output: [2 4 6 8]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 使用 go-linq
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	a2 := []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{}
	linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(a).&lt;span style=&#34;color:#008b45&#34;&gt;Where&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)%&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; }).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;a2)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(a2) &lt;span style=&#34;color:#228b22&#34;&gt;// output: [2 4 6 8]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看出，使用了 go-linq 之后，只用了一行代码，就很方便的完成了过滤，当然这只是一个简单的例子，接下来，我们详细看看具体怎么用&lt;/p&gt;
&lt;h2 id=&#34;获取数据源&#34;&gt;获取数据源&lt;/h2&gt;
&lt;p&gt;我们的目的是进行查询，那么在查询之前首先要获取数据，go-linq 支持将 &lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;channel&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt; 和自定义的集合作为数据源，并且提供了以下获取数据的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(source &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;FromChannel&lt;/span&gt;(source &amp;lt;-&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;FromChannelT&lt;/span&gt;(source &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;FromIterable&lt;/span&gt;(source Iterable) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;FromString&lt;/span&gt;(source &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Range&lt;/span&gt;(start, count &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) Query &lt;span style=&#34;color:#228b22&#34;&gt;// 生成一个连续的数字list，起始是start，数量为 count 个
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Repeat&lt;/span&gt;(value &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, count &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) Query
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;From&lt;/code&gt; 方法支持上面的所有类型进行初始化，&lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;map&lt;/code&gt; 等只能通过 &lt;code&gt;From&lt;/code&gt; 方法进行初始化&lt;/p&gt;
&lt;p&gt;&lt;code&gt;From&lt;/code&gt; 函数会将传入的集合类型转换成内部的 &lt;code&gt;Query&lt;/code&gt; 类型，而 &lt;code&gt;Query&lt;/code&gt; 中只包含一个方法 &lt;code&gt;Iterate&lt;/code&gt; ，这个方法的返回值是一个迭代器函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Iterator is an alias for function to iterate over data.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Iterator &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() (item &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, ok &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;// Query is the type returned from query functions. It can be iterated manually
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// as shown in the example.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Query &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	Iterate &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() Iterator
}

&lt;span style=&#34;color:#228b22&#34;&gt;// Iterable is an interface that has to be implemented by a custom collection in
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// order to work with linq.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Iterable &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#008b45&#34;&gt;Iterate&lt;/span&gt;() Iterator
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为了描述方便，我们定义如下结构体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 一个学生类，里面包含学号和姓名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Student &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	ID   &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
	Name &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 定义一个生成 100 个学生的函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;() []Student {
	students := []Student{}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;; i++ {
		students = &lt;span style=&#34;color:#658b00&#34;&gt;append&lt;/span&gt;(students, Student{i, fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;学生%d&amp;#34;&lt;/span&gt;, i)})
	}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; students
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;那么，我们以 &lt;code&gt;students&lt;/code&gt; 作为数据源，则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;students := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;()
linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来我们介绍一些常用的查询操作。&lt;/p&gt;
&lt;h2 id=&#34;筛选数据-where&#34;&gt;筛选数据 &lt;code&gt;where&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;筛选可以说是最常见的集合操作了。go-linq 提供了以下几种方法方法来进行筛选，它们的区别在于筛选函数中是否提供索引位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Where&lt;/span&gt;(predicate &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;WhereIndexed&lt;/span&gt;(predicate &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;WhereIndexedT&lt;/span&gt;(predicateFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;WhereT&lt;/span&gt;(predicateFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;假设我们要筛选出 &lt;code&gt;学号 &amp;gt; 50&lt;/code&gt; 的学生，则可以写出如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	result := []Student{}
	students := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;()
	linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students).&lt;span style=&#34;color:#008b45&#34;&gt;Where&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;
	}).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;result)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(result)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;where&lt;/code&gt; 接受一个返回值为 &lt;code&gt;bool&lt;/code&gt; 的函数，我们这里首先断言 &lt;code&gt;i&lt;/code&gt; 的类型为 &lt;code&gt;Student&lt;/code&gt; ，然后判断学号是否大于50，最后使用 &lt;code&gt;ToSlice&lt;/code&gt; 函数，把结果转换成一个 &lt;code&gt;slice&lt;/code&gt;，得到答案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Toslice&lt;/code&gt; 函数的实现也是经过迭代器的遍历，这里相当于内部做了一个封装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// ToSlice iterates over a collection and saves the results in the slice pointed
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// by v. It overwrites the existing slice, starting from index 0.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// If the slice pointed by v has sufficient capacity, v will be pointed to a
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// resliced slice. If it does not, a new underlying array will be allocated and
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// v will point to it.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(v &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) {
	res := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(v)
	slice := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;Indirect&lt;/span&gt;(res)

	cap := slice.&lt;span style=&#34;color:#008b45&#34;&gt;Cap&lt;/span&gt;()
	res.&lt;span style=&#34;color:#008b45&#34;&gt;Elem&lt;/span&gt;().&lt;span style=&#34;color:#008b45&#34;&gt;Set&lt;/span&gt;(slice.&lt;span style=&#34;color:#008b45&#34;&gt;Slice&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, cap)) &lt;span style=&#34;color:#228b22&#34;&gt;// make len(slice)==cap(slice) from now on
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
	next := q.&lt;span style=&#34;color:#008b45&#34;&gt;Iterate&lt;/span&gt;()
	index := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; item, ok := &lt;span style=&#34;color:#008b45&#34;&gt;next&lt;/span&gt;(); ok; item, ok = &lt;span style=&#34;color:#008b45&#34;&gt;next&lt;/span&gt;() {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; index &amp;gt;= cap {
			slice, cap = &lt;span style=&#34;color:#008b45&#34;&gt;grow&lt;/span&gt;(slice)
		}
		slice.&lt;span style=&#34;color:#008b45&#34;&gt;Index&lt;/span&gt;(index).&lt;span style=&#34;color:#008b45&#34;&gt;Set&lt;/span&gt;(reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(item))
		index++
	}

	&lt;span style=&#34;color:#228b22&#34;&gt;// reslice the len(res)==cap(res) actual res size
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	res.&lt;span style=&#34;color:#008b45&#34;&gt;Elem&lt;/span&gt;().&lt;span style=&#34;color:#008b45&#34;&gt;Set&lt;/span&gt;(slice.&lt;span style=&#34;color:#008b45&#34;&gt;Slice&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, index))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;排序数据-order-by&#34;&gt;排序数据 &lt;code&gt;order by&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;go-linq 支持升序排序，降序排序，自定义排序，函数签名如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;OrderBy&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) OrderedQuery
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;OrderByDescending&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) OrderedQuery
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;OrderByDescendingT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) OrderedQuery
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;OrderByT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) OrderedQuery
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Sort&lt;/span&gt;(less &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i, j &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SortT&lt;/span&gt;(lessFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;升序排序&#34;&gt;升序排序&lt;/h3&gt;
&lt;p&gt;还是上面的例子，假设我们要对学生的学号从小到大排序（虽然本身就是升序的，这里只作为一个例子）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	result := []Student{}
	students := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;()
	linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students).&lt;span style=&#34;color:#008b45&#34;&gt;OrderBy&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{} {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID
	}).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;result)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(result)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;OrderBy 接收的是要排序的具体字段，这里取出结构体的序号.&lt;/p&gt;
&lt;h3 id=&#34;降序排序&#34;&gt;降序排序&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	result := []Student{}
	students := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;()
	linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students).&lt;span style=&#34;color:#008b45&#34;&gt;OrderByDescending&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{} {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID
	}).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;result)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(result)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;跟上面一样，我们只是把调用方法换成了 OrderByDescending&lt;/p&gt;
&lt;h3 id=&#34;自定义比较函数&#34;&gt;自定义比较函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	result := []Student{}
	students := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;()
	linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students).&lt;span style=&#34;color:#008b45&#34;&gt;Sort&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, j &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID &amp;gt; j.(Student).ID
	}).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;result)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(result)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果用过 &lt;code&gt;C++&lt;/code&gt; 的 &lt;code&gt;sort&lt;/code&gt; 的同学肯定很熟悉这个操作，就是自定义一个比较函数，我这里只是简单的从大到小排个序，但是实际使用中，你可以任意做一些骚操作。&lt;/p&gt;
&lt;h2 id=&#34;选择-select&#34;&gt;选择 &lt;code&gt;select&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;select 主要用来对结构体字段进行处理筛选&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Select&lt;/code&gt;、&lt;code&gt;SelectT&lt;/code&gt;:筛选对应的字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SelectIndexd&lt;/code&gt;、&lt;code&gt;SelectIndexdT&lt;/code&gt;:筛选对应字段，这边可以拿到对应结构体的下标信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数签名如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Select&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectIndexed&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectIndexedT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectMany&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectManyBy&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query, ...) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectManyByIndexed&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query, ...) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectManyByIndexedT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, resultSelectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectManyByT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, resultSelectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectManyIndexed&lt;/span&gt;(selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectManyIndexedT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectManyT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;SelectT&lt;/span&gt;(selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;假设我要获取这些学生的姓名列表，可以这么做：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	students := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;()
	linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students).&lt;span style=&#34;color:#008b45&#34;&gt;Select&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{} {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).Name
	}).&lt;span style=&#34;color:#008b45&#34;&gt;ForEachT&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(s &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;) {
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(s)
	})
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们从 &lt;code&gt;[]Students&lt;/code&gt; 中只把 &lt;code&gt;Name&lt;/code&gt; 字段提取出来了，并且变成了一个 &lt;code&gt;List&lt;/code&gt;，这里使用的 &lt;code&gt;ForEachT&lt;/code&gt; 底层也是使用迭代器遍历得到的。&lt;/p&gt;
&lt;p&gt;函数签名中带有 &lt;code&gt;SelectMany&lt;/code&gt; 的函数作用是把多维数组扁平化，对多维度数组进行处理，传入一个返回 &lt;code&gt;linq.Query&lt;/code&gt; 对象的方法，一次之后把二维数组扁平化为一维数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	input := [][]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;}}
	&lt;span style=&#34;color:#228b22&#34;&gt;//二位数组进行合并
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	r := linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(input).&lt;span style=&#34;color:#008b45&#34;&gt;SelectManyT&lt;/span&gt;(
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) linq.Query {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(i)
		},
	).&lt;span style=&#34;color:#008b45&#34;&gt;Results&lt;/span&gt;()
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(r)
	&lt;span style=&#34;color:#228b22&#34;&gt;//三维数组进行合并
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	input1 := [][][]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{{{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;}}, {{&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;}}}
	r = linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(input1).&lt;span style=&#34;color:#008b45&#34;&gt;SelectManyT&lt;/span&gt;(
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i [][]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) linq.Query {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(i)
		},
	).&lt;span style=&#34;color:#008b45&#34;&gt;SelectManyT&lt;/span&gt;(
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) linq.Query {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(i)
		},
	).&lt;span style=&#34;color:#008b45&#34;&gt;Results&lt;/span&gt;()
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(r)
}

&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;[1 2 3 4 5 6 7]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;[1 2 3 4 5 6 7 8 9 10]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;从例子可以看出，我们把一个二维数组打平成了一个一位数组，三维数组打平了两次，这里使用了 &lt;code&gt;.Results()&lt;/code&gt; 来获取结果，其实底层实现也是迭代器。&lt;/p&gt;
&lt;h2 id=&#34;分组-group-by&#34;&gt;分组 &lt;code&gt;group by&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;关于分组的函数签名定义有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;GroupBy&lt;/span&gt;(keySelector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, ...) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;GroupByT&lt;/span&gt;(keySelectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, elementSelectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;GroupJoin&lt;/span&gt;(inner Query, outerKeySelector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, ...) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;GroupJoinT&lt;/span&gt;(inner Query, outerKeySelectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, innerKeySelectorFn
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;假设我们要按照学号的奇偶性把学生分成两组，则可以：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	students := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents&lt;/span&gt;()
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; res []linq.Group
	linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students).&lt;span style=&#34;color:#008b45&#34;&gt;GroupBy&lt;/span&gt;(
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(key &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{} { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; key.(Student).ID % &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; },
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(value &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{} { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; value.(Student) },
	).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;res)
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; _, item := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; res {
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(item.Key)
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; item.Group {
			fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%+v &amp;#34;&lt;/span&gt;, v.(Student))
		}
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;GroupBy&lt;/code&gt; 接收两个参数，一个是分组的名称筛选函数，一个是分组的值筛选函数，最后分组后的每一组的结构为 &lt;code&gt;[]linq.Group&lt;/code&gt;，Group 结构为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Group is a type that is used to store the result of GroupBy method.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Group &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	Key   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}
	Group []&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;有一个组名称 key，还有组里的元素列表。&lt;/p&gt;
&lt;p&gt;另还有 &lt;code&gt;GroupJoin&lt;/code&gt; 这种函数可以连接其他的集合分组，可以查看 API 文档使用，这里不再叙述。&lt;/p&gt;
&lt;h2 id=&#34;集合操作&#34;&gt;集合操作&lt;/h2&gt;
&lt;p&gt;我们先把生成学生的函数做一点改造：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents1&lt;/span&gt;() []Student {
	students := []Student{}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;; i++ {
		students = &lt;span style=&#34;color:#658b00&#34;&gt;append&lt;/span&gt;(students, Student{i, fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;学生%d&amp;#34;&lt;/span&gt;, i)})
	}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; students
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents2&lt;/span&gt;() []Student {
	students := []Student{}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;; i &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;150&lt;/span&gt;; i++ {
		students = &lt;span style=&#34;color:#658b00&#34;&gt;append&lt;/span&gt;(students, Student{i, fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;学生%d&amp;#34;&lt;/span&gt;, i)})
	}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; students
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;students1 := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents1&lt;/span&gt;()
students2 := &lt;span style=&#34;color:#008b45&#34;&gt;makeStudents2&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里可以生成一个学号为 &lt;code&gt;1-100&lt;/code&gt; 与 &lt;code&gt;50-150&lt;/code&gt; 的学生，接下来我们对他进行一些集合操作。&lt;/p&gt;
&lt;h3 id=&#34;求差集-except&#34;&gt;求差集 &lt;code&gt;Except&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;go-linq 支持对两个 &lt;code&gt;Query&lt;/code&gt; 之间求差集，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Except&lt;/code&gt; ：根据结构体筛选两个 Query 之间的差集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExceptBy&lt;/code&gt; ：根据结构体的字段筛选两个 Query 之间的差集&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Except&lt;/span&gt;(q2 Query) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;ExceptBy&lt;/span&gt;(q2 Query, selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;ExceptByT&lt;/span&gt;(q2 Query, selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们先求一下 &lt;code&gt;students1-students2&lt;/code&gt; 的结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;res := []Student{}
linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;Except&lt;/span&gt;(linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students2)).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;res)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后的结果是学生学号为 &lt;code&gt;1-49&lt;/code&gt; 的学生。&lt;/p&gt;
&lt;p&gt;如果使用 &lt;code&gt;ExceptBy&lt;/code&gt; ，则我们就是指定了一个筛选函数，只用学生的ID作比较。最后的结果是学生学号为 &lt;code&gt;1-49&lt;/code&gt; 的学生。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;res := []Student{}
linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;ExceptBy&lt;/span&gt;(linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students2), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{} {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID
}).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;res)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;求交集-intersect&#34;&gt;求交集 &lt;code&gt;Intersect&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;我们来看一下求并集的函数签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Intersect&lt;/span&gt;(q2 Query) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;IntersectBy&lt;/span&gt;(q2 Query, selector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;IntersectByT&lt;/span&gt;(q2 Query, selectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一看就知道，和求差集差不多，我们来尝试一下。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Intersect&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;res := []Student{}
linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;Intersect&lt;/span&gt;(linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students2)).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;res)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;IntersectBy&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;res := []Student{}
linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;IntersectBy&lt;/span&gt;(linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students2), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{} {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID
}).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;res)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果都是学号为 &lt;code&gt;50-100&lt;/code&gt; 的学生。&lt;/p&gt;
&lt;h3 id=&#34;求并集-union&#34;&gt;求并集 &lt;code&gt;Union&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;先看函数签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Union&lt;/span&gt;(q2 Query) Query  &lt;span style=&#34;color:#228b22&#34;&gt;// 不会排除两个Query中重复的元素，有多少个元素就组合成多少个元素的Query
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Concat&lt;/span&gt;(q2 Query) Query &lt;span style=&#34;color:#228b22&#34;&gt;// 会排除掉两个Query中重复的元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Append&lt;/span&gt;(item &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query &lt;span style=&#34;color:#228b22&#34;&gt;// 将新的元素添加到Query的最后一个位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Prepend&lt;/span&gt;(item &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Query &lt;span style=&#34;color:#228b22&#34;&gt;// 将新的元素添加到Query的第一个位置
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;则：&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Union&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;Union&lt;/span&gt;(linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students2)).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;res)
&lt;span style=&#34;color:#228b22&#34;&gt;// 结果是学号 1-150 的学生（没去重）
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;去重后结果 &lt;code&gt;Concat&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;Concat&lt;/span&gt;(linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students2)).&lt;span style=&#34;color:#008b45&#34;&gt;ToSlice&lt;/span&gt;(&amp;amp;res)
&lt;span style=&#34;color:#228b22&#34;&gt;// 结果是学号 1-150 的学生（去重后）
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;Append&lt;/code&gt; 和 &lt;code&gt;Prepend&lt;/code&gt; 用法一样，此处不赘述。&lt;/p&gt;
&lt;h2 id=&#34;all-判断是否所有元素都满足条件&#34;&gt;&lt;code&gt;All&lt;/code&gt; 判断是否所有元素都满足条件&lt;/h2&gt;
&lt;p&gt;函数签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;All&lt;/span&gt;(predicate &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;AllT&lt;/span&gt;(predicateFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;All&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; })
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;返回一个 &lt;code&gt;bool&lt;/code&gt;，判断学生的学号是否都大于0&lt;/p&gt;
&lt;h2 id=&#34;any-判断是否有任意个元素满足条件&#34;&gt;&lt;code&gt;Any&lt;/code&gt; 判断是否有任意个元素满足条件&lt;/h2&gt;
&lt;p&gt;函数签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Any&lt;/span&gt;() &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;AnyWith&lt;/span&gt;(predicate &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;AnyWithT&lt;/span&gt;(predicateFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;AnyWith&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i.(Student).ID == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; })
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;返回一个 &lt;code&gt;bool&lt;/code&gt;，判断是否存在至少一个学生的学号等于0&lt;/p&gt;
&lt;h2 id=&#34;tomap-转换为map&#34;&gt;&lt;code&gt;ToMap&lt;/code&gt; 转换为Map&lt;/h2&gt;
&lt;p&gt;ToMap提供了三个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ToMap&lt;/code&gt;：需要配合 SelectT 方法去生成返回一个 linq.KeyValue 的结构，指定对应的Map的key和value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ToMapBy&lt;/code&gt;、&lt;code&gt;ToMapByT&lt;/code&gt;：提供两个方法，一个方法指定key，一个方法指定value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果key相同的话，前面的元素会被覆盖掉，ToMap 方法的使用需要配合Select方法.&lt;/p&gt;
&lt;p&gt;函数签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;ToMap&lt;/span&gt;(result &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{})
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;ToMapBy&lt;/span&gt;(result &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, keySelector &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, ...)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;ToMapByT&lt;/span&gt;(result &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, keySelectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}, valueSelectorFn &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Product &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	Name &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;
	Code &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
}

products := []Product{
	{Name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;, Code: &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;},
	{Name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, Code: &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;},
	{Name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lemon&amp;#34;&lt;/span&gt;, Code: &lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;},
	{Name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, Code: &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;},
}

map1 := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;{}
&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(products).
	&lt;span style=&#34;color:#008b45&#34;&gt;SelectT&lt;/span&gt;(
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(item Product) KeyValue { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; KeyValue{Key: item.Code, Value: item.Name} },
	).
	&lt;span style=&#34;color:#008b45&#34;&gt;ToMap&lt;/span&gt;(&amp;amp;map1)

fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(map1[&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;])
fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(map1[&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;])
fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(map1[&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;contains-判断元素是否在query中&#34;&gt;&lt;code&gt;Contains&lt;/code&gt; 判断元素是否在Query中&lt;/h2&gt;
&lt;p&gt;函数签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (q Query) &lt;span style=&#34;color:#008b45&#34;&gt;Contains&lt;/span&gt;(value &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;linq.&lt;span style=&#34;color:#008b45&#34;&gt;From&lt;/span&gt;(students1).&lt;span style=&#34;color:#008b45&#34;&gt;Contains&lt;/span&gt;(Student{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;学生1&amp;#34;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;返回一个 bool，判断数据源中是否存在此元素。&lt;/p&gt;
&lt;h1 id=&#34;结语&#34;&gt;结语&lt;/h1&gt;
&lt;p&gt;本文列出了 &lt;code&gt;go-linq&lt;/code&gt; 的常用操作，应该可以应付很多的场景了，go-linq 还有很多方法，大家可以自行查阅官方 API 文档。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;参考链接&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ahmetb/go-linq&#34;&gt;https://github.com/ahmetb/go-linq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/ahmetb/go-linq/v3&#34;&gt;https://pkg.go.dev/github.com/ahmetb/go-linq/v3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_34326321/article/details/110422960&#34;&gt;https://blog.csdn.net/qq_34326321/article/details/110422960&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/ - </description>
        </item>
    
    
    
        <item>
        <title>朋友们</title>
        <link>https://blog.riba2534.cn/friends/</link>
        <pubDate>Sun, 09 May 2021 01:18:05 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/friends/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/friends/ -- https://blog.riba2534.cn/friends/ - </description>
        </item>
    
    
    
        <item>
        <title>博客迁移至hugo</title>
        <link>https://blog.riba2534.cn/blog/2021/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3hugo/</link>
        <pubDate>Sat, 08 May 2021 18:07:05 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2021/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3hugo/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2021/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3hugo/ -&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;两年前把个人博客从 WordPress 迁移到 Typecho ，当时的想法是觉得 WordPress 功能太复杂，维护太麻烦，所以就迁移到了相对小型的博客 Typecho，同样也是 PHP 开发的。当时采用了一个很漂亮的 HandSome 主题，但是后面我越来越发现博客的关键在于内容与质量，好不好看应该是其次的，我有点本末倒置了。&lt;/p&gt;
&lt;p&gt;所以我打算换一种博客展示形式了&lt;/p&gt;
&lt;h2 id=&#34;为什么不再是-typecho&#34;&gt;为什么不再是 Typecho?&lt;/h2&gt;
&lt;p&gt;说一说采用 Typecho 的缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于工作后个人精力的原因，空闲时间并不多，没有很多时间维护服务器，所以需要一种更简单的博客维护方式。&lt;/li&gt;
&lt;li&gt;目前的 Typecho 博客还放在腾讯云的一台服务器上，这个服务器再过一年多就过期了，而我又不经常更新与维护，导致了目前服务器版本还停留在 Ubuntu16.04，可能会存在很多历史问题，我懒得修&lt;/li&gt;
&lt;li&gt;LAMP 这种动态博客的方式有点陈旧，我还会经常忘记 MySQL 的密码，长此以往，等到服务器快过期的时候一定是一个灾难。&lt;/li&gt;
&lt;li&gt;我现在觉得博客应该专注于内容，不想搞那么些花里胡哨的东西，需要寻找一种新的博客展示方式。&lt;/li&gt;
&lt;li&gt;现在静态博客比较流行，也比较流行 Serverless 的概念，我想试试&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;我的需求&#34;&gt;我的需求&lt;/h2&gt;
&lt;p&gt;我目前对博客的需求是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简洁：我希望功能与页面都简洁，能突出博客的内容即可，但是也不能太丑。&lt;/li&gt;
&lt;li&gt;支持完整的 MarkDown 语法与数学公式支持&lt;/li&gt;
&lt;li&gt;容易维护：我不想花费太多时间在服务器的维护上，也不想整天被黑客盯上，冲着我的网站扫个不停。&lt;/li&gt;
&lt;li&gt;费用低一点：目前使用的云服务器是腾讯云的学生机，在毕业前我考虑到了毕业后没有学生优惠这件事，一下子买了好几年，但是总会过期的，过期后的 1C1G 的机器，一月好像顶我现在一年的费用，为了维护一个博客，不值得这样。&lt;/li&gt;
&lt;li&gt;数据存储不希望使用数据库：放在云服务器上的 MySQL，比较危险，万一哪天服务器被黑了，直接给我删库我咋办，可以做一个定时备份，但是这样比较麻烦，使用 Markdown 这种文件存储的方式更好一些。&lt;/li&gt;
&lt;li&gt;希望通过 Git 进行版本控制：写的多了，就知道版本控制的重要性了。&lt;/li&gt;
&lt;li&gt;内容可以长时间存在，防止年久失修丢数据，目前来看，GitHub 可以满足这一点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么是-hugo&#34;&gt;为什么是 Hugo?&lt;/h2&gt;
&lt;p&gt;经过我的一番调研，最终落在了 Hexo 和 Hugo 这两个静态页面生成器身上，由于我目前从事 Golang 开发，对 Go 语言比较熟悉，最后就选择 Hugo 了。(听说文章多了 Hexo 渲染的会很慢？)&lt;/p&gt;
&lt;p&gt;那说一下 Hugo 的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go语言编写，只有一个可执行二进制文件，生成速度极快&lt;/li&gt;
&lt;li&gt;主题大多都比较简洁，可以突出内容&lt;/li&gt;
&lt;li&gt;完全是静态博客，没有后端，通过源文件生成HTML文件，杜绝一切黑客攻击，静态页面访问速度也比较快。&lt;/li&gt;
&lt;li&gt;主题大部分都比较简单，我一个完全不会前端的，折腾折腾折腾也能魔改。。&lt;/li&gt;
&lt;li&gt;渲染引擎支持完整的 Markdown 语法与数学公式&lt;/li&gt;
&lt;li&gt;可以 Servless ，静态页面托管在任何地方都比较方便。&lt;/li&gt;
&lt;li&gt;源代码可以放在 GitHub 上，有版本控制，通过 GitHub Actions 可以实现静态博客自动部署。&lt;/li&gt;
&lt;li&gt;不需要后端，不需要数据库，维护起来及其方便。&lt;/li&gt;
&lt;li&gt;省钱，如果使用 GitHub Pages 的方法，则完全可以不要钱，通过各大云服务厂商的静态页面托管，按量付费，也很便宜。比云服务器不知道便宜哪里去了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;折腾&#34;&gt;折腾&lt;/h2&gt;
&lt;p&gt;选择了 Hugo 后，我就要挑选一款看的过去的主题，最后选了半天，决定采用 &lt;a href=&#34;https://github.com/AmazingRise/hugo-theme-diary&#34;&gt;Diary&lt;/a&gt; 主题，简单大方。&lt;/p&gt;
&lt;p&gt;配置的时候踩了很多坑，我又不会前端，只能拿起来现场魔改，比如自带的归档页面太大了，我改成了列表形式，还有各种微调（&lt;del&gt;大调我也不会啊&lt;/del&gt;）&lt;/p&gt;
&lt;p&gt;&lt;del&gt;评论系统选了 &lt;a href=&#34;https://valine.js.org/&#34;&gt;Valine&lt;/a&gt; ，简单好配置。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;评论系统目前换成了 &lt;a href=&#34;https://twikoo.js.org/&#34;&gt;twikoo&lt;/a&gt; 由于我的博客托管在腾讯云 CloudBase 上，twikoo 恰好使用了 CloudBase 的能力，而且按量付费价格也很便宜，就使用这个了。&lt;/p&gt;
&lt;p&gt;最恶心的部分是数据迁移，老的 Typecho 在 MySQL 中，我肯定不能傻傻的手动复制粘贴，于是我花了小一天写了个迁移脚本，基本就是去读DB中的数据，然后序列化成 Hugo 博客需要的形式，再按年份保存。。&lt;/p&gt;
&lt;p&gt;最后是部署：&lt;/p&gt;
&lt;p&gt;虽然说可以白嫖 GitHub Pages，但是这玩意毕竟在国外，访问速度太慢。于是我采用了腾讯云的静态网站托管，自带 CDN 加速，美滋滋。部署的时候采用 GitHub Actions ，每当我向仓库进行推送，就会博客就会自动部署。&lt;/p&gt;
&lt;p&gt;过程中用到的一些链接：&lt;/p&gt;
&lt;p&gt;评论系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DesertsP/Valine-Admin&#34;&gt;https://github.com/DesertsP/Valine-Admin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://valine.js.org/&#34;&gt;https://valine.js.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.leancloud.cn/&#34;&gt;https://www.leancloud.cn/&lt;/a&gt; (ServerLess云服务)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.wangjunfeng.com/post/hugo-cloudbase/&#34;&gt;https://blog.wangjunfeng.com/post/hugo-cloudbase/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twikoo.js.org/&#34;&gt;https://twikoo.js.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hugo模板开发教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hugo.aiaide.com/post/&#34;&gt;https://hugo.aiaide.com/post/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/0b9aecff290c&#34;&gt;https://www.jianshu.com/p/0b9aecff290c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.wikty.com/post/hugo-tutorial/&#34;&gt;http://blog.wikty.com/post/hugo-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;经过一番折腾，我成功了。&lt;/p&gt;
&lt;p&gt;目前我的博客链接没变，还是：&lt;a href=&#34;https://blog.riba2534.cn/&#34;&gt;https://blog.riba2534.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老的 Typecho 链接为：&lt;a href=&#34;https://blog2.riba2534.cn/&#34;&gt;https://blog2.riba2534.cn/&lt;/a&gt;（在我的服务器过期前，应该还会放在这，只不过不会更新了）&lt;/p&gt;
&lt;p&gt;为了保险起见，我以后的文章应该也会 CSDN 和 这个 Hugo 博客各发一个。&lt;/p&gt;
&lt;p&gt;话又说回来，要想简单好维护，为什么不是 CSDN 呢？我也是 CSDN 排名 2000 多的作者，主要是这玩意现在广告太多，低质内容太多，还有审核，我之前的有些文章就被下掉了，说有风险，我也不知道有啥风险。还有就是经常改样式，我很不喜欢&amp;hellip;&lt;/p&gt;
&lt;p&gt;其实我司的飞书文档是一个好选择，在线编辑，该有的都有，也不用作者自己维护，也有历史操作记录，也很简洁，如果出一个类似博客的东西（类似于现有的飞书知识库？），应该会很受欢迎.&lt;/p&gt;
- https://blog.riba2534.cn/blog/2021/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3hugo/ - </description>
        </item>
    
    
    
        <item>
        <title>关于</title>
        <link>https://blog.riba2534.cn/about/</link>
        <pubDate>Fri, 07 May 2021 13:11:39 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/about/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/about/ -&lt;h1 id=&#34;who-am-i&#34;&gt;🐵Who am I&lt;/h1&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210427152737.jpeg&#34;  width=&#34;30px&#34; height=&#34;30px&#34;  alt=&#34;头像&#34;/&gt;
行不更名坐不改姓，我就是 riba2534.
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;riba2534 是我在网络上的常用代号，本人于 2020 年毕业于计算机科学与技术专业，我一直使用一个兔斯基的头像(&lt;del&gt;如果要问为什么是，因为我太懒，懒得换&lt;/del&gt;)。&lt;/p&gt;
&lt;p&gt;兴趣使然（&lt;del&gt;我会告诉你我是小时候玩网络游戏下载一堆外挂然后电脑中毒后开始对技术感兴趣的？&lt;/del&gt;），热爱计算机相关技术，爱折腾爱瞎搞，退役 Acmer。&lt;/p&gt;
&lt;p&gt;目前在字节跳动（ByteDance）担任今日头条的服务端研发工程师，常用语言为：Golang、Python、C/C++。&lt;/p&gt;
&lt;h2 id=&#34;环境与设备&#34;&gt;环境与设备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常用环境为：Visual Studio Code（主力编辑器），JetBrains IDE（辅助用）&lt;/li&gt;
&lt;li&gt;常用设备为：MacBook Pro (16-inch, 2019) 和 一台组装机(&lt;del&gt;主要用来打游戏，嘿嘿&lt;/del&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他主页&#34;&gt;其他主页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;个人网站：&lt;a href=&#34;https://www.riba2534.cn/&#34;&gt;https://www.riba2534.cn/&lt;/a&gt; （大一闲的无聊用wordpress搭的网站，以后再也不会更新了，但是我觉得挺好看的，就不下线了）&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&#34;https://github.com/riba2534&#34;&gt;https://github.com/riba2534&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSDN：&lt;a href=&#34;https://blog.csdn.net/riba2534&#34;&gt;https://blog.csdn.net/riba2534&lt;/a&gt; （大学时期最常用，写了一堆题解）&lt;/li&gt;
&lt;li&gt;知乎：&lt;a href=&#34;https://www.zhihu.com/people/riba2534&#34;&gt;https://www.zhihu.com/people/riba2534&lt;/a&gt; （网上闲聊吹水。。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一些垃圾&#34;&gt;一些垃圾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riba2534/my_acm_template&#34;&gt;ACM_Template&lt;/a&gt;：竞赛退役后整理的 ACM 模板，希望对后人有帮助. &lt;a href=&#34;https://riba2534.github.io/book/&#34;&gt;网页版&lt;/a&gt; | &lt;a href=&#34;https://github.com/riba2534/my_acm_template/releases/download/v1.0/riba2534-ACM-Template.pdf&#34;&gt;PDF版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riba2534/My_ACM_Code&#34;&gt;My_ACM_Code&lt;/a&gt;：为了防止代码丢，之前用爬虫爬的我的各大 OJ AC 代码。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riba2534/TCP-IP-NetworkNote&#34;&gt;TCP-IP-NetworkNote&lt;/a&gt;：《TCP/IP网络编程》(韩-尹圣雨)学习笔记，本来是个人笔记，没想到发出去还收获了一堆 Star.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riba2534/MyLearnNotes&#34;&gt;MyLearnNotes&lt;/a&gt;：我的 CS 学习笔记，刚开始挺有动力写的，后来几乎都是自己学然后懒得记笔记了. &lt;a href=&#34;https://notes.riba2534.cn/#/&#34;&gt;网页版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实上面的东西基本都是在大学时期搞的，大学时期主要精力在竞赛上，所以没搞太工程的东西，之前喜欢写一写爬虫或者好玩的小工具，上不了台面还是别发在这了。开始做一些工程化的东西是大三去头条实习后，做了很多项目，工程能力才逐渐提上来，不过这些东西得保密不能发。。一直想搞点自己的开源项目，但是工作之外的时间太零散，不连续..就一直在割🕊&lt;/p&gt;
&lt;h2 id=&#34;曾获奖项&#34;&gt;曾获奖项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2018.11 第43届ACM-ICPC国际大学生程序设计竞赛亚洲区域赛(青岛站) 银牌&lt;/li&gt;
&lt;li&gt;2018.11 第43届ACM-ICPC国际大学生程序设计竞赛亚洲区域赛(北京站) 铜牌&lt;/li&gt;
&lt;li&gt;2018.11 第四届CCPC中国大学生程序设计竞赛总决赛（CCPC-Final） 铜牌&lt;/li&gt;
&lt;li&gt;2018.10 第四届CCPC中国大学生程序设计竞赛(秦皇岛站) 铜牌&lt;/li&gt;
&lt;li&gt;2018.05 河南省第十一届ACM大学生程序设计竞赛 金牌(Rank 4)&lt;/li&gt;
&lt;li&gt;2018.04 第九届蓝桥杯全国软件和信息技术专业人才大赛省赛A组 二等奖&lt;/li&gt;
&lt;li&gt;2017.04 第八届蓝桥杯全国软件和信息技术专业人才大赛省赛B组 一等奖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;联系我&#34;&gt;联系我&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Email：riba2534@qq.com&lt;/li&gt;
&lt;li&gt;QQ：735632581&lt;/li&gt;
&lt;li&gt;微信：riba2534&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(加好友请注明来意。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;碎碎念：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于工作比较忙，可能会很久才更新一篇博客，故而把博客从 Typecho 迁移到 Hugo 便于维护，由于本人太蠢，搞不懂前端，对本主题进行了魔改，好像有很多 Bug&amp;hellip;，如果您发现了请告诉我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;之前的一些博客基本在 CSDN 上。本博客先是迁移了一些 2018 年 12 月 - 2021年初的文章，后续本人的博客也会更新在这里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;赞赏&#34;&gt;赞赏&lt;/h1&gt;
&lt;p&gt;如果你感觉我的文章对你有帮助，可以请我喝一杯咖啡。&lt;/p&gt;
&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210507155104.JPG&#34;  width=&#34;50%&#34; height=&#34;%50&#34;  alt=&#34;收款&#34;/&gt;
- https://blog.riba2534.cn/about/ - </description>
        </item>
    
    
    
        <item>
        <title>归档</title>
        <link>https://blog.riba2534.cn/archive/</link>
        <pubDate>Fri, 07 May 2021 11:02:51 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/archive/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/archive/ -- https://blog.riba2534.cn/archive/ - </description>
        </item>
    
    
    
        <item>
        <title>BitTorrent简介</title>
        <link>https://blog.riba2534.cn/blog/2021/bittorrent%E7%AE%80%E4%BB%8B/</link>
        <pubDate>Sun, 11 Apr 2021 17:09:13 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2021/bittorrent%E7%AE%80%E4%BB%8B/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2021/bittorrent%E7%AE%80%E4%BB%8B/ -&lt;h1 id=&#34;bittorrent-简介&#34;&gt;BitTorrent 简介&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411143727.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;从-p2p-说起&#34;&gt;从 P2P 说起&lt;/h1&gt;
&lt;p&gt;经常在网上飙车的老司机应该都知道 BT 下载，但是有时候拿到了种子却下载不动，会不会很抓狂，是不是还觉得是自己网不行，那作为一个合格的老司机，我们需要探究一下下载不动的原因是什么，BT的运作方式是怎样的，如果你也有这样的疑惑，那么，系好安全带，我们一起来了解一下什么是 BT。&lt;/p&gt;
&lt;p&gt;2001年4月，程序员布莱姆·科恩设计了一种协议，然后在2001年7月2日，他发布了 BitTorrent 客户端的第一个实现。&lt;/p&gt;
&lt;p&gt;BT(BitTorrent)是 P2P 的一种实现，P2P也叫「对等网络」（英语：peer-to-peer， 简称&lt;strong&gt;P2P&lt;/strong&gt;），是一种在对等者（Peer）之间分配任务和工作负载的分布式应用架构，是对等计算模型在应用层形成的一种网络形式。在P2P网络环境中，彼此连接的多台计算机之间都处于对等的地位，各台计算机有相同的功能，无主从之分，每个节点既充当服务器，为其他节点提供服务，也能作为客户端，享用其他节点提供的服务。&lt;/p&gt;
&lt;p&gt;P2P有着很广泛的应用，比如 P2P金融（雾），区块链，BT下载等。它的关键字是&lt;strong&gt;去中心化&lt;/strong&gt;，依靠用户群（peers）来互相传输数据，符合这种特征的都可以称之为 P2P。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411143836.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;bittorrent&#34;&gt;BitTorrent&lt;/h1&gt;
&lt;p&gt;大家肯定有在互联网上下载各种资源的经历，比如电影电视剧，我们在网上一搜，就会搜到一些不知名的小网站，网站上通常会提供一个叫做「种子」的东西，我们使用时只需要把种子下载到电脑上，通常是一个后缀为 &lt;code&gt;.torrent&lt;/code&gt; 的文件， 然后用迅雷或者其他的下载工具下载。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;搜索词&lt;/th&gt;
&lt;th&gt;网站界面&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411144853.png&#34; alt=&#34;3&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411144902.png&#34; alt=&#34;4&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在实际操作中，如果我们使用迅雷进行下载，有时候会发现种子下不动，有时候发现下的特别慢，有时候还被提示资源敏感，无法下载，还有时候迅雷提示你开会员可以加速（这个时候开一个会员基本就可以满速下载了，因为迅雷已经把资源提前下载到自己服务器了），我们可能产生一些疑惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;种子是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么资源有时候下不动，有时候速度那么慢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何才能让我的BT下载速度变快？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这个疑问，我们需要了解一下 BT 协议，全称是 BitTorrent，这个协议被设计用来实现 P2P(Peer to Peer) 下载。普通的 HTTP/FTP 下载使用 TCP/IP 协议，BitTorrent 协议是架构于 TCP/IP 协议之上的一个P2P文件传输通信协议，是一个应用层协议。&lt;/p&gt;
&lt;p&gt;传统的下载是客户端请求服务器获取资源，下载方和资源提供方的角色很清楚。这样做的优点是简单，易于理解，我要下载东西，我就去请求服务器，缺点也很明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一旦服务器故障，大家都无法下载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器带宽有限，下载的人多速度必然下降&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 P2P 则不一样，每一个客户端同时也是服务器，从别人那里下载资源的同时，也提供资源给到别人。这样一来，就规避了服务器模型的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个人都是服务器，除非所有机器都故障了，否则网络依旧可以运转&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会去请求单一机器，而是从多个机器获取资源，这样可以使带宽得到最大利用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;传统下载&lt;/th&gt;
&lt;th&gt;BT下载&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411145036.png&#34; width = &#34;500&#34; height = &#34;500&#34; alt=&#34;传统下载&#34; align=center /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411145042.png&#34; width = &#34;500&#34; height = &#34;500&#34; alt=&#34;BT下载&#34; align=center /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;种子的格式与作用&#34;&gt;种子的格式与作用&lt;/h2&gt;
&lt;p&gt;我们对 BT 的认知，一般是从种子开始的，所以首先需要了解一下种子的格式与作用。&lt;/p&gt;
&lt;p&gt;我们一般下载下来的文件是一个以 &lt;code&gt;.torrent&lt;/code&gt; 结尾的文件，通过文本编辑器打开，会看见一堆乱码，它并不是一个纯文本文件，而是一个二进制文件，通过查资料，可以发现种子文件中采用了一种文件编码，叫做 &lt;code&gt;Bencode&lt;/code&gt; ，这种编码以 ACSII 字符来进行编码，里面包含几种简单的数据结构，我们一起来了解一下：&lt;/p&gt;
&lt;h3 id=&#34;bencode-编码&#34;&gt;Bencode 编码&lt;/h3&gt;
&lt;h4 id=&#34;字符串&#34;&gt;字符串&lt;/h4&gt;
&lt;p&gt;将一个字符串的前面加上长度标识和符号（冒号），这就是 Bencode 编码后的字符串了，比如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39;hello&#39; -&amp;gt; 5:hello
&#39;How are you&#39; -&amp;gt; 11:How are you
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;整数&#34;&gt;整数&lt;/h4&gt;
&lt;p&gt;一个整数起始以 &lt;code&gt;i&lt;/code&gt; 作为标识，结尾以 &lt;code&gt;e&lt;/code&gt; 来作为标识，把数字写在中间即可，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;123 -&amp;gt; i123e
666 -&amp;gt; i666e
0 -&amp;gt; i0e
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;列表&#34;&gt;列表&lt;/h4&gt;
&lt;p&gt;列表可以类比为 Python 中的列表，是一种容器性质的数据结构，每个元素可以是四种数据结构中的任意一组，没有长度限制。语法是，列表的开头和结尾分别用 &lt;code&gt;l&lt;/code&gt; 和 &lt;code&gt;e&lt;/code&gt; 作为标识符，中间的值就是任意的数据结构。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[123,666,0] -&amp;gt; li123ei666ei0ee
[123,&#39;hello&#39;,456] -&amp;gt; li123e5:helloi456ee
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;字典&#34;&gt;字典&lt;/h4&gt;
&lt;p&gt;字典的开头和结尾以 &lt;code&gt;d&lt;/code&gt; 和 &lt;code&gt;e&lt;/code&gt; 作为标识符，bencode中的字典，key 要求必须是字符串格式的，value 的格式可以随便。另外，编码过程，key 要&lt;strong&gt;根据字符串的字典序进行升序排序&lt;/strong&gt;。比如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#39;a&#39;:1,&#39;cd&#39;:[3,4],&#39;b&#39;:2} -&amp;gt; d1:ai1e1:bi2e2:cdli3ei4eee
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;torrent-种子的格式&#34;&gt;&lt;code&gt;.torrent&lt;/code&gt; 种子的格式&lt;/h3&gt;
&lt;p&gt;关于种子文件的定义，在官方文档：&lt;a href=&#34;http://www.bittorrent.org/beps/bep_0003.html&#34;&gt;bep_0003.rst_post&lt;/a&gt;  里面说的很清楚。实质上，种子文件就是一个使用 Bencode 格式编码的一个 Dictionary，里面含有一些字段，声明了关于这个种子的一些信息。&lt;/p&gt;
&lt;p&gt;大家可以把一个种子文件理解成为一个大 Json，只不过是因为压缩需要用二进制的形式存起来了而已。&lt;/p&gt;
&lt;p&gt;我写了一个解析器，可以把不可读的 bencode 变成可读的 json 格式：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/riba2534/bencode&#34;&gt;https://github.com/riba2534/bencode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们以 Ubuntu20.04.2 官方提供的种子为例：https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/20.04.2.0/ubuntu-20.04.2.0-desktop-amd64.iso.torrent&lt;/p&gt;
&lt;p&gt;把这个种子解析之后，会得到一个json文件，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;announce&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;https://torrent.ubuntu.com/announce&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;announce-list&amp;#34;&lt;/span&gt;: [
        [
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;https://torrent.ubuntu.com/announce&amp;#34;&lt;/span&gt;
        ],
        [
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;https://ipv6.torrent.ubuntu.com/announce&amp;#34;&lt;/span&gt;
        ]
    ],
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Ubuntu CD releases.ubuntu.com&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;created by&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mktorrent 1.1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;creation date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2021-02-12 03:02:32&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;info_hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4ba4fbf7231a3a660e86892707d25c135533a16a&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;2877227008&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ubuntu-20.04.2.0-desktop-amd64.iso&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;piece length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;262144&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;pieces&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;d89b853053ac28e09d6d322658636d9663aa80fe&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;287528aae8bda9ef962918ba8db2ceb0638454e4&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;149987b3a98147d9b5cc1e249b2fea7dc3401eb1&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;539f5c519a5fcb058d5978b415188340f57039df&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c5ac6a46748abef691e96f7913c60c22990d5123&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;e87e684ca1c31cc029560514058c75c306a6b41c&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c19e41f1c980b91ff735af99a2c4ab4d90946344&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4707444be592ae107ddd614a3ef79fbc21e090a3&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3acce815ec86a6d5bc0677874ab98dba424ddf35&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;d4e0d04c15514509c14fa97b1eb09f3bdbaff144&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;f03a8f9c698568221b4582995716b1123b7e7390&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3efe825e140ab8137525f2ecaa0b32d46ec62851&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;数量太多，这里截断，一共10976行 .......&amp;#34;&lt;/span&gt;
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们可以发现，种子包含以下几个key：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key name&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;announce&lt;/td&gt;
&lt;td&gt;Tracker主服务器的URL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;announce-list&lt;/td&gt;
&lt;td&gt;可选，它的值存放的是备用Tracker的URL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;comment&lt;/td&gt;
&lt;td&gt;种子文件制作者的备注信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;created by&lt;/td&gt;
&lt;td&gt;创建的工具签名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creation date&lt;/td&gt;
&lt;td&gt;种子的创建时间&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info_hash&lt;/td&gt;
&lt;td&gt;整个文件的哈希值（采用SHA1算法）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info.length&lt;/td&gt;
&lt;td&gt;文件的长度,单位(Bytes),这个文件为：2.67G&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info.name&lt;/td&gt;
&lt;td&gt;文件名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info.piece length&lt;/td&gt;
&lt;td&gt;每个块的哈希值长度，这里是256k&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info.pieces&lt;/td&gt;
&lt;td&gt;每个块的哈希值列表&lt;/td&gt;
&lt;td&gt;分成的每个块的哈希值列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;该值如果为1，则表明客户端必须通过连接Tracker来获取其他下载者，即peer的IP地址和端口号；如果为0，则表明客户端还可以通过其他方式来获取peer的IP地址和端口号，如DHT方式。DHT即分布式哈希表（Distribute Hash Tabel），它是一种以分布式的方式来获取peer的方法，现在许多BT客户端既支持通过连接Tracker来获取peer，也支持通过DHT来获取peer。如果种子文件中没有private这个关键字，则表明不限制一定要通过连接Tracker来获取peer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info.files&lt;/td&gt;
&lt;td&gt;包含的文件信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;bt-下载流程概述&#34;&gt;BT 下载流程概述&lt;/h2&gt;
&lt;p&gt;刚才说了种子文件的格式，大家可能有疑惑，种子中这么多字段有啥用？我们先来简要了解一下BT下载的完整流程，再详细展开：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里有一个网站，可以生动形象的展示 BT 下载的流程。http://mg8.org/processing/bt.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们在这里用文字简述一下整个流程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;种子发布者制作种子，且向 Tracker 服务器表明，大家要下载这个种子就来找我。（Tracker 的地址就是种子文件中 &lt;code&gt;announce&lt;/code&gt; 字段中的 url）&lt;/li&gt;
&lt;li&gt;种子发布者把做好的种子分享到互联网。&lt;/li&gt;
&lt;li&gt;下载者在互联网上获取到种子文件&lt;/li&gt;
&lt;li&gt;下载者本地的 BT 客户端解析种子文件，拿到 Tarcker 地址，向 Tarcker 发起请求（HTTP或UDP），获取其他 Peer 的地址&lt;/li&gt;
&lt;li&gt;Tracker接收到请求后，去自己的存储里找拥有这个种子中的文件的 peers 的 IP:port，返回给下载者，并且把当前下载者的 IP:Port 加入服务器的存储。&lt;/li&gt;
&lt;li&gt;下载者与其他 Peer 建立连接，由于一个文件被分成了若干个文件块，所以下载者可以和多个 Peer 下载不同的块，下载完成后，校验块的哈希值，保存在本地。(这也是下载种子的人越多，下载速度越快的原因)&lt;/li&gt;
&lt;li&gt;整个文件下载完成时，校验整个文件哈希值，不出意外，下载成功&lt;/li&gt;
&lt;li&gt;BT客户端不要关闭，自己作为 Peer 服务 BT 网络中的其他人&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BT下载核心思想：人人为我，我为人人&lt;/p&gt;
&lt;p&gt;知道了基本下载流程之后，我们继续来了解一下细节。&lt;/p&gt;
&lt;h2 id=&#34;与-tracker-进行交互&#34;&gt;与 Tracker 进行交互&lt;/h2&gt;
&lt;h3 id=&#34;tracker-的作用&#34;&gt;Tracker 的作用&lt;/h3&gt;
&lt;p&gt;种子文件中的 &lt;code&gt;announce&lt;/code&gt; 字段中包含了一个 &lt;code&gt;url&lt;/code&gt; ，这个 &lt;code&gt;url&lt;/code&gt; 也就是 tracker 服务器。首先我们来了解 Tracker 是什么，服务器的作用是作为 peers 沟通的桥梁而存在，当下载者要下载某一个资源的时候，就会去向服务器询问，服务器查询之后如果发现自己保存了这个资源的其他节点，就把这些节点的地址返回，然后客户端知道这些 IP:Port 后，就去与其他 Peer 建立连接。&lt;/p&gt;
&lt;p&gt;Tracker 不存储任何具体资源的文件信息，只存储文件的哈希值，来帮助 Peers 来建立连接&lt;/p&gt;
&lt;h3 id=&#34;发布者做种seed&#34;&gt;发布者做种（Seed）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;做种：指上传文件数据给其他 BT 用户的行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;种子只有先被制作发布，才能使用，我们来探究一下种子的发布方法。我们先来实操一下，我现在有一个文件夹，叫做「学习资源」&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411163949.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 Utorrent 客户端中，我选择添加新的 torrent 文件，首先会让我选择一个目录，然后选一个区块大小（一般是 256KB）用于分割文件为若干个块，点击创建后，会得到一个文件，我解析字段后，如下图所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;announce&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;udp://tracker.openbittorrent.com:80/announce&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;announce-list&amp;#34;&lt;/span&gt;: [
    [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;udp://tracker.openbittorrent.com:80/announce&amp;#34;&lt;/span&gt;],
    [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;udp://tracker.opentrackr.org:1337/announce&amp;#34;&lt;/span&gt;]
  ],
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;created by&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;uTorrent/3.5.5&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;creation date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2021-03-27 16:34:08&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;encoding&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;info_hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;808eb761570975c41a7236ce8feaea5eb3c4c76b&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;files&amp;#34;&lt;/span&gt;: [
      { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.txt&amp;#34;&lt;/span&gt;] },
      { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.txt&amp;#34;&lt;/span&gt;] },
      { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3.txt&amp;#34;&lt;/span&gt;] }
    ],
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;学习资源&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;piece length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;16384&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;pieces&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;f118f355485f17f340330dc1bafb2f98fca7a455&amp;#34;&lt;/span&gt;]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一般来说，使用 BT 下载软件进行做种的时候，下载软件会内置几个 tracker 服务器，当然也可以自己找一些 tarcker 的地址添加进去，BT客户端会向这些 tracker 发起请求。Tracker 服务器就会记录下来上传者的 IP:Port ，以便于传输给后续下载者进行下载。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那如果下载者要下载的时候，所有拥有这些文件的人都不在线怎么办。那就真没办法了，这种种子也叫「死种」，因为没人上传，这也就是网上很多种子下载不动的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;下载者下载&#34;&gt;下载者下载&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;获取 Peers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为一个下载者，在开始下载资源之前首先要向 tracker 宣布自己的存在，同时获得其他人的地址。 因此接下来要做的事情就是与tracker通信，获取peers。&lt;/p&gt;
&lt;p&gt;我们仍然可以从官方文档中找到下载者与 tarcker 通信的方式 &lt;a href=&#34;http://www.bittorrent.org/beps/bep_0003.html&#34;&gt;http://www.bittorrent.org/beps/bep_0003.html&lt;/a&gt; ，可以看出下载者与 Trakcer 的通信方式有 UDP 和 HTTP 两种协议，具体使用哪一种，看种子里面包含的信息是 udp 还是 http，下面我们以 HTTP 的方式来进行探究：&lt;/p&gt;
&lt;p&gt;下载者向 Tracker 发起一个 GET 请求，请求的格式包含的关键字段：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;info_hash&lt;/td&gt;
&lt;td&gt;文件的哈希值，是一个资源的唯一标识&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;peer_id&lt;/td&gt;
&lt;td&gt;由本地客户端自己生成，一个随机20字节的字符串，向网络中的其他 peers 标记自己身份&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;本地客户端的监听接口，用于接收其他 Peer 发来的消息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Tracker 接收到 GET 请求后，Tracker服务器就会反连（NatCheck）下载者的IP地址和端口，这样就可以区分内网用户还是公网用户（如果是内网用户，它是连不通的，因为它会连到Nat服务器或者路由器上，结果就是连不通），然后服务器返回现在正在下载这个文件的所有公网用户的IP地址和端口列表，返回给BT客户端（也可能是部分客户列表），最后如果该用户是公网用户 Tracker服务器会把用户提交的IP地址和端口保存下来，这样其他人就可以找到该用户。&lt;/p&gt;
&lt;p&gt;在返回的 Body 中，也是一个用 Bencode 编码的信息，正常响应至少要包含 &lt;code&gt;interval&lt;/code&gt; 和 &lt;code&gt;peers&lt;/code&gt; 两个字段。其中，&lt;code&gt;interval&lt;/code&gt; 用于告诉客户端间隔多久再向服务端发一次请求（当然客户端有可能完全不理会），&lt;code&gt;peers&lt;/code&gt; 字段包含同伴的 &lt;code&gt;peer_id&lt;/code&gt;、&lt;code&gt;ip&lt;/code&gt;、&lt;code&gt;port&lt;/code&gt; 等信息。&lt;/p&gt;
&lt;p&gt;BT客户端得到这些其他用户IP后，就可以直接连接到这些IP和端口下载资料了。BT客户端会到所有的用户去寻找自己要下载的东西。BT客户端每找到一个用户就建立一个 Socket来下载 ，所以下载的人越多，速度就越快。&lt;/p&gt;
&lt;p&gt;我们可以来看一下整个下载过程，这里我参考了一个开源的 torrent 客户端的实现： &lt;a href=&#34;https://github.com/veggiedefender/torrent-client&#34;&gt;https://github.com/veggiedefender/torrent-client&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个种子文件中的 info.pieces 字段包含了每个小块的哈希值，而每个块的大小都是 256KB。这样就相当于把下载任务分解了，分解成了下载若干个大小为 256KB 的小块的任务。采用并发的方式去依次请求每个块的数据，然后计算好数据的位置放进最终结果中返回，然后把内存中的数据写入硬盘。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Download downloads the torrent. This stores the entire file in memory.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (t *Torrent) &lt;span style=&#34;color:#008b45&#34;&gt;Download&lt;/span&gt;() ([]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
    log.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Starting download for&amp;#34;&lt;/span&gt;, t.Name)
    &lt;span style=&#34;color:#228b22&#34;&gt;// Init queues for workers to retrieve work and send results
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    workQueue := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; *pieceWork, &lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(t.PieceHashes)) &lt;span style=&#34;color:#228b22&#34;&gt;// 任务队列，包含了若干个下载任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    results := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;chan&lt;/span&gt; *pieceResult)                     &lt;span style=&#34;color:#228b22&#34;&gt;// 结果队列，当对应的块下载完成后，就放进结果队列中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; index, hash := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; t.PieceHashes {
        length := t.&lt;span style=&#34;color:#008b45&#34;&gt;calculatePieceSize&lt;/span&gt;(index)        &lt;span style=&#34;color:#228b22&#34;&gt;// 计算每一个序号所对应的块的长度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        workQueue &amp;lt;- &amp;amp;pieceWork{index, hash, length} &lt;span style=&#34;color:#228b22&#34;&gt;// 把对应任务加入任务队列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// Start workers
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; _, peer := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; t.Peers {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; t.&lt;span style=&#34;color:#008b45&#34;&gt;startDownloadWorker&lt;/span&gt;(peer, workQueue, results)
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// Collect results into a buffer until full
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    buf := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;, t.Length)
    donePieces := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; donePieces &amp;lt; &lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(t.PieceHashes) { &lt;span style=&#34;color:#228b22&#34;&gt;// 遍历的次数等于下载的块的数量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        res := &amp;lt;-results                                   &lt;span style=&#34;color:#228b22&#34;&gt;// 接收下载的结果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        begin, end := t.&lt;span style=&#34;color:#008b45&#34;&gt;calculateBoundsForPiece&lt;/span&gt;(res.index) &lt;span style=&#34;color:#228b22&#34;&gt;// 计算下载的数据在文件中的位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;copy&lt;/span&gt;(buf[begin:end], res.buf)                      &lt;span style=&#34;color:#228b22&#34;&gt;// 把下载的数据 copy 到最终的文件中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        donePieces++

        percent := &lt;span style=&#34;color:#658b00&#34;&gt;float64&lt;/span&gt;(donePieces) / &lt;span style=&#34;color:#658b00&#34;&gt;float64&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(t.PieceHashes)) * &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;
        numWorkers := runtime.&lt;span style=&#34;color:#008b45&#34;&gt;NumGoroutine&lt;/span&gt;() - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// subtract 1 for main thread
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;(%0.2f%%) Downloaded piece #%d from %d peers\n&amp;#34;&lt;/span&gt;, percent, res.index, numWorkers)
    }
    &lt;span style=&#34;color:#658b00&#34;&gt;close&lt;/span&gt;(workQueue)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; buf, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;peer-与-peer-之间的通信&#34;&gt;Peer 与 Peer 之间的通信&lt;/h2&gt;
&lt;p&gt;上面只说了下载者需要向其他 peer 发起连接，没说具体原理，下面我们来探究一下 Peer 与 Peer 是如何建立连接的。&lt;/p&gt;
&lt;h3 id=&#34;握手&#34;&gt;握手&lt;/h3&gt;
&lt;p&gt;开始下载一个块的信息时，由客户端向另一个 peer（要连接几个 peer ，就需要握手多少次），发起 TCP 连接请求，请求内容由以下几个字段组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协议标识符的长度，始终为19 byte（十六进制为0x13)&lt;/li&gt;
&lt;li&gt;协议标识符，称为pstr，始终为BitTorrent protocol&lt;/li&gt;
&lt;li&gt;八个保留字节，都设置为0。我们会将其中一些翻转为1，以表示我们支持某些扩展，但是我们没有，所以我们将它们保持为0。&lt;/li&gt;
&lt;li&gt;我们之前计算出的信息哈希值，用于确定所需的文件（此处指的是整个文件的哈希值，不是某个块的哈希值）&lt;/li&gt;
&lt;li&gt;我们用来识别自己的Peer ID&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164319.svg&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// New creates a new handshake with the standard pstr
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;(infoHash, peerID [&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;) *Handshake {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;amp;Handshake{
        Pstr:     &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;BitTorrent protocol&amp;#34;&lt;/span&gt;,
        InfoHash: infoHash,
        PeerID:   peerID,
    }
}
&lt;span style=&#34;color:#228b22&#34;&gt;// Serialize serializes the handshake to a buffer
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (h *Handshake) &lt;span style=&#34;color:#008b45&#34;&gt;Serialize&lt;/span&gt;() []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt; {
    buf := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(h.Pstr)+&lt;span style=&#34;color:#b452cd&#34;&gt;49&lt;/span&gt;)
    buf[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#658b00&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(h.Pstr))
    curr := &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
    curr += &lt;span style=&#34;color:#658b00&#34;&gt;copy&lt;/span&gt;(buf[curr:], h.Pstr)
    curr += &lt;span style=&#34;color:#658b00&#34;&gt;copy&lt;/span&gt;(buf[curr:], &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#228b22&#34;&gt;// 8 reserved bytes
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    curr += &lt;span style=&#34;color:#658b00&#34;&gt;copy&lt;/span&gt;(buf[curr:], h.InfoHash[:])
    curr += &lt;span style=&#34;color:#658b00&#34;&gt;copy&lt;/span&gt;(buf[curr:], h.PeerID[:])
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; buf
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;向 Peers 发送一次握手后.我们应该以相同的格式收到一次握手。我们返回的信息哈希应该与发送的信息哈希匹配. 这样我们就知道我们在谈论同一文件，响应格式为，第一个字节代表了协议的长度，接下来这个长度的字节数是协议名称，接下来20个字节为响应的哈希值和 peerID&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164347.svg&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Handshake &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
    Pstr     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;
    InfoHash [&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    PeerID   [&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;发起请求的 Peer 接受到对端 Peer 的响应后，对比其中的 Info Hash 字段的值是不是相等，如果不相等就给上层抛出错误。&lt;/p&gt;
&lt;p&gt;此时 两个 Peer 的握手部分就完成了。&lt;/p&gt;
&lt;h3 id=&#34;数据传输&#34;&gt;数据传输&lt;/h3&gt;
&lt;p&gt;握手完成之后，此时需要进行数据传输，双方的沟通换了一种消息格式：&lt;/p&gt;
&lt;p&gt;一条消息以长度指示符开头，该指示符告诉我们该消息将有多少字节长，它是一个32位整数， 意味着它是由 4 个 byte 按序排列的字节组成。下一个字节，即ID，告诉我们正在接收的消息类型（Message Type）。最后，可选的有效 payload 将填充消息的剩余长度.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164423.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 沟通的消息类型的枚举值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; (
    MsgChoke         messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 阻塞消息接收者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgUnchoke       messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 解除阻塞消息接收者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgInterested    messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 表示有兴趣接收数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgNotInterested messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 没兴趣接收数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgHave          messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 提醒消息接收者，发送者已经下载了一个块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgBitfield      messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 对发送者已经下载的片段进行编码
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgRequest       messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 向消息接收者请求一个块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgPiece         messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 传送满足请求的数据块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MsgCancel        messageID = &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 取消一个请求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后双方会利用上述的这种消息格式进行沟通，用以完成数据传输。一个完整的数据传输过程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据提供者对下载者发送 Bitfield 消息，告诉自己有这个文件的哪些块（&lt;strong&gt;数据提供者并不一定有完整的文件&lt;/strong&gt;，所以需要告诉客户端，自己有这个文件的哪些块，这个信息通过 Bitfield 来传递，&lt;strong&gt;Bitfield  可以理解成一个二进制 bit 数组，数组值为1 ，就代表有这个块，0代表没有&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;下载者发送 Unchoke 消息，代表自己准备好了，可以进行消息传输了。（握手完成后的刚开始，我们被其他 Peer 认为状态是阻塞的（chocked）,我们需要发送一条解锁消息，让他们知道我们可以开始接收数据了）&lt;/li&gt;
&lt;li&gt;下载者发送 Interested 消息，代表自己要开始下载文件了&lt;/li&gt;
&lt;li&gt;下载者发送 Request 消息，其中 Payload 包含具体的某个块的信息，包括：块的序号(index)，开始位置(begin)和长度(length)。&lt;/li&gt;
&lt;li&gt;数据提供者向下载者发送 Piece 消息，其中 Payload 里面包含真正的块数据，以及块的序号，开始位置和长度，以便于下载者保存数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164449.svg&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;不断重复这个过程，直到所有的数据块都被下载完为止。&lt;/p&gt;
&lt;h3 id=&#34;校验哈希值&#34;&gt;校验哈希值&lt;/h3&gt;
&lt;p&gt;当下载者收到数据提供者发送过来的二进制数据后，会计算一下这个二进制数据的哈希值，然后和自己的 &lt;code&gt;torrent&lt;/code&gt; 文件中的对应块的哈希值进行比较，如果哈希值一样，就代表这块块有效，就保存下来，否则视为无效，会丢弃这个块重新下载。&lt;/p&gt;
&lt;h3 id=&#34;这种下载方式一定安全吗&#34;&gt;这种下载方式一定安全吗？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一种被称为虚假数据块攻击的 P2P污染方法。与传统的P2P污染攻击方法不同，该方法避开“元信息”的发布环节，直接对数据传输过程进行污染，通过浪费下载者的网络带宽来延长下载者的下载时间。攻击者伪装成一个普通节点加入被攻击的文件传播任务对应的BitTorrent网络，将其节点信息注册到tracker服务器上并声称自己拥有全部或大部分被共享文件的数据块。当下载者从tracker服务器中获得了攻击者的节点信息，便与攻击者建立连接并向其请求若干个需要的数据块，但攻击者向其返回无效的数据块。下载者在收到若干个数据块后，将这些数据块组装成一个数据片断并对该数据片断进行哈希校验以保证数据传输的正确性。只要组成数据片断的数据块中有一块是从攻击者处获得的无效数据块，哈希校验就无法通过，下载者会丢弃该数据片断并重新下载该片断对应的所有数据块。因此，攻击者只需要发送一个数据块就可以使下载者下载的整个数据片断作废，从而实现浪费下载者的网络带宽，延长其下载时间的目的。但近年来，越来越多的BitTorrent下载客户端引入了黑名单机制以防范虚假数据块攻击，使数据块攻击的攻击者在发送一定的虚假数据后便被加入黑名单，无法对文件传播进行控制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;见：https://patents.google.com/patent/CN101753572B/zh&lt;/p&gt;
&lt;h2 id=&#34;当-bt-下载遇到-nat&#34;&gt;当 BT 下载遇到 NAT&lt;/h2&gt;
&lt;p&gt;在实际中的网络，目前由于 IPV4 地址不够用，部分运营商一般给用户分配一个 NAT 网络，那么网络结构可能会变成这样。当P2P遇到NAT就比较头疼了，因为NAT进行了IP转换，你告诉邻居节点的IP:PORT是公网的，当他来连接时发现进不来，因为NAT没有做映射。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164618.svg&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;遗憾的是，如果是这种情况，确实会无法上传。我们都知道，一个公网 IP 无法主动向一个内网地址发起连接。那么有没有其他方式去解决这个情况呢。其实是有曲线救国的方法的。流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内网用户开始做Seed&lt;/li&gt;
&lt;li&gt;服务器收到请求，由于是第一个所以也没有Peer（对端，只一个TCP连接的一方）返回&lt;/li&gt;
&lt;li&gt;公网用户提交请求，由于Seed是内网用户所以也没有Peer返回，等待下载，但服务器会把它的IP放到列表中&lt;/li&gt;
&lt;li&gt;内网经过设定的时间间隔后，再向服务器放出请求，得到上面得公网IP&lt;/li&gt;
&lt;li&gt;得到公网IP后，内网马上进行连接&lt;/li&gt;
&lt;li&gt;公网用户建立连接，数据开始传输 （实际上现在是公网用户做服务器，内网用户做客户端）&lt;/li&gt;
&lt;li&gt;其它内网用户去上面公网用户下载数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过这个流程，内网用户主动向公网发起连接，把数据成功地传给公网用户。&lt;/p&gt;
&lt;p&gt;但是，这仍是一种曲线救国的方法，实际操作中，我们可以主动要求运营商给家庭宽带分配公网IP，打客服电话很快就可以办妥。但是家庭网络中一般用的都是路由器，那实际PC设备还是在内网，这一步有办法解决吗？实质上是有办法的，即开启路由器中的 Upnp 设置。&lt;/p&gt;
&lt;p&gt;UPNP的英文全称是 Universal Plug and Play ，即通用即插即用协议，简单来说它的作用是应用程序可以自动和路由器之间协商端口来进行端口映射。由于这一切都是自动的，用户感知不到这个过程，&lt;/p&gt;
&lt;h2 id=&#34;ptprivate-tracker&#34;&gt;PT（Private Tracker）&lt;/h2&gt;
&lt;p&gt;我之前一直不知道PT是啥意思，为了研究PT，我购买了一个 PT 站（http://pthome.net/）的会员资格。然后进网站下载了一个电影种子，下面以里面的一个电影种子为例，我们来研究一下 PT 种子的文件格式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;announce&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;https://www.pthome.net/announce.php?passkey=xxxxxxxxxxxx&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;created by&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Transmission/3.00 (bb6b5a062e)&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;creation date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2021-03-23 23:56:16&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;encoding&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;info_hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;62a3938e4ed8a917e1be86c2ed3047207a0c72eb&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;files&amp;#34;&lt;/span&gt;: [
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;23406804689&lt;/span&gt;,
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: [
                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;National.Treasure.Book.of.Secrets.2007.Bluray.1080p.AVC.Remux.TrueHD.5.1-PTH.mkv&amp;#34;&lt;/span&gt;
                ]
            }
        ],
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;National.Treasure.Book.of.Secrets.2007.Bluray.1080p.AVC.Remux.TrueHD.5.1-PTH&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;piece length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;2097152&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;pieces&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0b756bb6b4353484d58dee40616dc2c70c10fbeb&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;f7fa7f6a7eb82bfccf1650f426527c235dc3acbc&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cdd40e1eda7ec33d223785c256a55da7cf94acaa&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;62bc80029ae21704cb437cfbc58c1fb353324404&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;f456d5931ba116549d8c31c779e12f68a0ccc51c&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;8878830cd11be1f2b63eb78d661259be951be50e&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;077ad7881c4fb3628c1f11c7c5fa8b608ecb832a&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;6d14a2cdddda2f8289eb1d3bbf81b61bfa328763&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;60d0c976e0e80ddb04abd4d44982130e13e9a838&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;太长了省略，这里一共 11162 行&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;private&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;[pthome.net] PTHOME&amp;#34;&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看出来，相比于 BT，PT种子的 announce 字段中增加了一个叫做 &lt;code&gt;passkey&lt;/code&gt; 的东西。还增加了一个字段，&lt;code&gt;private&lt;/code&gt; 为 1。&lt;/p&gt;
&lt;p&gt;那 &lt;code&gt;passkey&lt;/code&gt; 这个字段有什么用呢，我们打开 PT 站，登陆自己的账号，会发现网站上面会显示一个值叫做「分享率」，分享率的计算是 【上传量➗下载量＝分享率】，那么网站是如何记录你的上传量和下载量呢，就是通过种子中的 passkey 字段来标识。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164732.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么，网站为什么要有「分享率」这个概念呢？&lt;/p&gt;
&lt;p&gt;我们可以回想一下一下 BT 的特点，在普通 BT 的世界里面，每个人都是靠自觉来分享种子&amp;amp;上传文件，但是人都是自私的，大部分的人属于那种下载了就跑的类型，还有些人会刻意的限制上传速度，这样的话，上传者们在默默付出得不到一点回报，长此以往，下载生态就无法构建起来，PT 就是为了解决大家都相当白嫖怪的心理，通过规则来构建良好的分享氛围。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;俗话说的好，技术不能解决的事情就要靠规则来限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PT站首先是一个私密的社区，通常是一个小圈子，里面有着大家共同默认的规则，即「想下载就必须先分享」，以 PTHome 社区为例，规定如果一个人的分享率小于 0.2 ，则无法继续下载，还可能会导致封号，一个人要想去下载资源，就必须先做种，分享自己的带宽，由网站来记录用户的上传流量，当分享率为正的时候才能去下载资源。&lt;/p&gt;
&lt;p&gt;这样就形成了一个良性循环，上传者为了下载会分享自己的带宽，而下载者也会因为上传者的上传，下载速度会大大提高。&lt;/p&gt;
&lt;p&gt;这才是 P2P 的精髓，「人人为我，我为人人」&lt;/p&gt;
&lt;p&gt;题外话：PT协议一定安全吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PT服务器与BT客户端之间的通信协议很简单。一开始BT客户端会向PT服务器发出请求，告知种子的状态（完成还是需要下载）。PT服务器返回一个间隔时间和peer列表。此后，BT客户端按照PT服务器给定的间隔时间定时向服务器报告上传了多少，下载了多少，还剩下多少（任务结束时也会报告同样的信息）。这个过程中的问题在于，上传量数据完全是由客户端提供的，而针对如此庞大的P2P网络，PT服务器完全无法验证上传量的真实性。所以，只要伪造了这个通信的过程，上传量就可以随意设定了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从理论上讲，这种伪装做种/欺骗上传量的方法是无法从根本上防范的，因为PT服务器没有掌握足够信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上，目前已经有了破解工具（http://demon.tw/software/ptliar.html，https://wenku.baidu.com/view/19bcafe06f1aff00bed51eec.html）在网上流传，所以根本上，PT还是需要靠人自觉。&lt;/p&gt;
&lt;h2 id=&#34;bt的延伸---dht网络&#34;&gt;BT的延伸 - DHT网络&lt;/h2&gt;
&lt;p&gt;根据上面的介绍，我们来思考一个问题，BT下载严重依赖于 Tracker 服务器，那是不是意味着 Tracker 崩了整个 BT 网络就崩了，当然 Tracker 可能不止有一个，多个 Tracker 服务器可以增加 P2P 网络的容错性，那有有没有一种比较优雅的解决方案，来更好的解决这个问题呢？&lt;/p&gt;
&lt;p&gt;为了摆脱对 Tracker 服务器的依赖，彻底去中心化，这时候，DHT 出现了，DHT全称分布式哈希表(Distributed Hash Table)，是一种分布式存储方法。在不需要服务器的情况下，每个节点负责一个小范围的路由，并负责存储一小部分数据，从而实现整个DHT网络的寻址和存储，相当于所有人一起构成了一个庞大的分布式存储数据库。&lt;/p&gt;
&lt;p&gt;在 DHT 网络中每个节点拥有两个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作为 BT 下载的节点，来进行上传和下载资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作为DHT网络中的一员，作为一个小型 Tracker ，保存一部分其他 Peer 的地址信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DHT 的本质是把所有人都变成一个小型 Tracker，每个人都拿着一份动态更新的地址和文件信息。当需要进行下载的时候，先根据自己本地存的路由表找其他节点，其他节点再去找他们保存的其他节点，直到找到拥有文件的人。一传十十传百、千、万，最后通过N个人的中转，找到应该连上的人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164810.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;磁力链接&#34;&gt;磁力链接&lt;/h3&gt;
&lt;p&gt;事实上，目前最流行的下载方式是磁力链接（Magnet URI scheme）就是基于 DHT 网络的，通常是一串这样的神秘代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411164831.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;urn&lt;/code&gt;为统一资源名称，&lt;code&gt;btih&lt;/code&gt; 是BitTorrent Info Hash的缩写，是 BitTorrent 使用的Hash函数。除了 &lt;code&gt;btih&lt;/code&gt; 还可以是其他类型的Hash函数，但不如 &lt;code&gt;btih&lt;/code&gt; 用的多。这一串长度为40的字符串正是文件内容的Hash，BT下载工具就根据这个Hash在DHT网络中定位下载文件。&lt;/p&gt;
&lt;p&gt;那仅凭一个哈希值，peer 之间是如何互相找到的？&lt;/p&gt;
&lt;p&gt;这个时候我们就需要了解一下DHT是具体怎么构建的。&lt;/p&gt;
&lt;h3 id=&#34;krpc-协议&#34;&gt;KRPC 协议&lt;/h3&gt;
&lt;p&gt;刚才我们说到 DHT 中文名叫「分布式哈希表」，那么看名字就知道，这是一个哈希表，只不过是分布式的而已，对于哈希表我们肯定都很熟悉了，这不就是 Key，Value吗？那在 BT 下载中的 key 和 value 是什么呢，毫无疑问，Key 就是上文中说到的磁力链接中最重要的部分 InfoHash，占 160bit，value 自然就是 peers 的 IP:port 的列表了。那既然是一个哈希表，就要支持 &lt;code&gt;Set(key,value)&lt;/code&gt; 和  &lt;code&gt;Get(key)&lt;/code&gt; 操作，那磁力链接下载的本质就是给你一个key，你去分布式哈希表中找到 value ，然后去下载。&lt;/p&gt;
&lt;p&gt;BitTorrent 官方采用的 DHT 协议名字叫做「Kademlia」协议，我们来简单了解一下它的思想：DHT 由很多节点组成，每个节点有自己的ID，每个节点保存一张表，表里边记录着自己的好友节点。当你向一个节点 A 查询另外一个节点 B 的信息的时候，A 就会查询自己的好友表，如果里边包含 B，那么 A 就返回 B 的信息，&lt;strong&gt;否则 A 就返回距离 B 距离最近的 k （一般k=8）个节点&lt;/strong&gt;。然后你再向这 k 个节点再次查询 B 的信息，这样循环一直到查询到 B 的信息，查询到B 的信息后你应该向之前所有查询过的节点发个通知，告诉他们，你有B的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那么在这个过程中，A 怎么知道 距离 B 最近的 K 个节点呢？难道是记录了地理位置？当然不是，此处说的距离与现实世界中的距离没有一点关系，此处的距离是一种逻辑上的距离，可以通过计算（XOR）来得到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于路由表和 Kademlia 的详细介绍，这里不再展开（挺复杂的），可以参照官方文档。&lt;/p&gt;
&lt;p&gt;我们这里的&lt;strong&gt;重点在于了解如何根据磁力链接获取拥有该磁力链接对应的种子文件信息的Peers&lt;/strong&gt;，所以只需要了解分布式哈希表的功能，以及如何使用这个哈希表，使用哈希表的办法是采用 &lt;code&gt;KRPC&lt;/code&gt;协议。 &lt;code&gt;KRPC&lt;/code&gt;协议是由 Bencode 组成的一个简单的RPC结构，有4种请求：&lt;code&gt;ping&lt;/code&gt;、&lt;code&gt;find_node&lt;/code&gt;、&lt;code&gt;get_peers&lt;/code&gt; 和 &lt;code&gt;announce_peer&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ping&lt;/code&gt;: 检测节点是否可达，请求包含一个参数&lt;code&gt;id&lt;/code&gt;，代表该节点的nodeID。对应的回复也应该包含回复者的nodeID。用来侦探另一个节点是否在线。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;find_node&lt;/code&gt;: 该请求包含两个参数&lt;code&gt;id&lt;/code&gt;和&lt;code&gt;target&lt;/code&gt;，&lt;code&gt;id&lt;/code&gt;为该节点的nodeID，&lt;code&gt;target&lt;/code&gt;为要查询的nodeID。回复中应该包含被请求节点的路由表中距离&lt;code&gt;target&lt;/code&gt;最接近的8个nodeID。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get_peers&lt;/code&gt;: 该请求包含两个参数&lt;code&gt;id&lt;/code&gt;和&lt;code&gt;infohash&lt;/code&gt;，id为该节点的nodeID，&lt;code&gt;infohash&lt;/code&gt;为种子文件的SHA1哈希值，也就是磁力链接的&lt;code&gt;btih&lt;/code&gt;值。如果被请求的节点有对应&lt;code&gt;info_hash&lt;/code&gt;的&lt;code&gt;peers&lt;/code&gt;，他将返回一个关键字values,这是一个列表类型的字符串。每一个字符串包含了&lt;code&gt;CompactIP-address/portinfo&lt;/code&gt;格式的&lt;code&gt;peers&lt;/code&gt;信息。如果被请求的节点没有这个&lt;code&gt;infohash&lt;/code&gt;的&lt;code&gt;peers&lt;/code&gt;，那么他将返回关键字&lt;code&gt;nodes&lt;/code&gt;，这个关键字包含了被请求节点的路由表中离info_hash最近的K个nodes，使用Compactnodeinfo格式回复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;announce_peer&lt;/code&gt;: 用来告诉别人自己可提供某一个资源的下载，让别人把这个消息保存起来。这样就可以分享给其他人，让其他人连接你进行下载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体看 DHT 这个哈希表，find_node 和 get_peers 就是我们之前说的 &lt;code&gt;Get(key)&lt;/code&gt;，announce_peer就是 &lt;code&gt;Set(key,value)&lt;/code&gt;。那这样我们就可以只拥有一个哈希值，就可以在 DHT 网络中找到要下载的信息了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;现在网上有很多在线工具，支持把种子文件和磁力链接互转，实际上原理很简单，把种子文件转换成磁力链就是提取文件的 hash 信息，然后用拼接了一下。把磁力链转换成种子文件就是先去 DHT 网络中查数据的元信息，查到之后按照 Bencode 编码格式进行编码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;新节点如何加入dht网络冷启动&#34;&gt;新节点如何加入DHT网络（冷启动）&lt;/h3&gt;
&lt;p&gt;当一个新节点首次试图加入DHT 网络时，它必须做三件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果一个新节点要加入到DHT网络中，它必须要先认识一个人带你进去。这样的人我们把他叫做bootstrap node，常见的bootstrap node有：router.bittorrent.com、router.utorrent.com、router.bitcomet.com、dht.transmissionbt.com 等等，我们可以称之为节点A ，并将其加入自己的路由表&lt;/li&gt;
&lt;li&gt;向该节点发起一次针对自己ID的节点查询请求，从而通过节点A获取一系列与自己距离邻近的其他节点的信息&lt;/li&gt;
&lt;li&gt;刷新所有的路由表，保证自己所获得的节点信息全部都是新鲜的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;磁力搜索引擎的原理&#34;&gt;磁力搜索引擎的原理&lt;/h3&gt;
&lt;p&gt;现在网上有很多磁力搜索引擎，大家可能会好奇他们网站的资源是从哪里来的，一个资源不可能凭空产生，那有一个很明显的结论：&lt;strong&gt;如果有人想下载一个种子，那么必然有人制作了这个种子&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因此，只需要写一个爬虫程序，把它伪装成 DHT 网络中的一个节点，这样当其他客户端想下载某个 torrent 时，就会在 DHT 网络发起广播，当它询问到我的节点时，我就知道了：哦，原来有人要下载这个种子啊，那么在 DHT 网络中肯定有这个种子。于是我把这个种子的信息保存到 MySQL/ES 中。 通过检测别人对我的询问情况，我还可以知道某个种子的热度。这种爬虫也称为 DHT 网络嗅探器。&lt;/p&gt;
&lt;p&gt;这样，知道了种子的地址，名称等信息，只需要做一个网站，就可以利用手中的数据做一个磁力链接搜索了。&lt;/p&gt;
&lt;h2 id=&#34;相关软件推荐&#34;&gt;相关软件推荐&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://trackerslist.com/#/zh&#34;&gt;https://trackerslist.com/#/zh&lt;/a&gt; 这是网友维护的一个开源项目，每天会维护全网热门的 Tracker列表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411165402.png&#34; alt=&#34;16&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://motrix.app/zh-CN/&#34;&gt;https://motrix.app/zh-CN/&lt;/a&gt; 一个开源的支持下载 HTTP、FTP、BT、磁力链接等资源的工具。没有广告，跨平台，使用 electron 编写，支持 Windows/Linux/macOS，Github链接：&lt;a href=&#34;https://github.com/agalwood/Motrix&#34;&gt;Motrix&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://image-1252109614.cos.ap-beijing.myqcloud.com/img/20210411165407.png&#34; alt=&#34;17&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;思考&#34;&gt;思考&lt;/h1&gt;
&lt;h2 id=&#34;国内-bt-生态的现状&#34;&gt;国内 BT 生态的现状&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IPV4地址缺少&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事实上，国内目前的 BT 生态很恶劣，首先现状是我们的互联网还是大量使用的 IPv4 ，这就导致了 IP 地址很稀缺，根据维基百科 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%90%84%E5%9C%8BIPv4%E4%BD%8D%E5%9D%80%E5%88%86%E9%85%8D%E5%88%97%E8%A1%A8&#34;&gt;各国IPv4地址分配列表&lt;/a&gt; 可以看出，美国 3 亿多的人口，拿走了 15 亿的 IPV4 地址，而中国 13 亿的人口，却只有 3 亿多的 IPV4 地址，这就势必造成了国内运营商分配到每户的 IP 地址是经过层层 NAT 的，有公网 IP 的网民并不多。&lt;/p&gt;
&lt;p&gt;不过好在大部分网民没有公网IP需求，基本上只要有需要可以和运营商客服协商，给自己的网络分配一个 IPV4 地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;希望尽快普及 IPV6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;潜移默化的习惯&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大多数网民下载资源仅仅是想快速的进行下载，并没有上传意识，有相当一部分人甚至不知道BT下载还需要上传，知道会上传的网民很多会认为这会占用自己的上行带宽，主动限制网速。由于习惯带来的问题是很难改变的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时代的变迁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国家的各种政策，以及中国网民付费意识越来越强，越来越容易接受正版化，可以很方便的从各大视频网站中满足自己的需求。网民们大部分使用的并不是 PC ，而是手机，消费内容的方式更多的也变成了手机 APP，而手机本身，就不是很适合来运行这种 BT 软件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;迅雷&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;迅雷的工作原理是，先看自己服务器有没有相关资源，如果有的话会主动进行限速，引导用户开通会员去进行下载。对于服务器中没有缓存的资源，进行 BT 下载，迅雷可以获取其他 BT 软件的用户，但其他 BT 软件无法获取迅雷的用户，用户数量上存在差距，也就导致了迅雷的下载速度越来越快，迫使其他用户转而使用迅雷，使得国内很多资源只有 迅雷 才有下载速度，而其他 BT 软件速度越来越不如迅雷，劣币驱逐良币，最终形成恶性循环。导致整体性的国内 BT 速度下降。&lt;/p&gt;
&lt;p&gt;迅雷的种子只会给使用迅雷的人进行上传，这和 P2P 的理念是相悖的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网盘时代&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自从进入了网盘时代，很多分享的链接都是百度网盘的链接，这确实可以避免死种这种没速度的问题，但是却让使用 BT 的人越来越少，造成整体下载速度下降。&lt;/p&gt;
&lt;h2 id=&#34;bt-的未来&#34;&gt;BT 的未来&lt;/h2&gt;
&lt;p&gt;目前 BT 的使用更多的是在一种灰色地带，大多数的影像/音乐等资源都是存在版权风险，而人们正版化意识越来越强，现在获取电影等资源已经很好的得到了满足，比如长视频爱优腾，视频网站都有大厂支持，看电影有大量的 CDN 可以进行资源分发，不用担心传输速度慢的问题。&lt;/p&gt;
&lt;p&gt;BT/PT 用户应该还是持续的在小圈子里面存在下去，有很多发烧友喜欢电影的原盘，动则几十上百G，这种需求是爱优腾无法支持的，&lt;/p&gt;
&lt;p&gt;像BitTorrent这样的P2P技术是对下载方式的一次革命，个人用户分享一个资源从未变得如此方便，这些天才们的设计，让我们拥有了一个无法被审查和追踪的去中心化网络。这催生了庞大的盗版产业，但也让很多内容有机会避开审查。&lt;/p&gt;
&lt;p&gt;因为网站可以被隔离、被拔线、被禁止访问，但种子不会。只要种子不死，那些不存在的音乐图书和视频就还活在互联网上，没有任何人可以毁掉。&lt;/p&gt;
&lt;p&gt;我个人认为，BT 在以后相当长的一段时间内不会消失，但是使用量也不会增多，会逐渐变成小圈子的分享。&lt;/p&gt;
&lt;p&gt;不可否认的是，P2P技术改变了互联网对资源分享的方式。&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/BitTorrent_(%E5%8D%8F%E8%AE%AE)&#34;&gt;https://zh.wikipedia.org/wiki/BitTorrent_(%E5%8D%8F%E8%AE%AE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%AD%89%E7%B6%B2%E8%B7%AF&#34;&gt;https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%AD%89%E7%B6%B2%E8%B7%AF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bittorrent.org/beps/bep_0003.html&#34;&gt;https://www.bittorrent.org/beps/bep_0003.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client&#34;&gt;https://github.com/veggiedefender/torrent-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/40407669&#34;&gt;P2P 网络核心技术：UPnP 和 SSDP 协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%90%84%E5%9C%8BIPv4%E4%BD%8D%E5%9D%80%E5%88%86%E9%85%8D%E5%88%97%E8%A1%A8&#34;&gt;各国IPv4地址分配列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/290920622&#34;&gt;为什么国内的bt环境那么恶劣，没人做种? - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2009/11/future_of_bittorrent.html&#34;&gt;BT下载的未来 - 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://paaatrick.com/2019-07-07-network-protocol-p2p/&#34;&gt;https://paaatrick.com/2019-07-07-network-protocol-p2p/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shiyanhui/dht/wiki/%E3%80%90%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%95%99%E4%BD%A0%E5%86%99BT%E7%A7%8D%E5%AD%90%E5%97%85%E6%8E%A2%E5%99%A8%E3%80%91DHT%E7%AF%87&#34;&gt;https://github.com/shiyanhui/dht/wiki/%E3%80%90%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%95%99%E4%BD%A0%E5%86%99BT%E7%A7%8D%E5%AD%90%E5%97%85%E6%8E%A2%E5%99%A8%E3%80%91DHT%E7%AF%87&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/BrightStarry/zx-bt&#34;&gt;https://github.com/BrightStarry/zx-bt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aneasystone.com/archives/2015/05/analyze-magnet-protocol-using-wireshark.html&#34;&gt;https://www.aneasystone.com/archives/2015/05/analyze-magnet-protocol-using-wireshark.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://blog.riba2534.cn/blog/2021/bittorrent%E7%AE%80%E4%BB%8B/ - </description>
        </item>
    
    
  </channel>
</rss> 