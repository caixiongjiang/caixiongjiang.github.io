<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/</link>
    <description>Recent content on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Sep 2021 09:40:54 +0800</lastBuildDate>
    
        <atom:link href="https://blog.riba2534.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Golang的反射reflect深入理解和示例</title>
        <link>https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/</link>
        <pubDate>Thu, 29 Aug 2019 22:16:02 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/ -&lt;h1 id=&#34;golang的反射reflect深入理解和示例&#34;&gt;Golang的反射reflect深入理解和示例&lt;/h1&gt;
&lt;h2 id=&#34;编程语言中反射的概念&#34;&gt;编程语言中反射的概念&lt;/h2&gt;
&lt;p&gt;在计算机科学领域，反射是指一类应用，它们能够自描述和自控制。也就是说，这类应用通过采用某种机制来实现对自己行为的描述（self-representation）和监测（examination），并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。&lt;/p&gt;
&lt;p&gt;每种语言的反射模型都不同，并且有些语言根本不支持反射。Golang语言实现了反射，反射机制就是在运行时动态的调用对象的方法和属性，官方自带的reflect包就是反射相关的，只要包含这个包就可以使用。&lt;/p&gt;
&lt;p&gt;多插一句，Golang的gRPC也是通过反射实现的。&lt;/p&gt;
&lt;h2 id=&#34;interface-和-反射&#34;&gt;interface 和 反射&lt;/h2&gt;
&lt;p&gt;在讲反射之前，先来看看Golang关于类型设计的一些原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量包括（type, value）两部分
&lt;ul&gt;
&lt;li&gt;理解这一点就知道为什么nil != nil了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型&lt;/li&gt;
&lt;li&gt;类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来要讲的反射，就是建立在类型之上的，Golang的指定类型的变量的类型是静态的（也就是指定int、string这些的变量，它的type是static type），在创建变量的时候就已经确定，反射主要与Golang的interface类型相关（它的type是concrete type），只有interface类型才有反射一说。&lt;/p&gt;
&lt;p&gt;在Golang的实现中，每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;(value, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;value是实际变量值，type是实际变量的类型。一个interface{}类型的变量包含了2个指针，一个指针指向值的类型【对应concrete type】，另外一个指针指向实际的值【对应value】。&lt;/p&gt;
&lt;p&gt;例如，创建类型为*os.File的变量，然后将其赋给一个接口变量r：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;tty, err := os.&lt;span style=&#34;color:#008b45&#34;&gt;OpenFile&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/dev/tty&amp;#34;&lt;/span&gt;, os.O_RDWR, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; r io.Reader
r = tty
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接口变量r的pair中将记录如下信息：(tty, *os.File)，这个pair在接口变量的连续赋值过程中是不变的，将接口变量r赋给另一个接口变量w:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; w io.Writer
w = r.(io.Writer)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接口变量w的pair与r的pair相同，都是:(tty, *os.File)，即使w是空接口类型，pair也是不变的。&lt;/p&gt;
&lt;p&gt;interface及其pair的存在，是Golang中实现反射的前提，理解了pair，就更容易理解反射。反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。&lt;/p&gt;
&lt;h2 id=&#34;golang的反射reflect&#34;&gt;Golang的反射reflect&lt;/h2&gt;
&lt;h3 id=&#34;reflect的基本功能typeof和valueof&#34;&gt;reflect的基本功能TypeOf和ValueOf&lt;/h3&gt;
&lt;p&gt;既然反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。那么在Golang的reflect反射包中有什么样的方式可以让我们直接获取到变量内部的信息呢？ 它提供了两种类型（或者说两个方法）让我们可以很容易的访问接口变量内容，分别是reflect.ValueOf() 和 reflect.TypeOf()，看看官方的解释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// ValueOf returns a new Value initialized to the concrete value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// stored in the interface i.  ValueOf(nil) returns the zero 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Value {...}

翻译一下&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;ValueOf用来获取输入参数接口中的数据的值&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;如果接口为空则返回0


&lt;span style=&#34;color:#228b22&#34;&gt;// TypeOf returns the reflection Type that represents the dynamic type of i.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// If i is a nil interface value, TypeOf returns nil.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;TypeOf&lt;/span&gt;(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) Type {...}

翻译一下&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;TypeOf用来动态获取输入参数接口中的值的类型&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;如果接口为空则返回nil

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;reflect.TypeOf()是获取pair中的type，reflect.ValueOf()获取pair中的value，示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;float64&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1.2345&lt;/span&gt;

	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;type: &amp;#34;&lt;/span&gt;, reflect.&lt;span style=&#34;color:#008b45&#34;&gt;TypeOf&lt;/span&gt;(num))
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;value: &amp;#34;&lt;/span&gt;, reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(num))
}

运行结果:
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt;:  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;float64&lt;/span&gt;
value:  &lt;span style=&#34;color:#b452cd&#34;&gt;1.2345&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;说明&#34;&gt;说明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;reflect.TypeOf： 直接给到了我们想要的type类型，如float64、int、各种pointer、struct 等等真实的类型&lt;/li&gt;
&lt;li&gt;reflect.ValueOf：直接给到了我们想要的具体的值，如1.2345这个具体数值，或者类似&amp;amp;{1 &amp;ldquo;Allen.Wu&amp;rdquo; 25} 这样的结构体struct的值&lt;/li&gt;
&lt;li&gt;也就是说明反射可以将“接口类型变量”转换为“反射类型对象”，反射类型指的是reflect.Type和reflect.Value这两种&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;从relfectvalue中获取接口interface的信息&#34;&gt;从relfect.Value中获取接口interface的信息&lt;/h3&gt;
&lt;p&gt;当执行reflect.ValueOf(interface)之后，就得到了一个类型为”relfect.Value”变量，可以通过它本身的Interface()方法获得接口变量的真实内容，然后可以通过类型判断进行转换，转换为原有真实类型。不过，我们可能是已知原有类型，也有可能是未知原有类型，因此，下面分两种情况进行说明。&lt;/p&gt;
&lt;h4 id=&#34;已知原有类型进行强制转换&#34;&gt;已知原有类型【进行“强制转换”】&lt;/h4&gt;
&lt;p&gt;已知类型后转换为其对应的类型的做法如下，直接通过Interface方法然后强制转换，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;realValue := value.&lt;span style=&#34;color:#008b45&#34;&gt;Interface&lt;/span&gt;().(已知的类型)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;float64&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1.2345&lt;/span&gt;

	pointer := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(&amp;amp;num)
	value := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(num)

	&lt;span style=&#34;color:#228b22&#34;&gt;// 可以理解为“强制转换”，但是需要注意的时候，转换的时候，如果转换的类型不完全符合，则直接panic
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// Golang 对类型要求非常严格，类型一定要完全符合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 如下两个，一个是*float64，一个是float64，如果弄混，则会panic
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	convertPointer := pointer.&lt;span style=&#34;color:#008b45&#34;&gt;Interface&lt;/span&gt;().(*&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;float64&lt;/span&gt;)
	convertValue := value.&lt;span style=&#34;color:#008b45&#34;&gt;Interface&lt;/span&gt;().(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;float64&lt;/span&gt;)

	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(convertPointer)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(convertValue)
}

运行结果&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;
&lt;span style=&#34;color:#b452cd&#34;&gt;0xc42000e238&lt;/span&gt;
&lt;span style=&#34;color:#b452cd&#34;&gt;1.2345&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;说明-1&#34;&gt;说明&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;转换的时候，如果转换的类型不完全符合，则直接panic，类型要求非常严格！&lt;/li&gt;
&lt;li&gt;转换的时候，要区分是指针还是指&lt;/li&gt;
&lt;li&gt;也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;未知原有类型遍历探测其filed&#34;&gt;未知原有类型【遍历探测其Filed】&lt;/h4&gt;
&lt;p&gt;很多情况下，我们可能并不知道其具体类型，那么这个时候，该如何做呢？需要我们进行遍历探测其Filed来得知，示例如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	Id   &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
	Name &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;
	Age  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (u User) &lt;span style=&#34;color:#008b45&#34;&gt;ReflectCallFunc&lt;/span&gt;() {
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Allen.Wu ReflectCallFunc&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {

	user := User{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Allen.Wu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;}

	&lt;span style=&#34;color:#008b45&#34;&gt;DoFiledAndMethod&lt;/span&gt;(user)

}

&lt;span style=&#34;color:#228b22&#34;&gt;// 通过接口来获取任意参数，然后一一揭晓
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;DoFiledAndMethod&lt;/span&gt;(input &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt;{}) {

	getType := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;TypeOf&lt;/span&gt;(input)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;get Type is :&amp;#34;&lt;/span&gt;, getType.&lt;span style=&#34;color:#008b45&#34;&gt;Name&lt;/span&gt;())

	getValue := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(input)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;get all Fields is:&amp;#34;&lt;/span&gt;, getValue)

	&lt;span style=&#34;color:#228b22&#34;&gt;// 获取方法字段
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 1. 先获取interface的reflect.Type，然后通过NumField进行遍历
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 2. 再通过reflect.Type的Field获取其Field
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 3. 最后通过Field的Interface()得到对应的value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; getType.&lt;span style=&#34;color:#008b45&#34;&gt;NumField&lt;/span&gt;(); i++ {
		field := getType.&lt;span style=&#34;color:#008b45&#34;&gt;Field&lt;/span&gt;(i)
		value := getValue.&lt;span style=&#34;color:#008b45&#34;&gt;Field&lt;/span&gt;(i).&lt;span style=&#34;color:#008b45&#34;&gt;Interface&lt;/span&gt;()
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s: %v = %v\n&amp;#34;&lt;/span&gt;, field.Name, field.Type, value)
	}

	&lt;span style=&#34;color:#228b22&#34;&gt;// 获取方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 1. 先获取interface的reflect.Type，然后通过.NumMethod进行遍历
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; getType.&lt;span style=&#34;color:#008b45&#34;&gt;NumMethod&lt;/span&gt;(); i++ {
		m := getType.&lt;span style=&#34;color:#008b45&#34;&gt;Method&lt;/span&gt;(i)
		fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s: %v\n&amp;#34;&lt;/span&gt;, m.Name, m.Type)
	}
}

运行结果&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;
get Type is : User
get all Fields is: {&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; Allen.Wu &lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;}
Id: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
Name: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; = Allen.Wu
Age: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;
ReflectCallFunc: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(main.User)

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;说明-2&#34;&gt;说明&lt;/h5&gt;
&lt;p&gt;通过运行结果可以得知获取未知类型的interface的具体变量及其类型的步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先获取interface的reflect.Type，然后通过NumField进行遍历&lt;/li&gt;
&lt;li&gt;再通过reflect.Type的Field获取其Field&lt;/li&gt;
&lt;li&gt;最后通过Field的Interface()得到对应的value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过运行结果可以得知获取未知类型的interface的所属方法（函数）的步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先获取interface的reflect.Type，然后通过NumMethod进行遍历&lt;/li&gt;
&lt;li&gt;再分别通过reflect.Type的Method获取对应的真实的方法（函数）&lt;/li&gt;
&lt;li&gt;最后对结果取其Name和Type得知具体的方法名&lt;/li&gt;
&lt;li&gt;也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”&lt;/li&gt;
&lt;li&gt;struct 或者 struct 的嵌套都是一样的判断处理方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;通过reflectvalue设置实际变量的值&#34;&gt;通过reflect.Value设置实际变量的值&lt;/h3&gt;
&lt;p&gt;reflect.Value是通过reflect.ValueOf(X)获得的，只有当X是指针的时候，才可以通过reflec.Value修改实际变量X的值，即：要修改反射类型的对象就一定要保证其值是“addressable”的。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;float64&lt;/span&gt; = &lt;span style=&#34;color:#b452cd&#34;&gt;1.2345&lt;/span&gt;
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;old value of pointer:&amp;#34;&lt;/span&gt;, num)

	&lt;span style=&#34;color:#228b22&#34;&gt;// 通过reflect.ValueOf获取num中的reflect.Value，注意，参数必须是指针才能修改其值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	pointer := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(&amp;amp;num)
	newValue := pointer.&lt;span style=&#34;color:#008b45&#34;&gt;Elem&lt;/span&gt;()

	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;type of pointer:&amp;#34;&lt;/span&gt;, newValue.&lt;span style=&#34;color:#008b45&#34;&gt;Type&lt;/span&gt;())
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;settability of pointer:&amp;#34;&lt;/span&gt;, newValue.&lt;span style=&#34;color:#008b45&#34;&gt;CanSet&lt;/span&gt;())

	&lt;span style=&#34;color:#228b22&#34;&gt;// 重新赋值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	newValue.&lt;span style=&#34;color:#008b45&#34;&gt;SetFloat&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;77&lt;/span&gt;)
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;new value of pointer:&amp;#34;&lt;/span&gt;, num)

	&lt;span style=&#34;color:#228b22&#34;&gt;////////////////////
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 如果reflect.ValueOf的参数不是指针，会如何？
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	pointer = reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(num)
	&lt;span style=&#34;color:#228b22&#34;&gt;//newValue = pointer.Elem() // 如果非指针，这里直接panic，“panic: reflect: call of reflect.Value.Elem on float64 Value”
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}

运行结果&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;
old value of pointer: &lt;span style=&#34;color:#b452cd&#34;&gt;1.2345&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; of pointer: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;float64&lt;/span&gt;
settability of pointer: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
new value of pointer: &lt;span style=&#34;color:#b452cd&#34;&gt;77&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;说明-3&#34;&gt;说明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;需要传入的参数是* float64这个指针，然后可以通过pointer.Elem()去获取所指向的Value，&lt;strong&gt;注意一定要是指针&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果传入的参数不是指针，而是变量，那么
&lt;ul&gt;
&lt;li&gt;通过Elem获取原始值对应的对象则直接panic&lt;/li&gt;
&lt;li&gt;通过CanSet方法查询是否可以设置返回false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;newValue.CantSet()表示是否可以重新设置其值，如果输出的是true则可修改，否则不能修改，修改完之后再进行打印发现真的已经修改了。&lt;/li&gt;
&lt;li&gt;reflect.Value.Elem() 表示获取原始值对应的反射对象，只有原始对象才能修改，当前反射对象是不能修改的&lt;/li&gt;
&lt;li&gt;也就是说如果要修改反射类型对象，其值必须是“addressable”【对应的要传入的是指针，同时要通过Elem方法获取原始值对应的反射对象】&lt;/li&gt;
&lt;li&gt;struct 或者 struct 的嵌套都是一样的判断处理方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;通过reflectvalueof来进行方法的调用&#34;&gt;通过reflect.ValueOf来进行方法的调用&lt;/h3&gt;
&lt;p&gt;这算是一个高级用法了，前面我们只说到对类型、变量的几种反射的用法，包括如何获取其值、其类型、如果重新设置新值。但是在工程应用中，另外一个常用并且属于高级的用法，就是通过reflect来进行方法【函数】的调用。比如我们要做框架工程的时候，需要可以随意扩展方法，或者说用户可以自定义方法，那么我们通过什么手段来扩展让用户能够自定义呢？关键点在于用户的自定义方法是未可知的，因此我们可以通过reflect来搞定&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	Id   &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
	Name &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;
	Age  &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (u User) &lt;span style=&#34;color:#008b45&#34;&gt;ReflectCallFuncHasArgs&lt;/span&gt;(name &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;, age &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ReflectCallFuncHasArgs name: &amp;#34;&lt;/span&gt;, name, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;, age:&amp;#34;&lt;/span&gt;, age, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;and origal User.Name:&amp;#34;&lt;/span&gt;, u.Name)
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (u User) &lt;span style=&#34;color:#008b45&#34;&gt;ReflectCallFuncNoArgs&lt;/span&gt;() {
	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ReflectCallFuncNoArgs&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 如何通过反射来进行方法的调用？
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调动mv.Call
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	user := User{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Allen.Wu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;}
	
	&lt;span style=&#34;color:#228b22&#34;&gt;// 1. 要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	getValue := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(user)

	&lt;span style=&#34;color:#228b22&#34;&gt;// 一定要指定参数为正确的方法名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 2. 先看看带有参数的调用方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	methodValue := getValue.&lt;span style=&#34;color:#008b45&#34;&gt;MethodByName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ReflectCallFuncHasArgs&amp;#34;&lt;/span&gt;)
	args := []reflect.Value{reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wudebao&amp;#34;&lt;/span&gt;), reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;)}
	methodValue.&lt;span style=&#34;color:#008b45&#34;&gt;Call&lt;/span&gt;(args)

	&lt;span style=&#34;color:#228b22&#34;&gt;// 一定要指定参数为正确的方法名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 3. 再看看无参数的调用方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	methodValue = getValue.&lt;span style=&#34;color:#008b45&#34;&gt;MethodByName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ReflectCallFuncNoArgs&amp;#34;&lt;/span&gt;)
	args = &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;([]reflect.Value, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
	methodValue.&lt;span style=&#34;color:#008b45&#34;&gt;Call&lt;/span&gt;(args)
}


运行结果&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;
ReflectCallFuncHasArgs name:  wudebao , age: &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; and origal User.Name: Allen.Wu
ReflectCallFuncNoArgs

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;说明-4&#34;&gt;说明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理&lt;/li&gt;
&lt;li&gt;reflect.Value.MethodByName这.MethodByName，需要指定准确真实的方法名字，如果错误将直接panic，MethodByName返回一个函数值对应的reflect.Value方法的名字。&lt;/li&gt;
&lt;li&gt;[]reflect.Value，这个是最终需要调用的方法的参数，可以没有或者一个或者多个，根据实际参数来定。&lt;/li&gt;
&lt;li&gt;reflect.Value的 Call 这个方法，这个方法将最终调用真实的方法，参数务必保持一致，如果reflect.Value&amp;rsquo;Kind不是一个方法，那么将直接panic。&lt;/li&gt;
&lt;li&gt;本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调用methodValue.Call&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;golang的反射reflect性能&#34;&gt;Golang的反射reflect性能&lt;/h2&gt;
&lt;p&gt;Golang的反射很慢，这个和它的API设计有关。在 java 里面，我们一般使用反射都是这样来弄的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Field field = clazz.&lt;span style=&#34;color:#008b45&#34;&gt;getField&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
field.&lt;span style=&#34;color:#008b45&#34;&gt;get&lt;/span&gt;(obj1);
field.&lt;span style=&#34;color:#008b45&#34;&gt;get&lt;/span&gt;(obj2);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个取得的反射对象类型是 java.lang.reflect.Field。它是可以复用的。只要传入不同的obj，就可以取得这个obj上对应的 field。&lt;/p&gt;
&lt;p&gt;但是Golang的反射不是这样设计的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;type_ := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;TypeOf&lt;/span&gt;(obj)
field, _ := type_.&lt;span style=&#34;color:#008b45&#34;&gt;FieldByName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里取出来的 field 对象是 reflect.StructField 类型，但是它没有办法用来取得对应对象上的值。如果要取值，得用另外一套对object，而不是type的反射&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;type_ := reflect.&lt;span style=&#34;color:#008b45&#34;&gt;ValueOf&lt;/span&gt;(obj)
fieldValue := type_.&lt;span style=&#34;color:#008b45&#34;&gt;FieldByName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里取出来的 fieldValue 类型是 reflect.Value，它是一个具体的值，而不是一个可复用的反射对象了，每次反射都需要malloc这个reflect.Value结构体，并且还涉及到GC。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;Golang reflect慢主要有两个原因&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;涉及到内存分配以及后续的GC；&lt;/li&gt;
&lt;li&gt;reflect实现里面有大量的枚举，也就是for循环，比如类型之类的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;上述详细说明了Golang的反射reflect的各种功能和用法，都附带有相应的示例，相信能够在工程应用中进行相应实践，总结一下就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反射可以大大提高程序的灵活性，使得interface{}有更大的发挥余地
&lt;ul&gt;
&lt;li&gt;反射必须结合interface才玩得转&lt;/li&gt;
&lt;li&gt;变量的type要是concrete type的（也就是interface变量）才有反射一说&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反射可以将“接口类型变量”转换为“反射类型对象”
&lt;ul&gt;
&lt;li&gt;反射使用 TypeOf 和 ValueOf 函数从接口中获取目标对象信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反射可以将“反射类型对象”转换为“接口类型变量
&lt;ul&gt;
&lt;li&gt;reflect.value.Interface().(已知的类型)&lt;/li&gt;
&lt;li&gt;遍历reflect.Type的Field获取其Field&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反射可以修改反射类型对象，但是其值必须是“addressable”
&lt;ul&gt;
&lt;li&gt;想要利用反射修改对象状态，前提是 interface.data 是 settable,即 pointer-interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过反射可以“动态”调用方法&lt;/li&gt;
&lt;li&gt;因为Golang本身不支持模板，因此在以往需要使用模板的场景下往往就需要使用反射(reflect)来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://link.juejin.im/?target=https%3A%2F%2Fblog.golang.org%2Flaws-of-reflection&#34;&gt;The Go Blog&lt;/a&gt; : 其实看官方说明就足以了！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://link.juejin.im/?target=https%3A%2F%2Fgolang.org%2Fpkg%2Freflect%2F%23Kind&#34;&gt;官方reflect-Kind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://link.juejin.im/?target=http%3A%2F%2Fwww.jb51.net%2Farticle%2F90021.htm&#34;&gt;Go语言的反射三定律&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011451232&#34;&gt;Go基础学习五之接口interface、反射reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F25474088&#34;&gt;提高 golang 的反射性能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://juejin.im/post/5a75a4fb5188257a82110544&#34;&gt;Golang的反射reflect深入理解和示例&lt;/a&gt;&lt;/p&gt;
- https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/ - </description>
        </item>
    
    
    
        <item>
        <title>正则表达式30分钟入门</title>
        <link>https://blog.riba2534.cn/blog/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/</link>
        <pubDate>Wed, 17 Jul 2019 10:38:01 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/ -&lt;p&gt;转载自：https://deerchao.net/tutorials/regex/regex.htm&lt;/p&gt;
&lt;h1 id=&#34;如何使用本教程&#34;&gt;如何使用本教程&lt;/h1&gt;
&lt;p&gt;别被下面那些复杂的表达式吓倒，只要跟着我一步一步来，你会发现正则表达式其实并没有想像中的那么困难。当然，如果你看完了这篇教程之后，发现自己明白了很多，却又几乎什么都记不得，那也是很正常的——我认为，没接触过正则表达式的人在看完这篇教程后，能把提到过的语法记住80%以上的可能性为零。这里只是让你明白基本的原理，以后你还需要多练习，多使用，才能熟练掌握正则表达式。&lt;/p&gt;
&lt;p&gt;除了作为入门教程之外，本文还试图成为可以在日常工作中使用的正则表达式语法参考手册。就作者本人的经历来说，这个目标还是完成得不错的——你看，我自己也没能把所有的东西记下来，不是吗？&lt;/p&gt;
&lt;p&gt;本文将会对特别的字符做一些 &lt;em&gt;斜体&lt;/em&gt;，&lt;strong&gt;加粗&lt;/strong&gt; 处理，希望读者在阅读的时候可以多体会和留心这些细节，从而有更深刻的了解。# 正则表达式到底是什么东西？&lt;/p&gt;
&lt;p&gt;在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。&lt;/p&gt;
&lt;p&gt;很可能你使用过Windows/Dos下用于文件查找的通配符(wildcard)，也就是 &amp;lsquo;*&amp;rsquo; 和 &amp;lsquo;?&#39;。&lt;/p&gt;
&lt;p&gt;如果你想查找某个目录下的所有的Word文档的话，你会搜索 &lt;strong&gt;*.doc&lt;/strong&gt;。在这里，&amp;quot; &lt;strong&gt;*&lt;/strong&gt; &amp;ldquo;会被解释成任意的字符串。&lt;/p&gt;
&lt;p&gt;和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2-3 个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像010-12345678或0376-7654321)。&lt;/p&gt;
&lt;h1 id=&#34;入门&#34;&gt;入门&lt;/h1&gt;
&lt;p&gt;学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。&lt;/p&gt;
&lt;p&gt;假设你在一篇英文小说里查找hi，你可以使用正则表达式 &amp;quot; &lt;strong&gt;hi&lt;/strong&gt; &amp;ldquo;。&lt;/p&gt;
&lt;p&gt;这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是 &lt;strong&gt;h&lt;/strong&gt;, 后一个是 &lt;strong&gt;i&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配 hi, HI, Hi, hI 这四种情况中的任意一种。&lt;/p&gt;
&lt;p&gt;不幸的是，很多单词里包含 &lt;strong&gt;hi&lt;/strong&gt; 这两个连续的字符，比如 &lt;strong&gt;hi&lt;/strong&gt;m, &lt;strong&gt;hi&lt;/strong&gt;story, &lt;strong&gt;hi&lt;/strong&gt;gh 等等。用 &lt;code&gt;hi&lt;/code&gt; 来查找的话，这里边的 &lt;em&gt;&lt;strong&gt;hi&lt;/strong&gt;&lt;/em&gt; 也会被找出来。如果要精确地查找 &lt;em&gt;&lt;strong&gt;hi&lt;/strong&gt;&lt;/em&gt; 这个单词的话，我们应该使用 &lt;code&gt;\bhi\b&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\b&lt;/code&gt; 是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是 &lt;code&gt;\b&lt;/code&gt; &lt;strong&gt;并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果需要更精确的说法，&lt;code&gt;\b&lt;/code&gt; 匹配这样的位置：&lt;strong&gt;它的前一个字符和后一个字符不全是(一个是,一个不是或不存在) &lt;code&gt;\w&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假如你要找的是 &lt;em&gt;&lt;strong&gt;hi&lt;/strong&gt;&lt;/em&gt; 后面不远处跟着一个 Lucy，你应该用 &lt;code&gt;\bhi\b.*\bLucy\b&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里，&lt;code&gt;.&lt;/code&gt; 是另一个&lt;strong&gt;元字符&lt;/strong&gt;，匹配除了换行符以外的任意字符。&lt;code&gt;*&lt;/code&gt;同样是&lt;strong&gt;元字符&lt;/strong&gt;，不过它代表的不是字符，也不是位置，而是数量——它指定&lt;strong&gt;前边的内容可以连续重复使用任意次以使整个表达式得到匹配&lt;/strong&gt;。因此，&lt;code&gt;.*&lt;/code&gt; 连在一起就意味着任意数量的不包含换行的字符。现在 &lt;code&gt;\bhi\b.*\bLucy\b&lt;/code&gt; 的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。&lt;/p&gt;
&lt;p&gt;换行符就是 &lt;code&gt;&#39;\n&#39;&lt;/code&gt;, ASCII编码为10(十六进制0x0A)的字符。&lt;/p&gt;
&lt;p&gt;如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0\d\d-\d\d\d\d\d\d\d\d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;匹配这样的字符串：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的 &lt;code&gt;\d&lt;/code&gt; 是个新的&lt;strong&gt;元字符&lt;/strong&gt;，匹配一位数字(0，或1，或2，或……)。&lt;code&gt;-&lt;/code&gt; 不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。&lt;/p&gt;
&lt;p&gt;为了避免那么多烦人的重复，我们也可以这样写这个表达式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0\d{2}-\d{8}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里 &lt;strong&gt;\d&lt;/strong&gt; 后面的 &lt;strong&gt;{2}({8})&lt;/strong&gt; 的意思是前面 &lt;strong&gt;\d&lt;/strong&gt; 必须连续重复匹配2次(8次)。&lt;/p&gt;
&lt;h1 id=&#34;测试正则表达式&#34;&gt;测试正则表达式&lt;/h1&gt;
&lt;p&gt;如果你不觉得正则表达式很难读写的话，要么你是一个天才，要么，你不是地球人。正则表达式的语法很令人头疼，即使对经常使用它的人来说也是如此。由于难于读写，容易出错，所以找一种工具对正则表达式进行测试是很有必要的。&lt;/p&gt;
&lt;h2 id=&#34;代码库&#34;&gt;代码库&lt;/h2&gt;
&lt;p&gt;不同的环境下正则表达式的一些细节是不相同的，本教程介绍的是 python 2.7 环境下正则表达式的行为，所以，我向你推荐的是 python 中一个用于方便创建正则表达式的lib，名字为：&lt;strong&gt;PythonVerbalExpressions&lt;/strong&gt;，安装也很方便，直接使用 pip 安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install VerbalExpressions
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;调试工具&#34;&gt;调试工具&lt;/h2&gt;
&lt;p&gt;如果你想要 GUI 调试工具的话，各个平台都有很多不错的工具，但是，我个人比较喜欢跨平台的东西，所以我使用的是 Chrome 扩展，名字叫做：&lt;strong&gt;RegExp Tester&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;扩展安装地址：&lt;a href=&#34;https://chrome.google.com/webstore/detail/regexp-tester/fekbbmalpajhfifodaakkfeodkpigjbk&#34;&gt;点击安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;扩展截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9vb28uMG8wLm9vby8yMDE2LzA1LzE0LzU3MzZjMGEzN2Q4OTUucG5n&#34; alt=&#34;regtester.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;元字符&#34;&gt;元字符&lt;/h1&gt;
&lt;p&gt;现在你已经知道几个很有用的元字符了，如 &lt;code&gt;\b,.,*&lt;/code&gt;，还有 &lt;code&gt;\d.&lt;/code&gt; 正则表达式里还有更多的元字符，比如 &lt;code&gt;\s&lt;/code&gt; 匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。&lt;code&gt;\w&lt;/code&gt; 匹配字母或数字或下划线或汉字等。&lt;/p&gt;
&lt;p&gt;对中文/汉字的特殊处理是由 python 提供的正则表达式引擎在 Python 2 不是原生支持的，需要做一些转换，Python 3 是原生支持的；其它语言环境下的具体情况请查看相关文档。&lt;/p&gt;
&lt;p&gt;下面来看看更多的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\ba\w*\b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母 a，然后是任意数量的字母或数字 &lt;code&gt;(\w*)&lt;/code&gt;，最后是单词结束处(\b)。&lt;/p&gt;
&lt;p&gt;好吧，现在我们说说正则表达式里的单词是什么意思吧：&lt;strong&gt;就是不少于一个的连续的\w&lt;/strong&gt;。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\d+&lt;/code&gt; 匹配1个或更多连续的数字。这里的 + 是和 * 类似的&lt;strong&gt;元字符&lt;/strong&gt;，不同的是 &lt;strong&gt;*&lt;/strong&gt; 匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\b\w{6}\b&lt;/code&gt; 匹配刚好6个字符的单词。&lt;/p&gt;
&lt;p&gt;表1.常用的元字符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配除换行符以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配字母或数字或下划线或汉字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配任意的空白符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配单词的开始或结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;匹配字符串的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;匹配字符串的结束&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;正则表达式引擎通常会提供一个 &amp;ldquo;&lt;em&gt;&lt;strong&gt;测试指定的字符串是否匹配一个正则表达式&lt;/strong&gt;&lt;/em&gt;&amp;rdquo; 的方法，如 JavaScript 里的 &lt;code&gt;RegExp.test()&lt;/code&gt; 方法或 Python 里的 re.match() 方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用 &lt;code&gt;^&lt;/code&gt; 和 &lt;code&gt;$&lt;/code&gt; 的话，对于 &lt;code&gt;\d{5,12}&lt;/code&gt; 而言，使用这样的方法就只能保证字符串里包含5到12连续位数字，而不是整个字符串就是5到12位数字。&lt;/p&gt;
&lt;p&gt;元字符 &lt;code&gt;^&lt;/code&gt;（和数字6在同一个键位上的符号）和 &lt;code&gt;$&lt;/code&gt; 都匹配一个位置，这和 &lt;code&gt;\b&lt;/code&gt; 有点类似。&lt;code&gt;^&lt;/code&gt; 匹配你要用来查找的字符串的开头，&lt;code&gt;$&lt;/code&gt; 匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^\d{5,12}$。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里的 &lt;code&gt;{5,12}&lt;/code&gt; 和前面介绍过的 &lt;code&gt;{2}&lt;/code&gt; 是类似的，只不过 &lt;code&gt;{2}&lt;/code&gt; 匹配只能不多不少重复2次，&lt;code&gt;{5,12}&lt;/code&gt; 则是&lt;strong&gt;重复的次数不能少于5次，不能多于12次，否则都不匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为使用了 &lt;code&gt;^&lt;/code&gt; 和 &lt;code&gt;$&lt;/code&gt; ，所以输入的整个字符串都要用来和&lt;code&gt;\d{5,12}&lt;/code&gt; 来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。&lt;/p&gt;
&lt;p&gt;和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，&lt;code&gt;^&lt;/code&gt; 和 &lt;code&gt;$&lt;/code&gt; 的意义就变成了匹配行的开始处和结束处。&lt;/p&gt;
&lt;h1 id=&#34;字符转义&#34;&gt;字符转义&lt;/h1&gt;
&lt;p&gt;如果你想查找元字符本身的话，比如你查找 &lt;code&gt;.,&lt;/code&gt; 或者 &lt;code&gt;*&lt;/code&gt; ,就出现了问题：&lt;em&gt;你没办法指定它们，因为它们会被解释成别的意思&lt;/em&gt;。这时你就得使用 &lt;code&gt;\&lt;/code&gt; 来取消这些字符的特殊意义。因此，你应该使用&lt;code&gt;\.&lt;/code&gt; 和 &lt;code&gt;\*&lt;/code&gt;。当然，要查找 &lt;code&gt;\&lt;/code&gt; 本身，你也得用 &lt;code&gt;\\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;regtest\.py&lt;/code&gt; 匹配 &lt;code&gt;regtest.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\\Windows&lt;/code&gt; 匹配 &lt;code&gt;C:\Windows&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;重复&#34;&gt;重复&lt;/h1&gt;
&lt;p&gt;你已经看过了前面的 &lt;code&gt;*,+,{2},{5,12}&lt;/code&gt; 这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如&lt;code&gt;*,{5,12}&lt;/code&gt;等)：&lt;/p&gt;
&lt;p&gt;表2.常用的限定符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码/语法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;重复零次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;重复一次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;重复零次或一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n}&lt;/td&gt;
&lt;td&gt;重复n次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,}&lt;/td&gt;
&lt;td&gt;重复n次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,m}&lt;/td&gt;
&lt;td&gt;重复n到m次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面是一些使用重复的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows\d+&lt;/strong&gt; 匹配 &lt;em&gt;Windows后面跟1个或更多数字&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;^\w+&lt;/strong&gt; 匹配 &lt;em&gt;一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;字符类&#34;&gt;字符类&lt;/h1&gt;
&lt;p&gt;要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母 a, e, i, o, u ),应该怎么办？&lt;/p&gt;
&lt;p&gt;很简单，你只需要在方括号里列出它们就行了，像 &lt;code&gt;[aeiou]&lt;/code&gt; 就匹配任何一个英文元音字母，&lt;code&gt;[.?!]&lt;/code&gt; 匹配标点符号( . 或 ? 或 ! )。&lt;/p&gt;
&lt;p&gt;我们也可以轻松地指定一个字符范围，像 &lt;code&gt;[0-9]&lt;/code&gt; 代表的含意与 &lt;code&gt;\d&lt;/code&gt; 就是完全一致的：&lt;strong&gt;一位数字&lt;/strong&gt;；同理 &lt;code&gt;[a-z0-9A-Z_]&lt;/code&gt; 也完全等同于 &lt;code&gt;\w&lt;/code&gt;（如果只考虑英文的话）。&lt;/p&gt;
&lt;p&gt;下面是一个更复杂的表达式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\(?0\d{2}[) -]?\d{8}。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;“&lt;code&gt;(&lt;/code&gt;”和“&lt;code&gt;)&lt;/code&gt;”也是元字符，后面的分组节里会提到，所以在这里需要使用转义。&lt;/p&gt;
&lt;p&gt;这个表达式可以匹配几种格式的电话号码，像 &lt;em&gt;(010)88886666&lt;/em&gt;，或&lt;em&gt;022-22334455&lt;/em&gt;，或 &lt;em&gt;02912345678&lt;/em&gt; 等。我们对它进行一些分析吧：首先是一个转义字符 &lt;code&gt;\(&lt;/code&gt;,它能出现0次或1次 &lt;code&gt;(?)&lt;/code&gt;,然后是一个0，后面跟着2个数字&lt;code&gt;(\d{2})&lt;/code&gt;，然后是&lt;code&gt;)&lt;/code&gt;或&lt;code&gt;-&lt;/code&gt;或空格中的一个，它出现1次或不出现 &lt;code&gt;(?)&lt;/code&gt;，最后是8个数字 &lt;code&gt;(\d{8})&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;分枝条件&#34;&gt;分枝条件&lt;/h1&gt;
&lt;p&gt;不幸的是，刚才那个表达式也能匹配 &lt;em&gt;010)12345678&lt;/em&gt; 或*(022-87654321* 这样的“不正确”的格式。&lt;/p&gt;
&lt;p&gt;要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用 &lt;code&gt;|&lt;/code&gt; 把不同的规则分隔开。听不明白？没关系，看例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0\d{2}-\d{8}|0\d{3}-\d{7}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个表达式能匹配两种以连字号分隔的电话号码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种是三位区号，8位本地号(如 010-12345678 )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一种是四位区号，7位本地号( 0376-2233445 )&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  \(?0\d{2}\)?[- ]?\d{8}|0\d{2}[- ]?\d{8}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个表达式匹配 3 位区号的电话号码，其中&lt;strong&gt;区号可以用小括号括起来，也可以不用&lt;/strong&gt;，区号与本地号间&lt;strong&gt;可以用连字号或空格间隔，也可以没有间隔&lt;/strong&gt;。&lt;em&gt;&lt;strong&gt;你可以试试用分枝条件把这个表达式扩展成也支持4位区号的&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\d{5}-\d{4}|\d{5}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。&lt;/p&gt;
&lt;h1 id=&#34;分组&#34;&gt;分组&lt;/h1&gt;
&lt;p&gt;我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以&lt;strong&gt;用小括号来指定子表达式(也叫做分组)&lt;/strong&gt;，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(\d{1,3}\.){3}\d{1,3}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是一个简单的 IP 地址匹配表达式。要理解这个表达式，请按下列顺序分析它：&lt;code&gt;\d{1,3}&lt;/code&gt; 匹配1到3位的数字，&lt;code&gt;(\d{1,3}\.){3}&lt;/code&gt; 匹配三位数字加上一个英文句号(&lt;em&gt;这个整体也就是这个分组&lt;/em&gt;)重复3次，最后再加上一个一到三位的数字&lt;code&gt;(\d{1,3})&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP地址中每个数字都不能大于255&lt;/strong&gt;. 经常有人问我, 01.02.03.04 这样前面带有0的数字, 是不是正确的IP地址呢? 答案是: &lt;strong&gt;是的&lt;/strong&gt;, IP 地址里的数字可以包含有前导 0 (leading zeroes).&lt;/p&gt;
&lt;p&gt;不幸的是，它也将匹配 &lt;em&gt;256.300.888.999&lt;/em&gt; 这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是&lt;strong&gt;正则表达式中并不提供关于数学的任何功能&lt;/strong&gt;，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;理解这个表达式的关键是理解 &lt;code&gt;2[0-4]\d|25[0-5]|[01]?\d\d?&lt;/code&gt;，这里我就不细说了，你自己应该能分析得出来它的意义。&lt;/p&gt;
&lt;h1 id=&#34;反义&#34;&gt;反义&lt;/h1&gt;
&lt;p&gt;有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：&lt;/p&gt;
&lt;p&gt;表3.常用的反义代码&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码/语法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配任意不是字母，数字，下划线，汉字的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;匹配任意不是空白符的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;匹配任意非数字的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;匹配不是单词开头或结束的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^x]&lt;/td&gt;
&lt;td&gt;匹配除了x以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^aeiou]&lt;/td&gt;
&lt;td&gt;匹配除了aeiou这几个字母以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\S+&lt;/code&gt;匹配 &lt;em&gt;不包含空白符的字符串&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a[^&amp;gt;]+&amp;gt;&lt;/code&gt;匹配 &lt;em&gt;用尖括号括起来的以a开头的字符串&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;后向引用&#34;&gt;后向引用&lt;/h1&gt;
&lt;p&gt;使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。&lt;/p&gt;
&lt;p&gt;后向引用用于重复搜索前面某个分组匹配的文本。例如，&lt;code&gt;\1&lt;/code&gt; 代表分组1匹配的文本。难以理解？请看示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\b(\w+)\b\s+\1\b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以用来匹配重复的单词，像go go, 或者kitty kitty。&lt;/p&gt;
&lt;p&gt;这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字 &lt;code&gt;(\b(\w+)\b)&lt;/code&gt; ，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符 &lt;code&gt;(\s+)&lt;/code&gt;，最后是分组1中捕获的内容（也就是前面匹配的那个单词）&lt;code&gt;(\1)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：&lt;code&gt;(?&amp;lt;Word&amp;gt;\w+)&lt;/code&gt;(或者把尖括号换成&amp;rsquo;也行： &lt;code&gt;(?&#39;Word&#39;\w+))&lt;/code&gt;,这样就把 &lt;code&gt;\w+&lt;/code&gt; 的组名指定为 &lt;code&gt;Word&lt;/code&gt; 了。要反向引用这个分组捕获的内容，你可以使用 &lt;code&gt;\k&amp;lt;Word&amp;gt;&lt;/code&gt;,所以上一个例子也可以写成这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\b(?&amp;lt;Word&amp;gt;\w+)\b\s+\k&amp;lt;Word&amp;gt;\b。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：&lt;/p&gt;
&lt;p&gt;表4.常用分组语法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;代码/语法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;捕获&lt;/td&gt;
&lt;td&gt;(exp)&lt;/td&gt;
&lt;td&gt;匹配exp,并捕获文本到自动命名的组里&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&lt;name&gt;exp)&lt;/td&gt;
&lt;td&gt;匹配exp,并捕获文本到名称为name的组里，也可以写成(?&amp;lsquo;name&amp;rsquo;exp)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?:exp)&lt;/td&gt;
&lt;td&gt;匹配exp,不捕获匹配的文本，也不给此分组分配组号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;零宽断言&lt;/td&gt;
&lt;td&gt;(?=exp)&lt;/td&gt;
&lt;td&gt;匹配exp前面的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&amp;lt;=exp)&lt;/td&gt;
&lt;td&gt;匹配exp后面的位置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?!exp)&lt;/td&gt;
&lt;td&gt;匹配后面跟的不是exp的位置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&amp;lt;!exp)&lt;/td&gt;
&lt;td&gt;匹配前面不是exp的位置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;注释&lt;/td&gt;
&lt;td&gt;(?#comment)&lt;/td&gt;
&lt;td&gt;这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们已经讨论了前两种语法。&lt;/p&gt;
&lt;p&gt;第三个(?:exp)不会改变正则表达式的处理方式，只是这样的组匹配的内容 &lt;em&gt;不会像前两种那样被捕获到某个组里面，也不会拥有组号&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;“我为什么会想要这样做？”——好问题，你觉得为什么呢？&lt;/p&gt;
&lt;h1 id=&#34;零宽断言&#34;&gt;零宽断言&lt;/h1&gt;
&lt;p&gt;接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像 &lt;strong&gt;\b,^,$&lt;/strong&gt; 那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。&lt;/p&gt;
&lt;p&gt;最好还是拿例子来说明吧：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(?=exp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也叫&lt;strong&gt;零宽度正预测先行断言&lt;/strong&gt;，它断言自身出现的位置的后面能匹配表达式&lt;em&gt;exp&lt;/em&gt;。比如 &lt;code&gt;\b\w+(?=ing\b)&lt;/code&gt;，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找 &lt;code&gt;I&#39;m singing while you&#39;re dancing.&lt;/code&gt; 时，它会匹配 &lt;code&gt;sing&lt;/code&gt; 和 &lt;code&gt;danc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?&amp;lt;=exp)&lt;/code&gt; 也叫&lt;strong&gt;零宽度正回顾后发断言&lt;/strong&gt;，它断言自身出现的位置的前面能匹配表达式&lt;code&gt;exp&lt;/code&gt;。比如 &lt;code&gt;(?&amp;lt;=\bre)\w+\b&lt;/code&gt; 会匹配以&lt;code&gt;re&lt;/code&gt; 开头的单词的后半部分(除了 &lt;code&gt;re&lt;/code&gt; 以外的部分)，例如在查找&lt;code&gt;reading a book&lt;/code&gt;时，它匹配 &lt;code&gt;ading&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((?&amp;lt;=\d)\d{3})+\b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用它对1234567890进行查找时结果是234567890。&lt;/p&gt;
&lt;p&gt;下面这个例子同时使用了这两种断言：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(?&amp;lt;=\s)\d+(?=\s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;匹配以空白符间隔的数字(再次强调，不包括这些空白符)。&lt;/p&gt;
&lt;h1 id=&#34;负向零宽断言&#34;&gt;负向零宽断言&lt;/h1&gt;
&lt;p&gt;前面我们提到过怎么查找&lt;strong&gt;不是某个字符或不在某个字符类里的字符的方法(反义)&lt;/strong&gt;。但是如果我们只是想要&lt;strong&gt;确保某个字符没有出现&lt;/strong&gt;，&lt;strong&gt;但并不想去匹配它&lt;/strong&gt;时怎么办？例如，如果我们想查找这样的单词&amp;ndash;它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\b\w*q[^u]\w*\b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;匹配包含 &lt;em&gt;后面不是字母 u 的字母 q 的单词&lt;/em&gt;。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为 &lt;code&gt;[^u]&lt;/code&gt; 总要匹配一个字符，所以如果 q是单词的最后一个字符的话，后面的 &lt;code&gt;[^u]&lt;/code&gt; 将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的 &lt;code&gt;\w*\b&lt;/code&gt; 将会匹配下一个单词，于是 &lt;code&gt;\b\w*q[^u]\w*\b&lt;/code&gt; 就能匹配整个 Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不&lt;strong&gt;消费&lt;/strong&gt;任何字符。现在，我们可以这样来解决这个问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\b\w*q(?!u)\w*\b。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;零宽度负预测先行断言&lt;code&gt;(?!exp)&lt;/code&gt;，断言此位置的后面不能匹配表达式 &lt;code&gt;exp&lt;/code&gt;。例如：&lt;code&gt;\d{3}(?!\d)&lt;/code&gt;匹配三位数字，而且这三位数字的后面不能是数字；&lt;code&gt;\b((?!abc)\w)+\b&lt;/code&gt; 匹配不包含连续字符串abc的单词。&lt;/p&gt;
&lt;p&gt;同理，我们可以用&lt;code&gt;(?&amp;lt;!exp)&lt;/code&gt;,零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp; &lt;code&gt;(?&amp;lt;![a-z])\d{7}&lt;/code&gt;匹配前面不是小写字母的七位数字。&lt;/p&gt;
&lt;p&gt;一个更复杂的例子：&lt;code&gt;(?&amp;lt;=&amp;lt;(\w+)&amp;gt;).*(?=&amp;lt;\/\1&amp;gt;)&lt;/code&gt; 匹配不包含属性的简单HTML标签内里的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(?&amp;lt;=&amp;lt;(\w+)&amp;gt;)&lt;/code&gt; 指定了这样的前缀：被尖括号括起来的单词(比如可能是 &amp;lt;b&amp;gt;)&lt;/li&gt;
&lt;li&gt;然后是**.***(任意的字符串)&lt;/li&gt;
&lt;li&gt;最后是一个后缀&lt;code&gt;(?=&amp;lt;\/\1&amp;gt;)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意后缀里的&lt;code&gt;\/&lt;/code&gt;，它用到了前面提过的字符转义；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\1&lt;/code&gt;则是一个反向引用，引用的正是捕获的第一组，前面的&lt;code&gt;(\w+)&lt;/code&gt;匹配的内容，这样如果前缀实际上是&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;的话，后缀就是&lt;/b&gt;了。整个表达式匹配的是&lt;b&gt;和&lt;/b&gt;之间的内容(再次提醒，不包括前缀和后缀本身)。&lt;/p&gt;
&lt;h1 id=&#34;注释&#34;&gt;注释&lt;/h1&gt;
&lt;p&gt;小括号的另一种用途是通过语法&lt;code&gt;(?#comment)&lt;/code&gt;来包含注释。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2\[0-4\]\d(?#200-249)|25\[0\-5\](\?#250-255)|\[01\]?\d\d?(?#0-199)。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要包含注释的话，最好是启用“&lt;em&gt;&lt;strong&gt;忽略模式里的空白符&lt;/strong&gt;&lt;/em&gt;”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(?&amp;lt;=    # 断言要匹配的文本的前缀
&amp;lt;(\w+)&amp;gt; # 查找尖括号括起来的字母或数字(即HTML/XML标签)
)       # 前缀结束
.*      # 匹配任意文本
(?=     # 断言要匹配的文本的后缀
&amp;lt;\/\1&amp;gt;  # 查找尖括号括起来的内容：前面是一个&amp;quot;/&amp;quot;，后面是先前捕获的标签
)       # 后缀结束
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;贪婪与懒惰&#34;&gt;贪婪与懒惰&lt;/h1&gt;
&lt;p&gt;当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：&lt;code&gt;a.*b&lt;/code&gt;，它将会匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 &lt;code&gt;aabab&lt;/code&gt; 的话，它会匹配整个字符串 &lt;code&gt;aabab&lt;/code&gt;。这被称为&lt;strong&gt;贪婪匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有时，我们更需要&lt;strong&gt;懒惰匹配&lt;/strong&gt;，也就是&lt;strong&gt;匹配尽可能少的字符&lt;/strong&gt;。前面给出的限定符都可以被转化为&lt;strong&gt;懒惰匹配模式&lt;/strong&gt;，只要在它&lt;strong&gt;后面加上一个问号?&lt;/strong&gt;。这样 &lt;code&gt;.*?&lt;/code&gt; 就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a.*?b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;匹配最短的，以a开始，以b结束的字符串。如果把它应用于 &lt;code&gt;aabab&lt;/code&gt; 的话，它会匹配 &lt;code&gt;aab&lt;/code&gt;（第一到第三个字符）和 &lt;code&gt;ab&lt;/code&gt;（第四到第五个字符）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表5.懒惰限定符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码/语法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*?&lt;/td&gt;
&lt;td&gt;重复任意次，但尽可能少重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+?&lt;/td&gt;
&lt;td&gt;重复1次或更多次，但尽可能少重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;td&gt;重复0次或1次，但尽可能少重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,m}?&lt;/td&gt;
&lt;td&gt;重复n到m次，但尽可能少重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,}?&lt;/td&gt;
&lt;td&gt;重复n次以上，但尽可能少重复&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;处理选项&#34;&gt;处理选项&lt;/h1&gt;
&lt;p&gt;上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是 Python 中常用的正则表达式选项：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表6.常用的处理选项&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;re.IGNORECASE&lt;/td&gt;
&lt;td&gt;匹配时不区分大小写。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.MULTILINE&lt;/td&gt;
&lt;td&gt;更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.DOTALL&lt;/td&gt;
&lt;td&gt;更改.的含义，使它与每一个字符匹配（包括换行符\n）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.VERBOSE&lt;/td&gt;
&lt;td&gt;忽略表达式中的非转义空白并启用由#标记的注释。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.DEBUG&lt;/td&gt;
&lt;td&gt;显示编译表达式的 debug 信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;平衡组递归匹配&#34;&gt;平衡组/递归匹配&lt;/h1&gt;
&lt;p&gt;有时我们需要匹配像&lt;code&gt;( 100 * ( 50 + 15 ) )&lt;/code&gt;这样的可嵌套的层次性结构，这时简单地使用&lt;code&gt;\(.+\)&lt;/code&gt;则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如&lt;code&gt;( 5 / ( 3 + 2 ) ) )&lt;/code&gt;，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？&lt;/p&gt;
&lt;p&gt;为了避免(和(把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把&lt;code&gt;xx &amp;lt;aa &amp;lt;bbb&amp;gt; &amp;lt;bbb&amp;gt; aa&amp;gt; yy&lt;/code&gt;这样的字符串里，最长的配对的尖括号内的内容捕获出来？&lt;/p&gt;
&lt;p&gt;这里需要用到以下的语法构造：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(?&amp;lsquo;group&amp;rsquo;) 把捕获的内容命名为group,并压入堆栈(Stack)&lt;/li&gt;
&lt;li&gt;(?&#39;-group&amp;rsquo;) 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败&lt;/li&gt;
&lt;li&gt;(?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分&lt;/li&gt;
&lt;li&gt;(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要做的是每碰到了左括号，就在压入一个&amp;quot;Open&amp;rdquo;,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;                     #最外层的左括号
[^&amp;lt;&amp;gt;]*                #最外层的左括号后面的不是括号的内容
(
    (
        (?&#39;Open&#39;&amp;lt;)    #碰到了左括号，在黑板上写一个&amp;quot;Open&amp;quot;
        [^&amp;lt;&amp;gt;]*        #匹配左括号后面的不是括号的内容
    )+
    (
        (?&#39;-Open&#39;&amp;gt;)   #碰到了右括号，擦掉一个&amp;quot;Open&amp;quot;
        [^&amp;lt;&amp;gt;]*        #匹配右括号后面不是括号的内容
    )+
)*
(?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的&amp;quot;Open&amp;quot;；如果还有，则匹配失败

&amp;gt;                     #最外层的右括号
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div[^&amp;gt;]*&amp;gt;[^&amp;lt;&amp;gt;]*(((?&#39;Open&#39;&amp;lt;div[^&amp;gt;]*&amp;gt;)[^&amp;lt;&amp;gt;]*)+((?&#39;-Open&#39;&amp;lt;/div&amp;gt;)[^&amp;lt;&amp;gt;]*)+)*(?(Open)(?!))&amp;lt;/div&amp;gt;.# 还有些什么东西没提到
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网上找到更详细的参考资料来学习它们&amp;ndash;当你需要用到它们的时候。&lt;/p&gt;
&lt;p&gt;如果你想了解更多关于 Python 中正则表达式的应用的话，你可以下载 Python Docs 进行阅读，或者也可以&lt;a href=&#34;https://docs.python.org/2.7/library/re.html&#34;&gt;点此此处&lt;/a&gt;进行在线阅读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://item.jd.com/11070361.html&#34;&gt;精通正则表达式（第3版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/zh-cn/library/hs600312.aspx&#34;&gt;微软的正则表达式教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2.7/library/re.html&#34;&gt;Python Re Module Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.regular-expressions.info/&#34;&gt;专业的正则表达式教学网站(英文)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.riba2534.cn/blog/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/ - </description>
        </item>
    
    
    
        <item>
        <title>Gin官方文档</title>
        <link>https://blog.riba2534.cn/blog/2019/gin%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</link>
        <pubDate>Wed, 17 Jul 2019 10:32:01 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/gin%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/gin%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/ -&lt;h3 id=&#34;安装与配置&#34;&gt;安装与配置&lt;/h3&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go get gopkg.in/gin-gonic/gin.v1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt; 注意：确保 GOPATH GOROOT 已经配置 &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;导入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gopkg.in/gin-gonic/gin.v1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;框架架构&#34;&gt;框架架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1.默认服务器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;router.&lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2.HTTP 服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了默认服务器中 &lt;code&gt;router.Run()&lt;/code&gt; 的方式外，还可以用 &lt;code&gt;http.ListenAndServe()&lt;/code&gt;，比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	router := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()
	http.&lt;span style=&#34;color:#008b45&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, router)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或者自定义 HTTP 服务器的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	router := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()

	s := &amp;amp;http.Server{
		Addr:           &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;,
		Handler:        router,
		ReadTimeout:    &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; * time.Second,
		WriteTimeout:   &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; * time.Second,
		MaxHeaderBytes: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;,
	}
	s.&lt;span style=&#34;color:#008b45&#34;&gt;ListenAndServe&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3.HTTP 服务器替换方案&lt;/strong&gt;
想无缝重启、停机吗? 以下有几种方式：&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;a href=&#34;https://github.com/fvbock/endless&#34;&gt;fvbock/endless&lt;/a&gt; 来替换默认的 &lt;code&gt;ListenAndServe&lt;/code&gt;。但是 windows 不能使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;router := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()
router.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, handler)
&lt;span style=&#34;color:#228b22&#34;&gt;// [...]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;endless.&lt;span style=&#34;color:#008b45&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:4242&amp;#34;&lt;/span&gt;, router)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;除了 endless 还可以用manners:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/braintree/manners&#34;&gt;manners&lt;/a&gt; 兼容windows&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;manners.ListenAndServe(&amp;quot;:8888&amp;quot;, r)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你使用的 golang 版本大于 1.8 版本, 那么可以用 http.Server 内置的 Shutdown 方法来实现优雅的关闭服务, 一个简单的示例代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;srv := http.Server{
    Addr: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;,
    Handler: router,
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err :+ srv.&lt;span style=&#34;color:#008b45&#34;&gt;ListenAndServe&lt;/span&gt;(); err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; err != http.ErrServerClosed {
        log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;listen: %s\n&amp;#34;&lt;/span&gt;, err)
    }
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 其他代码, 等待关闭信号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;...

ctx, cancel := context.&lt;span style=&#34;color:#008b45&#34;&gt;WithTimeout&lt;/span&gt;(context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;*time.Second)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cancel&lt;/span&gt;()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err := srv.&lt;span style=&#34;color:#008b45&#34;&gt;Shutdown&lt;/span&gt;(ctx); err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Server Shutdown: &amp;#34;&lt;/span&gt;, err)
}
log.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Server exiting&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;完整的代码见 &lt;a href=&#34;https://github.com/gin-gonic/gin/blob/master/examples/graceful-shutdown/graceful-shutdown/server.go&#34;&gt;graceful-shutdown&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生命周期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Context&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;路由&#34;&gt;路由&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本路由
gin 框架中采用的路由库是 httprouter。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 创建带有默认中间件的路由:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 日志与恢复中间件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	router := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()
	&lt;span style=&#34;color:#228b22&#34;&gt;//创建不带中间件的路由：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;//r := gin.New()
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
	router.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/someGet&amp;#34;&lt;/span&gt;, getting)
	router.&lt;span style=&#34;color:#008b45&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/somePost&amp;#34;&lt;/span&gt;, posting)
	router.&lt;span style=&#34;color:#008b45&#34;&gt;PUT&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/somePut&amp;#34;&lt;/span&gt;, putting)
	router.&lt;span style=&#34;color:#008b45&#34;&gt;DELETE&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/someDelete&amp;#34;&lt;/span&gt;, deleting)
	router.&lt;span style=&#34;color:#008b45&#34;&gt;PATCH&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/somePatch&amp;#34;&lt;/span&gt;, patching)
	router.&lt;span style=&#34;color:#008b45&#34;&gt;HEAD&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/someHead&amp;#34;&lt;/span&gt;, head)
	router.&lt;span style=&#34;color:#008b45&#34;&gt;OPTIONS&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/someOptions&amp;#34;&lt;/span&gt;, options)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;路由参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;api 参数通过Context的Param方法来获取&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;router.GET(&amp;quot;/string/:name&amp;quot;, func(c *gin.Context) {
    	name := c.Param(&amp;quot;name&amp;quot;)
    	fmt.Println(&amp;quot;Hello %s&amp;quot;, name)
    })
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;URL 参数通过 DefaultQuery 或 Query 方法获取&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// url 为 http://localhost:8080/welcome?name=ningskyer时
// 输出 Hello ningskyer
// url 为 http://localhost:8080/welcome时
// 输出 Hello Guest
router.GET(&amp;quot;/welcome&amp;quot;, func(c *gin.Context) {
	name := c.DefaultQuery(&amp;quot;name&amp;quot;, &amp;quot;Guest&amp;quot;) //可设置默认值
	// 是 c.Request.URL.Query().Get(&amp;quot;lastname&amp;quot;) 的简写
	lastname := c.Query(&amp;quot;lastname&amp;quot;) 
	fmt.Println(&amp;quot;Hello %s&amp;quot;, name)
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;表单参数通过 PostForm 方法获取&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//form
router.POST(&amp;quot;/form&amp;quot;, func(c *gin.Context) {
	type := c.DefaultPostForm(&amp;quot;type&amp;quot;, &amp;quot;alert&amp;quot;)//可设置默认值
	msg := c.PostForm(&amp;quot;msg&amp;quot;)
	title := c.PostForm(&amp;quot;title&amp;quot;)
	fmt.Println(&amp;quot;type is %s, msg is %s, title is %s&amp;quot;, type, msg, title)
})
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;路由群组&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	someGroup := router.&lt;span style=&#34;color:#008b45&#34;&gt;Group&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/someGroup&amp;#34;&lt;/span&gt;)
    {
        someGroup.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/someGet&amp;#34;&lt;/span&gt;, getting)
		someGroup.&lt;span style=&#34;color:#008b45&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/somePost&amp;#34;&lt;/span&gt;, posting)
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;控制器&#34;&gt;控制器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据解析绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模型绑定可以将请求体绑定给一个类型，目前支持绑定的类型有 JSON, XML 和标准表单数据 (foo=bar&amp;amp;boo=baz)。
要注意的是绑定时需要给字段设置绑定类型的标签。比如绑定 JSON 数据时，设置 &lt;code&gt;json:&amp;quot;fieldname&amp;quot;&lt;/code&gt;。
使用绑定方法时，Gin 会根据请求头中  Content-Type  来自动判断需要解析的类型。如果你明确绑定的类型，你可以不用自动推断，而用 BindWith 方法。
你也可以指定某字段是必需的。如果一个字段被 &lt;code&gt;binding:&amp;quot;required&amp;quot;&lt;/code&gt; 修饰而值却是空的，请求会失败并返回错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Binding from JSON
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; Login &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	User     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;`form:&amp;#34;user&amp;#34; json:&amp;#34;user&amp;#34; binding:&amp;#34;required&amp;#34;`&lt;/span&gt;
	Password &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;`form:&amp;#34;password&amp;#34; json:&amp;#34;password&amp;#34; binding:&amp;#34;required&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	router := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()

	&lt;span style=&#34;color:#228b22&#34;&gt;// 绑定JSON的例子 ({&amp;#34;user&amp;#34;: &amp;#34;manu&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;123&amp;#34;})
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	router.&lt;span style=&#34;color:#008b45&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/loginJSON&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; json Login

		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; c.&lt;span style=&#34;color:#008b45&#34;&gt;BindJSON&lt;/span&gt;(&amp;amp;json) == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; json.User == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;manu&amp;#34;&lt;/span&gt; &amp;amp;&amp;amp; json.Password == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt; {
				c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(http.StatusOK, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;you are logged in&amp;#34;&lt;/span&gt;})
			} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
				c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(http.StatusUnauthorized, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;unauthorized&amp;#34;&lt;/span&gt;})
			}
		}
	})

	&lt;span style=&#34;color:#228b22&#34;&gt;// 绑定普通表单的例子 (user=manu&amp;amp;password=123)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	router.&lt;span style=&#34;color:#008b45&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/loginForm&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; form Login
		&lt;span style=&#34;color:#228b22&#34;&gt;// 根据请求头中 content-type 自动推断.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; c.&lt;span style=&#34;color:#008b45&#34;&gt;Bind&lt;/span&gt;(&amp;amp;form) == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; form.User == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;manu&amp;#34;&lt;/span&gt; &amp;amp;&amp;amp; form.Password == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt; {
				c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(http.StatusOK, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;you are logged in&amp;#34;&lt;/span&gt;})
			} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
				c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(http.StatusUnauthorized, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;unauthorized&amp;#34;&lt;/span&gt;})
			}
		}
	})
	&lt;span style=&#34;color:#228b22&#34;&gt;// 绑定多媒体表单的例子 (user=manu&amp;amp;password=123)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	router.&lt;span style=&#34;color:#008b45&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; form LoginForm
		&lt;span style=&#34;color:#228b22&#34;&gt;// 你可以显式声明来绑定多媒体表单：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;// c.BindWith(&amp;amp;form, binding.Form)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;// 或者使用自动推断:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; c.&lt;span style=&#34;color:#008b45&#34;&gt;Bind&lt;/span&gt;(&amp;amp;form) == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; form.User == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt; &amp;amp;&amp;amp; form.Password == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; {
				c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;you are logged in&amp;#34;&lt;/span&gt;})
			} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
				c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;401&lt;/span&gt;, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;unauthorized&amp;#34;&lt;/span&gt;})
			}
		}
	})
	&lt;span style=&#34;color:#228b22&#34;&gt;// Listen and serve on 0.0.0.0:8080
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	router.&lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;请求&#34;&gt;请求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cookies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;router.POST(&amp;quot;/upload&amp;quot;, func(c *gin.Context) {

    file, header , err := c.Request.FormFile(&amp;quot;upload&amp;quot;)
    filename := header.Filename
    fmt.Println(header.Filename)
    out, err := os.Create(&amp;quot;./tmp/&amp;quot;+filename+&amp;quot;.png&amp;quot;)
    if err != nil {
        log.Fatal(err)
    }
    defer out.Close()
    _, err = io.Copy(out, file)
    if err != nil {
        log.Fatal(err)
    }   
})
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;响应&#34;&gt;响应&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;响应头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;附加Cookie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串响应&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;c.String(http.StatusOK, &amp;quot;some string&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;JSON/XML/YAML响应&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;r.GET(&amp;quot;/moreJSON&amp;quot;, func(c *gin.Context) {
	// You also can use a struct
	var msg struct {
		Name    string `json:&amp;quot;user&amp;quot; xml:&amp;quot;user&amp;quot;`
		Message string
		Number  int
	}
	msg.Name = &amp;quot;Lena&amp;quot;
	msg.Message = &amp;quot;hey&amp;quot;
	msg.Number = 123
	// 注意 msg.Name 变成了 &amp;quot;user&amp;quot; 字段
	// 以下方式都会输出 :   {&amp;quot;user&amp;quot;: &amp;quot;Lena&amp;quot;, &amp;quot;Message&amp;quot;: &amp;quot;hey&amp;quot;, &amp;quot;Number&amp;quot;: 123}
	c.JSON(http.StatusOK, gin.H{&amp;quot;user&amp;quot;: &amp;quot;Lena&amp;quot;, &amp;quot;Message&amp;quot;: &amp;quot;hey&amp;quot;, &amp;quot;Number&amp;quot;: 123})
	c.XML(http.StatusOK, gin.H{&amp;quot;user&amp;quot;: &amp;quot;Lena&amp;quot;, &amp;quot;Message&amp;quot;: &amp;quot;hey&amp;quot;, &amp;quot;Number&amp;quot;: 123})
	c.YAML(http.StatusOK, gin.H{&amp;quot;user&amp;quot;: &amp;quot;Lena&amp;quot;, &amp;quot;Message&amp;quot;: &amp;quot;hey&amp;quot;, &amp;quot;Number&amp;quot;: 123})
	c.JSON(http.StatusOK, msg)
	c.XML(http.StatusOK, msg)
	c.YAML(http.StatusOK, msg)
})
		
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;视图响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先要使用 LoadHTMLTemplates() 方法来加载模板文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	router := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()
	&lt;span style=&#34;color:#228b22&#34;&gt;//加载模板
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	router.&lt;span style=&#34;color:#008b45&#34;&gt;LoadHTMLGlob&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;templates/*&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#228b22&#34;&gt;//router.LoadHTMLFiles(&amp;#34;templates/template1.html&amp;#34;, &amp;#34;templates/template2.html&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;//定义路由
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	router.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/index&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		&lt;span style=&#34;color:#228b22&#34;&gt;//根据完整文件名渲染模板，并传递参数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		c.&lt;span style=&#34;color:#008b45&#34;&gt;HTML&lt;/span&gt;(http.StatusOK, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;index.tmpl&amp;#34;&lt;/span&gt;, gin.H{
			&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Main website&amp;#34;&lt;/span&gt;,
		})
	})
	router.&lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;模板结构定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;html&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
		{{ .title }}
	&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;不同文件夹下模板名字可以相同，此时需要 LoadHTMLGlob() 加载两层模板路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;router.&lt;span style=&#34;color:#008b45&#34;&gt;LoadHTMLGlob&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;templates/**/*&amp;#34;&lt;/span&gt;)
router.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/posts/index&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
	c.&lt;span style=&#34;color:#008b45&#34;&gt;HTML&lt;/span&gt;(http.StatusOK, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;posts/index.tmpl&amp;#34;&lt;/span&gt;, gin.H{
		&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Posts&amp;#34;&lt;/span&gt;,
	})
	c.&lt;span style=&#34;color:#008b45&#34;&gt;HTML&lt;/span&gt;(http.StatusOK, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;users/index.tmpl&amp;#34;&lt;/span&gt;, gin.H{
		&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Users&amp;#34;&lt;/span&gt;,
	})
	
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;templates/posts/index.tmpl&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- 注意开头 define 与结尾 end 不可少 --&amp;gt;&lt;/span&gt;
{{ define &amp;#34;posts/index.tmpl&amp;#34; }}
&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
	{{ .title }}
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;html&lt;/span&gt;&amp;gt;
{{ end }}

gin也可以使用自定义的模板引擎，如下

```go
import &amp;#34;html/template&amp;#34;

func main() {
	router := gin.Default()
	html := template.Must(template.ParseFiles(&amp;#34;file1&amp;#34;, &amp;#34;file2&amp;#34;))
	router.SetHTMLTemplate(html)
	router.Run(&amp;#34;:8080&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;文件响应&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//获取当前文件的相对路径
router.Static(&amp;quot;/assets&amp;quot;, &amp;quot;./assets&amp;quot;)
//
router.StaticFS(&amp;quot;/more_static&amp;quot;, http.Dir(&amp;quot;my_file_system&amp;quot;))
//获取相对路径下的文件
router.StaticFile(&amp;quot;/favicon.ico&amp;quot;, &amp;quot;./resources/favicon.ico&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;r.GET(&amp;quot;/redirect&amp;quot;, func(c *gin.Context) {
	//支持内部和外部的重定向
    c.Redirect(http.StatusMovedPermanently, &amp;quot;http://www.baidu.com/&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;同步异步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;goroutine 机制可以方便地实现异步处理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	r := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()
	&lt;span style=&#34;color:#228b22&#34;&gt;//1. 异步
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	r.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/long_async&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		&lt;span style=&#34;color:#228b22&#34;&gt;// goroutine 中只能使用只读的上下文 c.Copy()
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		cCp := c.&lt;span style=&#34;color:#008b45&#34;&gt;Copy&lt;/span&gt;()
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
			time.&lt;span style=&#34;color:#008b45&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; * time.Second)

			&lt;span style=&#34;color:#228b22&#34;&gt;// 注意使用只读上下文
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			log.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Done! in path &amp;#34;&lt;/span&gt; + cCp.Request.URL.Path)
		}()
	})
	&lt;span style=&#34;color:#228b22&#34;&gt;//2. 同步
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	r.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/long_sync&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		time.&lt;span style=&#34;color:#008b45&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; * time.Second)

		&lt;span style=&#34;color:#228b22&#34;&gt;// 注意可以使用原始上下文
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		log.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Done! in path &amp;#34;&lt;/span&gt; + c.Request.URL.Path)
	})

	&lt;span style=&#34;color:#228b22&#34;&gt;// Listen and serve on 0.0.0.0:8080
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	r.&lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;视图&#34;&gt;视图&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传参&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视图组件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中间件&#34;&gt;中间件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分类使用方式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 1.全局中间件
router.Use(gin.Logger())
router.Use(gin.Recovery())

// 2.单路由的中间件，可以加任意多个
router.GET(&amp;quot;/benchmark&amp;quot;, MyMiddelware(), benchEndpoint)

// 3.群组路由的中间件
authorized := router.Group(&amp;quot;/&amp;quot;, MyMiddelware())
// 或者这样用：
authorized := router.Group(&amp;quot;/&amp;quot;)
authorized.Use(MyMiddelware())
{
	authorized.POST(&amp;quot;/login&amp;quot;, loginEndpoint)
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;自定义中间件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Logger&lt;/span&gt;() gin.HandlerFunc {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		t := time.&lt;span style=&#34;color:#008b45&#34;&gt;Now&lt;/span&gt;()

		&lt;span style=&#34;color:#228b22&#34;&gt;// 在gin上下文中定义变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		c.&lt;span style=&#34;color:#008b45&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;12345&amp;#34;&lt;/span&gt;)

		&lt;span style=&#34;color:#228b22&#34;&gt;// 请求前
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
		c.&lt;span style=&#34;color:#008b45&#34;&gt;Next&lt;/span&gt;()&lt;span style=&#34;color:#228b22&#34;&gt;//处理请求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
		&lt;span style=&#34;color:#228b22&#34;&gt;// 请求后
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		latency := time.&lt;span style=&#34;color:#008b45&#34;&gt;Since&lt;/span&gt;(t)
		log.&lt;span style=&#34;color:#008b45&#34;&gt;Print&lt;/span&gt;(latency)

		&lt;span style=&#34;color:#228b22&#34;&gt;// access the status we are sending
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		status := c.Writer.&lt;span style=&#34;color:#008b45&#34;&gt;Status&lt;/span&gt;()
		log.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(status)
	}
}
&lt;span style=&#34;color:#228b22&#34;&gt;//使用
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	r := gin.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;()
	r.&lt;span style=&#34;color:#008b45&#34;&gt;Use&lt;/span&gt;(&lt;span style=&#34;color:#008b45&#34;&gt;Logger&lt;/span&gt;())

	r.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		&lt;span style=&#34;color:#228b22&#34;&gt;//获取gin上下文中的变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		example := c.&lt;span style=&#34;color:#008b45&#34;&gt;MustGet&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt;).(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;)

		&lt;span style=&#34;color:#228b22&#34;&gt;// 会打印: &amp;#34;12345&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		log.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(example)
	})

	&lt;span style=&#34;color:#228b22&#34;&gt;// 监听运行于 0.0.0.0:8080
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	r.&lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中间件参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内置中间件
1.简单认证BasicAuth&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 模拟私有数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; secrets = gin.H{
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;:    gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;foo@bar.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;phone&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123433&amp;#34;&lt;/span&gt;},
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;austin&amp;#34;&lt;/span&gt;: gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;austin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;phone&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;666&amp;#34;&lt;/span&gt;},
	&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lena&amp;#34;&lt;/span&gt;:   gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lena@guapa.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;phone&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;523443&amp;#34;&lt;/span&gt;},
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
	r := gin.&lt;span style=&#34;color:#008b45&#34;&gt;Default&lt;/span&gt;()

	&lt;span style=&#34;color:#228b22&#34;&gt;// 使用 gin.BasicAuth 中间件，设置授权用户
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	authorized := r.&lt;span style=&#34;color:#008b45&#34;&gt;Group&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/admin&amp;#34;&lt;/span&gt;, gin.&lt;span style=&#34;color:#008b45&#34;&gt;BasicAuth&lt;/span&gt;(gin.Accounts{
		&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;:    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;austin&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1234&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lena&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello2&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;manu&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4321&amp;#34;&lt;/span&gt;,
	}))

	&lt;span style=&#34;color:#228b22&#34;&gt;// 定义路由
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	authorized.&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/secrets&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
		&lt;span style=&#34;color:#228b22&#34;&gt;// 获取提交的用户名（AuthUserKey）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		user := c.&lt;span style=&#34;color:#008b45&#34;&gt;MustGet&lt;/span&gt;(gin.AuthUserKey).(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;)
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; secret, ok := secrets[user]; ok {
			c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(http.StatusOK, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: user, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;: secret})
		} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			c.&lt;span style=&#34;color:#008b45&#34;&gt;JSON&lt;/span&gt;(http.StatusOK, gin.H{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: user, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;NO SECRET :(&amp;#34;&lt;/span&gt;})
		}
	})

	&lt;span style=&#34;color:#228b22&#34;&gt;// Listen and serve on 0.0.0.0:8080
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	r.&lt;span style=&#34;color:#008b45&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.&lt;/p&gt;
&lt;h2 id=&#34;数据库&#34;&gt;数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mongodb&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Golang常用的Mongodb驱动为 mgo.v2, &lt;a href=&#34;http://godoc.org/gopkg.in/mgo.v2&#34;&gt;查看文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mgo 使用方式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//定义 Person 结构，字段须为首字母大写
type Person struct {
	Name string
	Phone string
}

router.GET(&amp;quot;/mongo&amp;quot;, func(context *gin.Context){
	//可本地可远程，不指定协议时默认为http协议访问，此时需要设置 mongodb 的nohttpinterface=false来打开httpinterface。
	//也可以指定mongodb协议，如 &amp;quot;mongodb://127.0.0.1:27017&amp;quot;
	var MOGODB_URI = &amp;quot;127.0.0.1:27017&amp;quot;
	//连接
	session, err := mgo.Dial(MOGODB_URI)
	//连接失败时终止
	if err != nil {
        panic(err)
    }
	//延迟关闭，释放资源
	defer session.Close()
	//设置模式
    session.SetMode(mgo.Monotonic, true)
	//选择数据库与集合
    c := session.DB(&amp;quot;adatabase&amp;quot;).C(&amp;quot;acollection&amp;quot;)
    //插入文档
    err = c.Insert(&amp;amp;Person{Name:&amp;quot;Ale&amp;quot;, Phone:&amp;quot;+55 53 8116 9639&amp;quot;},
               &amp;amp;Person{Name:&amp;quot;Cla&amp;quot;,  Phone:&amp;quot;+55 53 8402 8510&amp;quot;})
	//出错判断
    if err != nil {
            log.Fatal(err)
    }
	//查询文档
    result := Person{}
    //注意mongodb存储后的字段大小写问题
    err = c.Find(bson.M{&amp;quot;name&amp;quot;: &amp;quot;Ale&amp;quot;}).One(&amp;amp;result)
    //出错判断
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(&amp;quot;Phone:&amp;quot;, result.Phone)
})
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;扩展包&#34;&gt;扩展包&lt;/h2&gt;
&lt;h3 id=&#34;常用方法&#34;&gt;常用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;gin&lt;/li&gt;
&lt;li&gt;Context&lt;/li&gt;
&lt;/ul&gt;
- https://blog.riba2534.cn/blog/2019/gin%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/ - </description>
        </item>
    
    
    
        <item>
        <title>Bash常用快捷键</title>
        <link>https://blog.riba2534.cn/blog/2019/bash%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
        <pubDate>Tue, 16 Jul 2019 11:55:25 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/bash%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/bash%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/ -&lt;h2 id=&#34;移动光标&#34;&gt;移动光标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl+b&lt;/code&gt;: 前移一个字符(backward)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+f&lt;/code&gt;: 后移一个字符(forward)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt+b&lt;/code&gt;: 前移一个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt+f&lt;/code&gt;: 后移一个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+a&lt;/code&gt;: 移到行首（a是首字母）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+e&lt;/code&gt;: 移到行尾（end）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+xx&lt;/code&gt;: 行首到当前光标替换&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编辑命令&#34;&gt;编辑命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt+.&lt;/code&gt;: 粘帖最后一次命令最后的参数（通常用于&lt;code&gt;mkdir long-long-dir&lt;/code&gt;后, &lt;code&gt;cd&lt;/code&gt;配合着&lt;code&gt;alt+.&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt+d&lt;/code&gt;: 删除当前光标到临近右边单词开始(delete)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+w&lt;/code&gt;: 删除当前光标到临近左边单词结束(word)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+h&lt;/code&gt;: 删除光标前一个字符（相当于backspace）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+d&lt;/code&gt;: 删除光标后一个字符（相当于delete）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+u&lt;/code&gt;: 删除光标左边所有&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+k&lt;/code&gt;: 删除光标右边所有&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+l&lt;/code&gt;: 清屏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+shift+c&lt;/code&gt;: 复制（相当于鼠标左键拖拽）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+shift+v&lt;/code&gt;: 粘贴（相当于鼠标中键）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl+n&lt;/code&gt;: 下一条命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+p&lt;/code&gt;: 上一条命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt+n&lt;/code&gt;: 下一条命令（例如输入&lt;code&gt;ls&lt;/code&gt;, 然后按&amp;rsquo;alt+n&#39;, 就会找到历史记录下的&lt;code&gt;ls&lt;/code&gt;命令）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt+p&lt;/code&gt;: 上一条命令（跟&lt;code&gt;alt+n&lt;/code&gt;相似）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift+PageUp&lt;/code&gt;: 向上翻页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift+PageDown&lt;/code&gt;: 向下翻页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+r&lt;/code&gt;: 进入历史查找命令记录， 输入关键字。 多次按返回下一个匹配项&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zsh&#34;&gt;zsh&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;: 列出以前的打开的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt;: jump到以前某个目录，模糊匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vim&#34;&gt;Vim&lt;/h2&gt;
&lt;h3 id=&#34;移动光标-1&#34;&gt;移动光标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: 向前移动一个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt;: 向后移动一个单词&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除&#34;&gt;删除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dw&lt;/code&gt;: 从当前光标开始删除到下一个单词头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;de&lt;/code&gt;: 从当前光标开始删除到单词尾&lt;/li&gt;
&lt;/ul&gt;
- https://blog.riba2534.cn/blog/2019/bash%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/ - </description>
        </item>
    
    
    
        <item>
        <title>乐观锁和悲观锁</title>
        <link>https://blog.riba2534.cn/blog/2019/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</link>
        <pubDate>Tue, 16 Jul 2019 01:13:06 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/ -&lt;h1 id=&#34;乐观锁与悲观锁&#34;&gt;乐观锁与悲观锁&lt;/h1&gt;
&lt;h3 id=&#34;何谓悲观锁与乐观锁&#34;&gt;何谓悲观锁与乐观锁&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;乐观锁对应于生活中乐观的人总是想着事情往好的方向发展，悲观锁对应于生活中悲观的人总是想着事情往坏的方向发展。这两种人各有优缺点，不能不以场景而定说一种人好于另外一种人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;悲观锁&#34;&gt;悲观锁&lt;/h4&gt;
&lt;p&gt;总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（&lt;strong&gt;共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程&lt;/strong&gt;）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中&lt;code&gt;synchronized&lt;/code&gt;和&lt;code&gt;ReentrantLock&lt;/code&gt;等独占锁就是悲观锁思想的实现。&lt;/p&gt;
&lt;h4 id=&#34;乐观锁&#34;&gt;乐观锁&lt;/h4&gt;
&lt;p&gt;总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。&lt;strong&gt;乐观锁适用于多读的应用类型，这样可以提高吞吐量&lt;/strong&gt;，像数据库提供的类似于&lt;strong&gt;write_condition机制&lt;/strong&gt;，其实都是提供的乐观锁。在Java中&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;包下面的原子变量类就是使用了乐观锁的一种实现方式&lt;strong&gt;CAS&lt;/strong&gt;实现的。&lt;/p&gt;
&lt;h4 id=&#34;两种锁的使用场景&#34;&gt;两种锁的使用场景&lt;/h4&gt;
&lt;p&gt;从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像&lt;strong&gt;乐观锁适用于写比较少的情况下（多读场景）&lt;/strong&gt;，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以&lt;strong&gt;一般多写的场景下用悲观锁就比较合适。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;乐观锁常见的两种实现方式&#34;&gt;乐观锁常见的两种实现方式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;乐观锁一般会使用版本号机制或CAS算法实现。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1-版本号机制&#34;&gt;1. 版本号机制&lt;/h4&gt;
&lt;p&gt;一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举一个简单的例子：&lt;/strong&gt; 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 100 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 50（ 100-50 ）。&lt;/li&gt;
&lt;li&gt;在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 20 （ 100-20 ）。&lt;/li&gt;
&lt;li&gt;操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。&lt;/li&gt;
&lt;li&gt;操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。&lt;/p&gt;
&lt;h4 id=&#34;2-cas算法&#34;&gt;2. CAS算法&lt;/h4&gt;
&lt;p&gt;即&lt;strong&gt;compare and swap（比较与交换）&lt;/strong&gt;，是一种有名的&lt;strong&gt;无锁算法&lt;/strong&gt;。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。&lt;strong&gt;CAS算法&lt;/strong&gt;涉及到三个操作数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要读写的内存值 V&lt;/li&gt;
&lt;li&gt;进行比较的值 A&lt;/li&gt;
&lt;li&gt;拟写入的新值 B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个&lt;strong&gt;自旋操作&lt;/strong&gt;，即&lt;strong&gt;不断的重试&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;乐观锁的缺点&#34;&gt;乐观锁的缺点&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ABA 问题是乐观锁一个常见的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1-aba-问题&#34;&gt;1 ABA 问题&lt;/h4&gt;
&lt;p&gt;如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 &lt;strong&gt;&amp;ldquo;ABA&amp;quot;问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JDK 1.5 以后的 &lt;code&gt;AtomicStampedReference 类&lt;/code&gt;就提供了此种能力，其中的 &lt;code&gt;compareAndSet 方法&lt;/code&gt;就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。&lt;/p&gt;
&lt;h4 id=&#34;2-循环时间长开销大&#34;&gt;2 循环时间长开销大&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。&lt;/strong&gt; 如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。&lt;/p&gt;
&lt;h4 id=&#34;3-只能保证一个共享变量的原子操作&#34;&gt;3 只能保证一个共享变量的原子操作&lt;/h4&gt;
&lt;p&gt;CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5开始，提供了&lt;code&gt;AtomicReference类&lt;/code&gt;来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用&lt;code&gt;AtomicReference类&lt;/code&gt;把多个共享变量合并成一个共享变量来操作。&lt;/p&gt;
&lt;h3 id=&#34;cas与synchronized的使用情景&#34;&gt;CAS与synchronized的使用情景&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简单的来说CAS适用于写比较少的情况下（多读场景，冲突一般较少），synchronized适用于写比较多的情况下（多写场景，冲突一般较多）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu资源；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。&lt;/li&gt;
&lt;li&gt;对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;补充： Java并发编程这个领域中synchronized关键字一直都是元老级的角色，很久之前很多人都会称它为 &lt;strong&gt;“重量级锁”&lt;/strong&gt; 。但是，在JavaSE 1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的 &lt;strong&gt;偏向锁&lt;/strong&gt; 和 &lt;strong&gt;轻量级锁&lt;/strong&gt; 以及其它&lt;strong&gt;各种优化&lt;/strong&gt;之后变得在某些情况下并不是那么重了。synchronized的底层实现主要依靠 &lt;strong&gt;Lock-Free&lt;/strong&gt; 的队列，基本思路是 &lt;strong&gt;自旋后阻塞&lt;/strong&gt;，&lt;strong&gt;竞争切换后继续竞争锁&lt;/strong&gt;，&lt;strong&gt;稍微牺牲了公平性，但获得了高吞吐量&lt;/strong&gt;。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。&lt;/p&gt;
- https://blog.riba2534.cn/blog/2019/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/ - </description>
        </item>
    
    
    
        <item>
        <title>Golang 中的 Map 原理</title>
        <link>https://blog.riba2534.cn/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/</link>
        <pubDate>Sun, 14 Jul 2019 17:12:00 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/ -&lt;h2 id=&#34;什么是映射函数&#34;&gt;什么是映射函数&lt;/h2&gt;
&lt;p&gt;要明白 map 是如何工作的的，我们需要先讨论一下 &lt;em&gt;map 函数&lt;/em&gt;。一个 map 函数用以将一个值映射到另一个值。给定一个值，我们叫 &lt;em&gt;key&lt;/em&gt;，它就会返回另外一个值，称为 &lt;em&gt;value&lt;/em&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;map(key) → value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，map 还没什么用，除非我们放入一些数据。我们需要一个函数来将数据添加到 map 中&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;insert(map, key, value)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和一个函数从 map 中移除数据&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;delete(map, key)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在实现上还有一些有趣的点比如查询某个 key 当前在 map 中是否存在，但这已经超出了我们今天要讨论的范围。相反我们今天只专注于这几个点；插入，删除和如何将 key 映射到 value。&lt;/p&gt;
&lt;h2 id=&#34;go-中的-map-是一个-hashmap&#34;&gt;Go 中的 map 是一个 hashmap&lt;/h2&gt;
&lt;p&gt;Hashmap 是我要讨论的的 map 的一种特定实现，因为这也是 Go runtime 中所采用的实现方式。Hashmap 是一种经典的数据结构，提供了平均 O(1) 的查询时间复杂度，即使在最糟的情况下也有 O(n) 的复杂度。也就是说，正常情况下，执行 map 函数的时间是个常量。&lt;/p&gt;
&lt;p&gt;这个常量的大小部分取决于 hashmap 的设计方式，而 map 存取时间从 O(1) 到 O(n) 的变化则取决于它的 &lt;em&gt;hash 函数&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;hash-函数&#34;&gt;hash 函数&lt;/h3&gt;
&lt;p&gt;什么是 &lt;em&gt;hash 函数&lt;/em&gt; ？一个 hash 函数用以接收一个未知长度的 key 然后返回一个固定长度的 value。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hash(key) → integer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个 &lt;em&gt;hash value&lt;/em&gt; 大多数情况下都是一个整数，原因我们后边会说到。&lt;/p&gt;
&lt;p&gt;Hash 函数和映射函数是相似的。它们都接收一个 key 然后返回一个 value。然而 hash 函数的不同之处在于，它返回的 value 来源于 key，而不是关联于 key。&lt;/p&gt;
&lt;h3 id=&#34;hash-函数的重要特点&#34;&gt;hash 函数的重要特点&lt;/h3&gt;
&lt;p&gt;很有必要讨论一下一个好的 hash 函数的特点，因为 hash 函数的质量决定了其 map 函数运行复杂度是否接近于 O(1)。&lt;/p&gt;
&lt;p&gt;Hashmap 的使用方面有两个重要的特点。第一个是&lt;em&gt;稳定性&lt;/em&gt;。Hash 函数必须是稳定的。给定相同的 key，你的 hash 函数必须返回相同的值。否则你无法查找到你放入 map 中的数据。&lt;/p&gt;
&lt;p&gt;第二个特点是&lt;em&gt;良好的分布&lt;/em&gt;。给定两个相类似的 key，结果应该是极其不同的。这很重要，因为有两点原因。第一，跟我们稍后会看到的一样，hashmap 中的 value 值应当均匀地分布于 buckets 之间，否则存取的复杂度不会是 O(1)。第二，由于用户一定程度上可以控制 hash 函数的输入，它们也就能控制 hash 函数的输出。这就会导致糟糕的分布，在某些语言中是 DDoS 攻击的一种方式。这项特点也被叫做 &lt;em&gt;碰撞抵抗性（collision resistance）&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;hashmap-的数据结构&#34;&gt;hashmap 的数据结构&lt;/h3&gt;
&lt;p&gt;关于 hashmap 的第二部分来说说数据是如何存储的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2018/6/29/1644962e4cb94838?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;hashmap-data-structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;经典的 hashmap 结构是一个 bucket 数组，其中的每项包含一个指针指向一个 key/value entry 数组。在当前例子中我们的 hashmap 中有 8 个 bucket（Go 语言即如此实现），并且每个 bucket 最多持有 8 个 key/value entry（同样也是 Go 语言的实现）。使用 2 的次方便于做位掩码和移位，而不必做昂贵的除法操作。&lt;/p&gt;
&lt;p&gt;因为 entry 被添加到 map 中，假定有一个良好分布的 hash 函数，那么 buckets 大致会被均匀地填充。一旦 bucket 中的 entry 数量超过总数的某个百分比，也就是所说的 &lt;em&gt;负载因子（load factor）&lt;/em&gt;，那么 map 就会翻倍 bucket 的数量并重新分配原先的 entry。&lt;/p&gt;
&lt;p&gt;记住这个数据结构。假设我们现在有一个 map 用以存储项目名和对应的 Github star 数目，那么我们要如何往 map 中插入一个 value 呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2018/6/29/1644962e4c998ad9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;insert-project-stars&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们从 key 开始，把它传入 hash 函数，然后做掩码操作只取最低的几位来获取到 bucket 数组正确位置的偏移量。这也是要放入的 entry 所在的 bucket，它的 hash 值以 3（二进制 011） 结束。最终我们遍历这个 bucket 的 entry 列表直到我们找到一个空的位置，然后插入我们的 key 和 value。如果 key 已经存在了，我们就覆盖 value。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2018/6/29/1644962e4cabf7c5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;map(moby/moby)&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，我们仍然用这个示意图来从 map 中查找 value。过程很相似。我们先将 key 做 hash 操作。因为我们的 bucket 数组包含 8 个元素，所以我们取最低 3 位，也就是第 5 号 bucket （二进制 101）。如果我们的 hash 函数是正确的，那么字符串 &amp;ldquo;moby/moby&amp;rdquo; 做 hash 操作之后得到的值永远是相同的。所以我们知道 key 不会存在于其他 bucket 中。现在我们再从 bucket 的 entry 列表中通过比较 key 做一次线性查找就能得到结果了。&lt;/p&gt;
&lt;h3 id=&#34;hashmap-的四个要点&#34;&gt;hashmap 的四个要点&lt;/h3&gt;
&lt;p&gt;这是个经典 hashmap 结构的比较高层的解释。我们已经看到了，要实现一个 hashmap 有四个要点；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你需要一个给 key 做计算的 hash 函数。&lt;/li&gt;
&lt;li&gt;你需要一个判断 key 相等的算法。&lt;/li&gt;
&lt;li&gt;你需要知道 key 的大小。&lt;/li&gt;
&lt;li&gt;你需要知道 value 的大小，因为这同样影响了 bucket 结构的大小。编译器需要知道 bucket 结构的大小，这决定了当你遍历或者新增数据时内存中的步进值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;其他语言中的-hashmap&#34;&gt;其他语言中的 hashmap&lt;/h2&gt;
&lt;p&gt;在讨论 Go 语言对于 hashmap 的实现之前，我想先简单介绍一下其他两个编程语言中是如何实现 hashmap 的。我选择了这两门语言，因为它们都提供了独立的 map 类型来适应各种不同的 key 和 value 类型。&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;p&gt;我们要讨论的第一个语言是 C++。C++ 标准模版库（STL）提供了 &lt;code&gt;std::unordered_map&lt;/code&gt; 通常作为 hashmap 的实现来使用。&lt;/p&gt;
&lt;p&gt;这是 &lt;code&gt;std::unordered_map&lt;/code&gt; 的的定义。这是一个模版，所以参数实际的值取决于模版是如何初始化的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;template&amp;lt;
    class Key,                             // the type of the key
    class T,                               // the type of the value
    class Hash = std::hash&amp;lt;Key&amp;gt;,            // the hash function
    class KeyEqual = std::equal_to&amp;lt;Key&amp;gt;,    // the key equality function
    class Allocator = std::allocator&amp;lt; std::pair&amp;lt;const Key, T&amp;gt; &amp;gt;
&amp;gt; class unordered_map;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以讲的有很多，但比较重要的有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模版接收了 key 和 value 的类型作为参数，所以知道它们的大小。&lt;/li&gt;
&lt;li&gt;模版有一个 key 类型的 &lt;code&gt;std::hash&lt;/code&gt; 函数，所以它知道如何 hash 传给它的 key 值。&lt;/li&gt;
&lt;li&gt;模版还有一个 key 类型的 &lt;code&gt;std::equal_to&lt;/code&gt; 函数，所以知道怎么比较两个 key 值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在我们知道了在 C++ 的 &lt;code&gt;std::unordered_map&lt;/code&gt; 中 hashmap 的四个要点是如何传达给编译器的了，所以我们来看一下它是如何实际工作的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2018/6/29/1644962e4cbc28d1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;std::unordered_map&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先我们将 key 传给 &lt;code&gt;std::hash&lt;/code&gt; 函数以得到 key 的 hash 值。然后做掩码并取到 bucket 数组中的序号，接着再遍历对应 bucket 的 entry 列表并用 &lt;code&gt;std::equal_to&lt;/code&gt; 函数来比较 key。&lt;/p&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;p&gt;我们要讨论的第二个语言是 Java。不出所料，在 Java 中 hashmap 类型就叫做 &lt;code&gt;java.util.Hashmap&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 Java 中，&lt;code&gt;java.util.Hashmap&lt;/code&gt; 只能操作对象，因为在 Java 中几乎所有的东西都是 &lt;code&gt;java.lang.Object&lt;/code&gt; 的子类。由于在 Java 中所有对象都起源于 &lt;code&gt;java.lang.Object&lt;/code&gt;，所以可以继承或者重写 &lt;code&gt;hashCode&lt;/code&gt; 和 &lt;code&gt;equals&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;然而你不能直接存储 8 个基本类型；&lt;code&gt;boolean&lt;/code&gt;，&lt;code&gt;int&lt;/code&gt;，&lt;code&gt;short&lt;/code&gt;，&lt;code&gt;long&lt;/code&gt;，&lt;code&gt;byte&lt;/code&gt;，&lt;code&gt;char&lt;/code&gt;，&lt;code&gt;float&lt;/code&gt; 和 &lt;code&gt;double&lt;/code&gt;，因为它们不是 &lt;code&gt;java.lang.Object&lt;/code&gt; 的子类。你既不能将它们作为 key，也不能将它们作为 value 来存储。为了突破这种限制，它们会被隐式地转换为代表它们各自的对象。也叫做装箱。&lt;/p&gt;
&lt;p&gt;先把这种限制放一边，让我们来看一下在 Java 的 hashmap 中查找是怎样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2018/6/29/1644962ee2008db9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;java_hashmap&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先我们调用 key 的 &lt;code&gt;hashCode&lt;/code&gt; 方法来获取它的 hash 值。然后做掩码操作，获取到 bucket 数组中的对应位置，里面存放了一个指向 &lt;code&gt;Entry&lt;/code&gt; 的指针。&lt;code&gt;Entry&lt;/code&gt; 中有一个 key，一个 value，还有一个指向下一个 &lt;code&gt;Entry&lt;/code&gt; 的指针，形成了一个 linked list。&lt;/p&gt;
&lt;h2 id=&#34;权衡&#34;&gt;权衡&lt;/h2&gt;
&lt;p&gt;现在我们知道 C++ 和 Java 是如何实现 hashmap 的了，让我们来比较一下它们各自的优缺点。&lt;/p&gt;
&lt;h3 id=&#34;c-templated&#34;&gt;C++ templated&lt;/h3&gt;
&lt;p&gt;std::unordered_map&lt;/p&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;key 和 value 类型的大小在编译期间就确定了。&lt;/li&gt;
&lt;li&gt;数据结构的大小总是确定的，不需要装箱操作。&lt;/li&gt;
&lt;li&gt;由于代码在编译期间就定下来了，所以其他编译优化操作例如内联，常数折叠和死代码删除就可以介入了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，C++ 中的 map 和自己手写的为每种 key/value 类型组合定制的 map 一样快速高效，因为它其实就是这样的。&lt;/p&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;代码膨胀。每个不同的 map 都是不同类型的。如果你的代码中有 N 个 map 类型，在你的代码库中你也就需要有 N 份 map 代码的拷贝。&lt;/li&gt;
&lt;li&gt;编译时间膨胀。由于头文件和模版的工作方式，每个使用了 &lt;code&gt;std::unordered_map&lt;/code&gt; 代码的文件中其实现都需要被生成，编译和优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-util-hashmap&#34;&gt;Java util Hashmap&lt;/h3&gt;
&lt;h4 id=&#34;优点-1&#34;&gt;优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一份 map 代码的实现可以服务于任何 java.util.Object 的子类。只需要编译一份 java.util.Object，在每个 class 文件中就都可以引用了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点-1&#34;&gt;缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;所有东西必须是对象，即使它不是。这意味着基本类型的 map 必须用通过装箱操作转化为对象。装箱操作会增加垃圾回收的压力，并且额外的指针引用会增加缓存压力（每个对象都必须通过另外的指针来查找）。&lt;/li&gt;
&lt;li&gt;Buckets 是以 linked lists 而不是顺序数组的方式存储的。这会导致在对象比较期间产生大量的指针追踪操作。&lt;/li&gt;
&lt;li&gt;Hash 和 equals 函数需要代码编写者来实现。不正确的 hash 和 equals 函数会减慢 map 的运行速度，甚至导致 map 的行为错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;go-中-hashmap-的实现&#34;&gt;Go 中 hashmap 的实现&lt;/h2&gt;
&lt;p&gt;现在，我们来讨论一下 Go 中 map 的实现。它保留了许多我们刚才讨论的实现中的优点，却没有那些缺点。&lt;/p&gt;
&lt;p&gt;和 C++ 和 Java 一样， Go 中的 hashmap 是使用 Go 语言编写的。但是 Go 不支持范型，所以我们要如何来编写一个 hashmap 能够服务于（几乎）任何类型呢？&lt;/p&gt;
&lt;h3 id=&#34;go-runtime-使用了-interface-吗&#34;&gt;Go runtime 使用了 interface{} 吗？&lt;/h3&gt;
&lt;p&gt;不，Go runtime 并没有使用 interface{} 来实现 hashmap。虽然像 &lt;code&gt;container/{list,heap}&lt;/code&gt; 这些包中使用了 interface{}，但 runtime 的 map 却没有使用。&lt;/p&gt;
&lt;h3 id=&#34;编译器是否使用了代码生成&#34;&gt;编译器是否使用了代码生成？&lt;/h3&gt;
&lt;p&gt;不，在 Go 语言可执行文件中只有一份 map 的实现。和 Java 不同，它并没有对 &lt;code&gt;interface{}&lt;/code&gt; 做装箱操作。所以它是怎么工作的呢？&lt;/p&gt;
&lt;p&gt;这要分成两部分来回答。它需要编译器和 runtime （运行时）之间的相互协作。&lt;/p&gt;
&lt;h3 id=&#34;编译时间重写&#34;&gt;编译时间重写&lt;/h3&gt;
&lt;p&gt;第一部分我们需要先理解 runtime 包中对于 map 的实现是如何做查找，插入和删除操作的。在编译期间 map 的操作被重写去调用了 runtime。例如。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;v := m[&amp;quot;key&amp;quot;]     → runtime.mapaccess1(m, &amp;quot;key&amp;quot;, &amp;amp;v)
v, ok := m[&amp;quot;key&amp;quot;] → runtime.mapaccess2(m, &amp;quot;key&amp;quot;, &amp;amp;v, &amp;amp;ok)
m[&amp;quot;key&amp;quot;] = 9001   → runtime.mapinsert(m, &amp;quot;key&amp;quot;, 9001)
delete(m, &amp;quot;key&amp;quot;)  → runtime.mapdelete(m, &amp;quot;key&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得注意的是，channel 中也做了相同的事，slice 却没有。&lt;/p&gt;
&lt;p&gt;这是因为 channel 是复杂的数据类型。发送，接收和 &lt;code&gt;select&lt;/code&gt; 操作和调度器之间都有复杂的交互，所以就被委托给了 runtime。相比较而言，slice 就简单很多了。像 slice 的存取，&lt;code&gt;len&lt;/code&gt; 和 &lt;code&gt;cap&lt;/code&gt; 这些操作编译器就自己做了，而像 &lt;code&gt;copy&lt;/code&gt; 和 &lt;code&gt;append&lt;/code&gt; 这种复杂的还是委托给了 runtime。&lt;/p&gt;
&lt;h3 id=&#34;map-代码解释&#34;&gt;map 代码解释&lt;/h3&gt;
&lt;p&gt;现在我们知道编译器重写了 map 的操作去调用了 runtime。我们也知道了在 runtime 内部，有一个叫 &lt;code&gt;mapaccess1&lt;/code&gt; 的函数，一个叫 &lt;code&gt;mapaccess2&lt;/code&gt; 的函数等等。&lt;/p&gt;
&lt;p&gt;所以，编译器是如何重写&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;v := m[&amp;quot;key&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;runtime.mapaccess(m, &amp;quot;key&amp;quot;, &amp;amp;v)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;却没有使用 &lt;code&gt;interface{}&lt;/code&gt; 的呢？要解释 Go 中的 map 类型是如何工作的最简单的函数是给你看一下 &lt;code&gt;runtime.mapaccess1&lt;/code&gt; 的定义。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们来过一下这些参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; 是指向你提供的作为 key 值的指针。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; 是个指向 &lt;code&gt;runtime.hmap&lt;/code&gt; 结构的指针。&lt;code&gt;hmap&lt;/code&gt; 是一个持有 buckets 和其他一些值的 runtime 的 hashmap 结构。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; 是个指向 &lt;code&gt;maptype&lt;/code&gt; 的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么我们已经有了 &lt;code&gt;*hmap&lt;/code&gt; 之后还需要一个 &lt;code&gt;*maptype&lt;/code&gt;？&lt;code&gt;*maptype&lt;/code&gt; 是个特殊的东西，使得通用的 &lt;code&gt;*hmap&lt;/code&gt; 可以服务于（几乎）任意 key 和 value 类型的组合。在你的程序中对于每一个独立的 map 定义都会有一个特定的 &lt;code&gt;maptype&lt;/code&gt; 值。例如，有一个 &lt;code&gt;maptype&lt;/code&gt; 值描述了从 &lt;code&gt;strings&lt;/code&gt; 到 &lt;code&gt;ints&lt;/code&gt; 的映射，另一个描述了 &lt;code&gt;strings&lt;/code&gt; 到 &lt;code&gt;http.Headers&lt;/code&gt; 的映射，等等。&lt;/p&gt;
&lt;p&gt;C++ 中，对于每一个独立的 map 定义都有一个完整的实现。而 Go 并非如此，它在编译期间创建了一个 &lt;code&gt;maptype&lt;/code&gt; 并在调用 runtime 的 map 函数的时候使用了它。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type maptype struct {
    typ           _type
    key           *_type
    elem          *_type
    bucket        *_type // internal type representing a hash bucket
    hmap          *_type // internal type representing a hmap
    keysize       uint8  // size of key slot
    indirectkey   bool   // store ptr to key instead of key itself
    valuesize     uint8  // size of value slot
    indirectvalue bool   // store ptr to value instead of value itself
    bucketsize    uint16 // size of bucket
    reflexivekey  bool   // true if k==k for all keys
    needkeyupdate bool   // true if we need to update key on overwrite
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每个 &lt;code&gt;maptype&lt;/code&gt; 中都包含了特定 map 中从 key 映射到 elem 所需的各种属性细节。它包含了关于 key 和 element 的信息。&lt;code&gt;maptype.key&lt;/code&gt; 包含了指向我们传入的 key 的指针的信息。我们称之为 &lt;em&gt;类型描述符&lt;/em&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type _type struct {
    size       uintptr
    ptrdata    uintptr // size of memory prefix holding all pointers
    hash       uint32
    tflag      tflag
    align      uint8
    fieldalign uint8
    kind       uint8
    alg        *typeAlg
    // gcdata stores the GC type data for the garbage collector.
    // If the KindGCProg bit is set in kind, gcdata is a GC program.
    // Otherwise it is a ptrmask bitmap. See mbitmap.go for details.
    gcdata     *byte
    str        nameOff
    ptrToThis  typeOff
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 &lt;code&gt;_type&lt;/code&gt; 类型中，包含了它的大小。这很重要，因为我们只有一个指向 key 的指针，而不知道它实际多大并且是什么类型。它到底是一个整数，还是一个结构体，等等。我们也需要知道如何比较这种类型的值和如何 hash 这种类型的值，这也就是 &lt;code&gt;_type.alg&lt;/code&gt; 字段的意义所在。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type typeAlg struct {
    // function for hashing objects of this type
    // (ptr to object, seed) -&amp;gt; hash
    hash func(unsafe.Pointer, uintptr) uintptr
    // function for comparing objects of this type
    // (ptr to object A, ptr to object B) -&amp;gt; ==?
    equal func(unsafe.Pointer, unsafe.Pointer) bool
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在你的程序中这就是一个服务于特定类型的 &lt;code&gt;typeAlg&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;放在一起来看，这就是（轻微修改，便于理解） &lt;code&gt;runtime.mapaccess1&lt;/code&gt; 函数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// mapaccess1 returns a pointer to h[key].  Never returns nil, instead
// it will return a reference to the zero object for the value type if
// the key is not in the map.
func mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer {
    if h == nil || h.count == 0 {
        return unsafe.Pointer(&amp;amp;zeroVal[0])
    }
    alg := t.key.alg
    hash := alg.hash(key, uintptr(h.hash0))
    m := bucketMask(h.B)
    b := (*bmap)(add(h.buckets, (hash&amp;amp;m)*uintptr(t.bucketsize)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得关注的一点是传递给 &lt;code&gt;alg.hash&lt;/code&gt; 函数的 &lt;code&gt;h.hash0&lt;/code&gt; 参数。&lt;code&gt;h.hash0&lt;/code&gt; 是一个在 map 创建时生成的随机种子，为了防止在 Go runtime 中产生 hash 碰撞。&lt;/p&gt;
&lt;p&gt;任何人都可以阅读 Go 语言的源码，所以可以找到一系列值，使得其使用 Go 语言中的 hash 函数计算后，得到的 hash 值会被放入同一个 bucket 中。种子的存在就为 hash 函数增加了很多随机性，为碰撞攻击提供了一些保护措施。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;我很高兴能在 GoCon 大会上做这个演讲。因为 Go 中的 map 实现是一个介于 C++ 和 Java 之间的权衡，汲取了很多优点同时又没有包含很多缺点。&lt;/p&gt;
&lt;p&gt;和 Java 不同，你可以直接使用基本类型数据，例如字符和整数，而不需要进行装箱操作。和 C++ 不同，在最后的二进制文件中，没有 N 份 &lt;code&gt;runtime.hashmap&lt;/code&gt; 的实现，只有 N 份 &lt;code&gt;runtime.maptype&lt;/code&gt; 的值，显著减少了程序的体积和编译时间。&lt;/p&gt;
&lt;p&gt;现在我想说明的是我不是在试图告诉你 Go 不应该支持范型。我今天的目的是阐述当前 Go 1 的现状和在当前情形下 map 类型的工作方式。现今 Go 语言下 map 的实现是非常高效的，提供了很多模版类型的优点，而没有代码生成和编译时间膨胀的缺点。&lt;/p&gt;
&lt;p&gt;我视之为一次值得学习赞赏的设计案例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你可以在这里找到更多关于 runtime.hmap 结构的内容。[dave.cheney.net/2017/04/30/…](&lt;/li&gt;
&lt;/ol&gt;
- https://blog.riba2534.cn/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/ - </description>
        </item>
    
    
    
        <item>
        <title>GoLang相关的问题以及搜到的解决办法</title>
        <link>https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
        <pubDate>Tue, 07 May 2019 22:11:55 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/ -&lt;h2 id=&#34;golang相关的问题以及搜到的解决办法&#34;&gt;GoLang相关的问题以及搜到的解决办法&lt;/h2&gt;
&lt;p&gt;在使用 golang 的时候，会碰到很多问题，但是自己每一个问题都发个博客这样有点浪费，所以记载一下问题以及解决方法的链接。&lt;/p&gt;
&lt;h3 id=&#34;golang-中反引号tag的作用&#34;&gt;golang 中反引号（tag）的作用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5b338516f265da596e4ceb9e&#34;&gt;Tags in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://studygolang.com/articles/14469&#34;&gt;Golang的Tag语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/ - </description>
        </item>
    
    
    
        <item>
        <title>使用 VSCode 编辑远程服务器文件</title>
        <link>https://blog.riba2534.cn/blog/2019/%E4%BD%BF%E7%94%A8-vscode-%E7%BC%96%E8%BE%91%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 29 Apr 2019 17:02:00 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/%E4%BD%BF%E7%94%A8-vscode-%E7%BC%96%E8%BE%91%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/%E4%BD%BF%E7%94%A8-vscode-%E7%BC%96%E8%BE%91%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/ -&lt;h1 id=&#34;使用-vscode-编辑远程服务器文件&#34;&gt;使用 VSCode 编辑远程服务器文件&lt;/h1&gt;
&lt;p&gt;在远程服务器上使用 vim 编辑文件一直觉得不太顺手，个人比较喜欢用 VSCode  ，终于解决了使用 VSCode 编辑远程文件。&lt;/p&gt;
&lt;p&gt;介绍两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Remote VSCode&lt;/code&gt; 插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SFTP&lt;/code&gt; 插件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;remote-vscode&#34;&gt;Remote VSCode&lt;/h2&gt;
&lt;h3 id=&#34;安装-remote-vscode&#34;&gt;安装 Remote VSCode&lt;/h3&gt;
&lt;p&gt;发现一款插件 Remote VSCode，可以实现这个功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/29/5cc6bad090c28.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如图，好评数还是很多的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先我们打开 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=rafaelmaiolla.remote-vscode&amp;amp;ssr=false#review-details&#34;&gt;Remote VSCode&lt;/a&gt; 这个插件的官方页面，点击安装即可，或者直接在 VSCode 中搜索这个插件。这个动作需要在本地进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们需要在远程服务器上安装 rmate 这个软件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo wget -O /usr/local/bin/rmate https://raw.github.com/aurora/rmate/master/rmate
sudo chmod a+x /usr/local/bin/rmate
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在本机的 VSCode 中按 &lt;code&gt;F1&lt;/code&gt; ,然后输入 &lt;code&gt;Remote: Start server&lt;/code&gt; ,回车后启动服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/04/29/5cc6bbfeb7b8e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按一下 &lt;code&gt;Ctrl+~&lt;/code&gt;打开自带终端， 在 VSCode 的命令行中输入 &lt;code&gt;ssh -R 52698:127.0.0.1:52698 用户名@地址 -p ssh端口(一般是22)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后在终端中找到你要修改的文件，输入 &lt;code&gt;rmate 文件名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;
&lt;p&gt;一般来说，前面的已经够用了，但是如果要进行定制的话，可以打开设置自行修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//-------- Remote VSCode configuration --------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// Port number to use for connection.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;remote.port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;52698&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;,&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;// Launch the server on start up.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;remote.onstartup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;// Address to listen on.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;remote.host&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;// If set to true, error for remote.port already in use won&amp;#39;t be shown anymore.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;remote.dontShowPortAlreadyInUseError&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;sftp&#34;&gt;SFTP&lt;/h2&gt;
&lt;h3 id=&#34;安装-sftp-插件&#34;&gt;安装 &lt;code&gt;SFTP&lt;/code&gt; 插件&lt;/h3&gt;
&lt;p&gt;去插件官方地址点击安装：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=liximomo.sftp&#34;&gt;SFTP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看一下插件的介绍：
&lt;img src=&#34;https://i.loli.net/2019/04/30/5cc7b4c3dbc66.png&#34; alt=&#34;&#34;&gt;
利用 &lt;code&gt;SFTP&lt;/code&gt; 在本地工作区和服务器工作区完全同步。可以在本地工作区点右键上传/下载（一般是自动保持同步）&lt;/p&gt;
&lt;h3 id=&#34;使用-1&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;首先用 &lt;code&gt;VSCODE&lt;/code&gt; 打开一个新的工作区，然后按 &lt;code&gt;F1&lt;/code&gt; 键，运行 &lt;code&gt;SFTP: config&lt;/code&gt; 命令，打开一个配置文件。把里面的内容改成如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;服务器ip地址&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;22&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户名&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;密码&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sftp&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;agent&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;privateKeyPath&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;passphrase&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;passive&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;interactiveAuth&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;remotePath&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;要同步的远程服务器目录&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;uploadOnSave&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;syncMode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;**/.vscode/**&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;**/.git/**&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;**/.DS_Store&amp;#34;&lt;/span&gt;
    ],
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;watcher&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;files&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;glob&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;autoUpload&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;autoDelete&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;修改这几个配置，点击保存即可。这时候可以通过鼠标右键拉取或者上传。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;以上两个插件各有优缺点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remote VSCode&lt;/code&gt; 可以编辑远程服务器的任何文件，没有工作区的限制，可以在平时修改文件中用一下。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SFTP&lt;/code&gt; 正是因为有了工作区的概念，它可以同步一个完整的项目目录，推荐在日常开发中使用。&lt;/li&gt;
&lt;/ol&gt;
- https://blog.riba2534.cn/blog/2019/%E4%BD%BF%E7%94%A8-vscode-%E7%BC%96%E8%BE%91%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/ - </description>
        </item>
    
    
    
        <item>
        <title>到目前为止的春招总结</title>
        <link>https://blog.riba2534.cn/blog/2019/%E5%88%B0%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%E7%9A%84%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93/</link>
        <pubDate>Fri, 22 Mar 2019 22:23:00 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/%E5%88%B0%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%E7%9A%84%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/%E5%88%B0%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%E7%9A%84%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93/ -&lt;h2 id=&#34;到目前为止的春招总结&#34;&gt;到目前为止的春招总结&lt;/h2&gt;
&lt;p&gt;大概是去年 11 月的时候，ACM 退役后开始决定找工作，方向是 c++，在牛客上搜了很多面经。发现找工作要学的东西太多了，所以就比较着急一度以为自己要凉了。然后就开始复习操作系统、计算机网络。网络编程相关东西。寒假刷了一本《剑指offer》和 LeetCode 感觉对找工作比较有用。&lt;/p&gt;
&lt;p&gt;本来没想到这么快的，大概是过年后牛客开始有了20届名企直推专场，听到了金三银四的说法，然后就把能投的公司都投了，这时候在牛客讨论区找到了一个头条内推，然后第二天 hr 就要打电话要面试，我慌了，然后商量了一下把面试时间调到了一个月后。刚开始收到了吉比特的电话，然后把面试时间定到了开学后。然后即开始面试了，没想到吉比特只有一面技术面，然后就 hr 面，然后就收到了offer。然后依图给我打电话要一面，全程在写题，面试官也比较友好。然后过了一周二面三面，当天就发了 offer 。还有就是头条了，头条也是算法题居多。还有一些基础知识，感觉自己比较幸运，头条一面我回答的特别惨，然后面试官竟然让我二面，二面三面答得还比较行，手撕代码也出来了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后收获了三个offer，字节跳动，依图，吉比特。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顺便推广一波我的博客：&lt;a href=&#34;https://blog.csdn.net/riba2534&#34;&gt;https://blog.csdn.net/riba2534&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;部分面经在底下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nowcoder.com/discuss/156612&#34;&gt;吉比特游戏开发实习生一面面经&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nowcoder.com/discuss/161935&#34;&gt;腾讯后台开发实习一面面经&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nowcoder.com/discuss/163077&#34;&gt;头条实习后台开发一面二面面经&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nowcoder.com/discuss/165615&#34;&gt;依图一面二面三面面经&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，感谢牛客，如果没有牛客这个平台，可能真的不知道如何找工作。。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;顺便问下，哪里有头条的已经拿道暑期offer的群，可以拉我一下～&lt;/p&gt;
- https://blog.riba2534.cn/blog/2019/%E5%88%B0%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%E7%9A%84%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93/ - </description>
        </item>
    
    
    
        <item>
        <title>依图一面二面三面面经</title>
        <link>https://blog.riba2534.cn/blog/2019/%E4%BE%9D%E5%9B%BE%E4%B8%80%E9%9D%A2%E4%BA%8C%E9%9D%A2%E4%B8%89%E9%9D%A2%E9%9D%A2%E7%BB%8F/</link>
        <pubDate>Tue, 19 Mar 2019 22:47:19 +0800</pubDate>
        
        <guid>https://blog.riba2534.cn/blog/2019/%E4%BE%9D%E5%9B%BE%E4%B8%80%E9%9D%A2%E4%BA%8C%E9%9D%A2%E4%B8%89%E9%9D%A2%E9%9D%A2%E7%BB%8F/</guid>
        <description>🌀riba2534&#39;s Blog https://blog.riba2534.cn/blog/2019/%E4%BE%9D%E5%9B%BE%E4%B8%80%E9%9D%A2%E4%BA%8C%E9%9D%A2%E4%B8%89%E9%9D%A2%E9%9D%A2%E7%BB%8F/ -&lt;p&gt;2019年03月19日 晚上突然收到 hr 电话要发offer，本来以为都凉了&lt;/p&gt;
&lt;p&gt;感觉依图大部分都是算法题，一二面都写出来了，三面来了一个看起来很厉害的大佬，有自己的办公室，用后面的白板给我出了道物理题还是数学题让我做。&lt;/p&gt;
&lt;p&gt;隔了两周了，问题忘得差不多了，把能记住的写下来。&lt;/p&gt;
&lt;h2 id=&#34;一面&#34;&gt;一面&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;打一段自己熟悉的算法代码，并讲解&lt;/li&gt;
&lt;li&gt;堆和栈的区别&lt;/li&gt;
&lt;li&gt;手撕代码，两个有序数组中找第k大&lt;/li&gt;
&lt;li&gt;手撕代码，一个矩阵填数的模拟题&lt;/li&gt;
&lt;li&gt;剩下的好像问了一些网络和操作系统相关的，忘了，毕竟一周前了&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二面&#34;&gt;二面&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;说一下什么是 I/O 复用&lt;/li&gt;
&lt;li&gt;说一下select 和 epoll&lt;/li&gt;
&lt;li&gt;写题，一个dfs,大意是有一个 n*m 的图，上下左右的值相差 1 可以连成一个块，让你输出一个新图，把每个块用0 1 2 3&amp;hellip;标记。&lt;/li&gt;
&lt;li&gt;一个 1-n 的数组丢了 1 个数，找出来&lt;/li&gt;
&lt;li&gt;一个 1-n 的数组丢了 2 个数，找出来&lt;/li&gt;
&lt;li&gt;一个 1-n 的数组丢了 3 个数，找出来&lt;/li&gt;
&lt;li&gt;还手撕了两个编程题，忘了是啥了&lt;/li&gt;
&lt;li&gt;然后就谈人生，谈一下打比赛的经历&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三面&#34;&gt;三面&lt;/h2&gt;
&lt;p&gt;看起来是个大佬，有自己独立办公室&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分析一下最小生成树复杂度。不是两个算法的复杂度，是最小生成树这个问题本身的复杂度&lt;/li&gt;
&lt;li&gt;分析一下排序这个问题本身的复杂度（不是算法复杂度）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这俩题我都蒙了，不让我扯算法，让我说这个问题本身，我最后扯了扯决策树，然后大概就完了&lt;/p&gt;
&lt;p&gt;还出了一道数学题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;光滑的长为 L 的轨道上，有 n 个无摩擦的小球，每个小球的速度的值一样，但是方向不一样（方向只有左右两个方向），给出每个小球的位置，以及每个小球的方向，问你最后一个小球离开轨道的时间是多少？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后大概扯了扯其他的方面，聊一聊人生。&lt;/p&gt;
- https://blog.riba2534.cn/blog/2019/%E4%BE%9D%E5%9B%BE%E4%B8%80%E9%9D%A2%E4%BA%8C%E9%9D%A2%E4%B8%89%E9%9D%A2%E9%9D%A2%E7%BB%8F/ - </description>
        </item>
    
    
  </channel>
</rss> 