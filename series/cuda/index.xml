<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CUDA on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/series/cuda/</link>
    <description>Recent content in CUDA on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Jul 2023 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/series/cuda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CUDA编程实战</title>
      <link>https://caixiongjiang.github.io/blog/2023/hpc/cuda%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</link>
      <pubDate>Wed, 19 Jul 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/hpc/cuda%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</guid>
      <description>CUDA编程实战 Hello GPU 编写第一个gpu程序
一般来说，CUDA程序是.cu结尾的程序！
hello-gpu.cu:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;stdio.h&amp;gt; void cpu() { printf(&amp;#34;hello cpu\n&amp;#34;); } __global__ void gpu() { printf(&amp;#34;hello gpu\n&amp;#34;); } int main() { cpu(); gpu&amp;lt;&amp;lt;&amp;lt;1, 1&amp;gt;&amp;gt;&amp;gt;(); // 等待cpu和gpu同步 cudaDeviceSynchronize(); } __global__:
__global__关键字代表以下函数将在GPU山运行并全局可调用。 通过我们将在cpu上执行的代码称为主机代码，而在GPU上运行的代码称为设备代码。 注意返回类型为void。使用__global__关键字定义的函数需要返回void类型。 gpu&amp;laquo;&amp;lt;1, 1&amp;raquo;&amp;gt;():
通常，当调用要在GPU上运行的函数时，我们将这种函数称为已启动的核函数。 启动核函数之前必须提供执行的配置，在向核函数传递任何预期参数之前使用&amp;lt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&amp;gt;语法完成配置。 程序员可通过执行配置为核函数启动指定线程层次结构，从而定义线程组（也称为线程块）的数量，以及要在每个线程块中执行的线程数量。这里就代表正在使用包含1线程（第二个配置参数）的1线程块（第一个配置参数）启动核函数。 cudaDeviceSynchronize():
与大部分c/c++代码不同，核函数启动方式为异步：CPU代码将继续执行而无需等待核函数完成启动。 调用CUDA运行时提供的函数cudaDeviceSynchronize将导致主机（cpu）代码暂停，直至设备（GPU）代码执行完成，才能在cpu上恢复执行。 使用nvcc编译、链接、执行
1 nvcc -o hello-gpu hello-gpu.cu -run 看到
1 2 hello cpu hello gpu 说明你编译、链接、执行成功。</description>
    </item>
    
    <item>
      <title>中科大CUDA教程</title>
      <link>https://caixiongjiang.github.io/blog/2023/hpc/%E4%B8%AD%E7%A7%91%E5%A4%A7cuda%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 19 Jul 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/hpc/%E4%B8%AD%E7%A7%91%E5%A4%A7cuda%E6%95%99%E7%A8%8B/</guid>
      <description>中科大CUDA编程 参考资料：
CUDA C Programming Guide，中文翻译见here CUDA C++ Best Practice Guide CPU体系架构概述 现代CPU架构和性能优化 CPU是执行指令和处理数据的器件，能完成基本的逻辑和算术指令。
指令
Example：
算术：add r3,r4 -&amp;gt; r4
访存：load [r4] -&amp;gt; r7
控制：jz end
对于一个编译好的程序，最优化目标： $$ \frac{cycle}{instruction}\times \frac{seconds}{cycle} $$ 总结来说，CPI（每条指令的时钟数）&amp;amp; 时钟周期，注意这两个指标并不独立。
摩尔定律
芯片的集成密度每两年翻一番，成本下降一半。
CPU的处理流程
取址 -&amp;gt; 解码 -&amp;gt; 执行 -&amp;gt; 访存 -&amp;gt; 写回
流水线
使用一个洗衣服的例子，单件衣服总时间 = wash（30min）+ dry（40min）+ fold（20min）
那么洗4件衣服需要的总时间 = 30 + 40 + 40 + 40 + 40 + 20 = 210min
流水线使用的是指令级的并行，可以有效地减少时钟周期 增加了延迟和芯片面积（需要更多的存储） 带来了一些问题：具有依赖关系的指令处理，分支如何处理 旁路（Bypassing）</description>
    </item>
    
    <item>
      <title>Ubuntu CUDA编程环境配置</title>
      <link>https://caixiongjiang.github.io/blog/2023/hpc/ubuntu%E5%AE%89%E8%A3%85cuda%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Fri, 14 Jul 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/hpc/ubuntu%E5%AE%89%E8%A3%85cuda%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>Ubuntu下CUDA环境配置 为了学习CUDA编程，我们需要一套Linux下的CUDA编程环境，需要注意的是我们的Linux下需要直通显卡，所以记住不能使用虚拟机！不能使用虚拟机！不能使用虚拟机！
那为了方便学习，又不能完全抛弃Windows，毕竟我还要写毕业论文。那么双系统就是最好的方案了。
Windows &amp;amp; Ubuntu 双系统 首先，Linux发行版的选择，我建议还是用Ubuntu，毕竟群体多，社区才能维护。
双系统安装参考视频
Ubuntu安装显卡驱动、cuda、cudnn 我使用的配置如下：
Ubuntu：20.04 显卡：RTX3060 CUDA版本：11.7 cudnn版本：8.9.0 显卡驱动版本：535 显卡驱动安装 Ubuntu安装显卡驱动，CUDA，cudnnn参考视频
注意，安装完驱动必须重启！
CUDA和cudnn安装 Ubuntu22.04安装CUDA环境参考文章
CUDA工具包安装
首先进入NVIDIA CUDA Toolkit Archive下载你想要的cuda工具版本，需要根据你系统的版本和显卡驱动版本进行选择，只要支持就ok。
在Ubuntu终端输入:
1 $ nvidia-smi 在显示的CUDA版本代表当前驱动支持的最高版本CUDA，我的最高版本为12.2，所以选择安装的CUDA版本需要小于12.2。
我选择了CUDA11.7的版本： 依次输入命令：
1 $ wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run 下载完包之后，我们要按照第二条命令装CUDA，但是在安装这个之前，你需要安装一下gcc的环境，不然就会缺少依赖报错：
1 2 3 4 $ sudo apt update $ sudo apt install gcc # 顺便安装一下g++ $ sudo apt install g++ 安装cuda包：
1 $ sudo sh cuda_11.7.0_515.43.04_linux.run 安装过程中间会跳出Abort和continue的选项，不要理会，选择continue。
后续又会跳出接受不接受，选择accept，之后便会跳出需要install的选项，盗用一下别人的截图： 需要注意上述出现的Driver是CUDA11.7配套的驱动，但不一定适合显卡，但只需要我们的Driver版本比它高，都是可以用的。选中Driver，按空格去掉x，然后再选择install。
CUDA环境变量配置
打开终端，输入：
1 $ gedit ~/.</description>
    </item>
    
  </channel>
</rss>
