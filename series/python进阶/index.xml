<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>《Python进阶》 on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/series/python%E8%BF%9B%E9%98%B6/</link>
    <description>Recent content in 《Python进阶》 on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 22 Jul 2024 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/series/python%E8%BF%9B%E9%98%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python进阶用法（四）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E5%9B%9B/</link>
      <pubDate>Mon, 22 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E5%9B%9B/</guid>
      <description>Python进阶笔记（四） 切片 废话不多说，直接看例子：
1 2 3 4 5 6 7 8 9 10 11 12 # 注意都是英文冒号 receipt1 = &amp;#34;物品1: 苹果 数量: 5 单价: 3.00元&amp;#34; receipt2 = &amp;#34;物品2: 香蕉 数量: 10 单价: 2.00元&amp;#34; receipt3 = &amp;#34;物品3: 橙子 数量: 3 单价: 5.00元&amp;#34; print(f&amp;#34;item: {receipt1[5:7]}, price: {receipt1[19:23]}&amp;#34;) print(f&amp;#34;item: {receipt2[5:7]}, price: {receipt2[19:23]}&amp;#34;) print(f&amp;#34;item: {receipt3[5:7]}, price: {receipt3[19:23]}&amp;#34;) # item: 苹果, price: 3.00 # item: 香蕉, price: 2.00 # item: 橙子, price: 5.00 上面的例子是为了从字符串中提取名称和价格，但可以看出这种写法明显是不合理的，索引使用的多了，所有的地方都需要进行修改。这里可以使用slice对象进行预先定义：
1 2 3 4 5 6 7 8 9 10 receipt1 = &amp;#34;物品1: 苹果 数量: 5 单价: 3.</description>
    </item>
    
    <item>
      <title>Python中的进程、线程、协程原理和使用探究</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Mon, 22 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>Python中的进程、线程、协程原理和使用探究 </description>
    </item>
    
    <item>
      <title>Python进阶用法（三）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%89/</link>
      <pubDate>Thu, 11 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%89/</guid>
      <description>Python进阶笔记（三） 魔法方法 来看一个例子：
1 2 3 4 print(f&amp;#34;{1+2 = }&amp;#34;) print(f&amp;#34;{&amp;#39;a&amp;#39; + &amp;#39;b&amp;#39; =}&amp;#34;) # 1+2 = 3 # &amp;#39;a&amp;#39; + &amp;#39;b&amp;#39; =&amp;#39;ab&amp;#39; 其实其内部发生了这件事：
1 2 print((x:=1).__add__(2)) print(&amp;#39;a&amp;#39;.__add__(&amp;#39;b&amp;#39;)) 这种内置的方法也可以用于自定义的类中：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from typing import List class ShoppingCart: def __init__(self, items: List[str]): self.items = items def __add__(self, another_cart): new_cart = ShoppingCart(self.items + another_cart.items) return new_cart cart1 = ShoppingCart([&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;]) cart2 = ShoppingCart([&amp;#34;orange&amp;#34;, &amp;#34;pear&amp;#34;]) new_cart = cart1 + cart2 print(new_cart.</description>
    </item>
    
    <item>
      <title>Python进阶用法（二）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%BA%8C/</guid>
      <description>Python进阶笔记（二） Python中“*”的功能 Python中*最常用的便是作为一个运算符号使用，但其实*也可用于实现重复、打包、解包功能。
*的重复功能，看一个例子： 1 2 3 4 print(&amp;#34;hahaha&amp;#34; * 3) # hahahahahahahahaha print([1, 2, 3] * 3) # [1, 2, 3, 1, 2, 3, 1, 2, 3] *的打包功能，它可以将多个值捆绑到一个容器中 1 2 3 4 5 6 numbers = [1, 2, 3, 4, 5] first, *rest = numbers print(first) print(rest) # 1 # [2, 3, 4, 5] 还有一个典型的例子便是返回yaml文件的值时，如果不需要用到全部值，可以使用这个方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import yaml def config_read(): config_path = &amp;#34;.</description>
    </item>
    
    <item>
      <title>Python进阶用法（一）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%80/</link>
      <pubDate>Sun, 23 Jun 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%80/</guid>
      <description>Python进阶笔记（一） 面向对象编程 在之前的Python类编程中，只知道类似的self调用类内方法，今天来学习一下类变量、类方法、静态方法。
类变量 来看一个类的例子：
1 2 3 4 5 6 class Student: def __init__(self, name, sex): self.name = name self.sex = sex s1 = Student(&amp;#34;Caicai&amp;#34;, &amp;#34;male&amp;#34;) 可以看到name和sex属性都代表了单个实例的信息，这时，假设我需要统计学生类的人数，也就是学生类实例的个数，我们就可以使用类变量的方法。
1 2 3 4 5 6 7 8 9 10 11 class Student: student_num = 0 def __init__(self, name, sex): self.name = name self.sex = sex Student.student_num += 1 s1 = Student(&amp;#34;Caicai&amp;#34;, &amp;#34;male&amp;#34;) print(f&amp;#34;Student.student_num: {Student.student_num}&amp;#34;) # Student.student_num: 0 在类下面添加的变量就是类变量，类变量的访问需要通过类直接进入。
假设我们将上述代码改成了如下形式：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Student: student_num = 0 def __init__(self, name, sex): self.</description>
    </item>
    
  </channel>
</rss>
