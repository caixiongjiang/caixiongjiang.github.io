<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>深度学习框架 on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/series/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in 深度学习框架 on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Aug 2023 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/series/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从零实现深度学习推理框架</title>
      <link>https://caixiongjiang.github.io/blog/2023/hpc/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/</link>
      <pubDate>Sat, 12 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/hpc/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99/</guid>
      <description>从零自制深度学习推理框架 什么是推理框架
深度学习推理框架用于对已经训练完成的神经网络模型文件进行加载，并根据模型文件中的网络结构和权重参数对输入图像进行预测。换句话说，深度学习推理框架就是将深度学习训练框架Pytorch和TensorFlow中训练完成的模型，移植到中心侧和端侧并且在运行时高效执行。
另外，与深度学习训练框架不同的是，推理框架没有梯度后向传播的过程，因为在推理阶段模型的权重已经固定，不需要利用后向传播技术进一步进行调整。
推理框架流程：
技术全景概述
开源项目KuiperInfer可以分为以下的几个模块：
Operator:深度学习计算图中的计算节点，包含以下的几个部分： 存储输入输出的张量，用于存放深度学习中各层的输入输出。比如对于一个Convolution层，需要一部分空间来保存计算的输入和输出。 计算节点的类型和名称，计算节点类型可以有Convolution, Relu, Maxpooling等，计算节点的名称是唯一的，用来区分任意一个节点，可以是Convolution_1, Convolution_2等。 计算节点的参数信息，例如卷积中的步长、卷积核的大小等。 计算节点的权重信息，例如卷积节点中的weight, bias权重。 Graph: 有多个Operator串联得到的有向无环图，规定了各个计算节点（Operator）执行的流程和顺序。 Layer：计算节点中运算的具体执行者，Layer类先读取输入张量中的数据，然后对输入张量进行计算，得到的结果存放到计算节点的输出张量中，当然，不同的算子中Layer的计算过程会不一致。 Tensor: 用于存放多维数据的数据结构，方便数据在计算节点之间传递，同时该结构也封装矩阵乘、点积等与矩阵相关的基本操作。 以下的图示是对如上的模块的总结，每个节点都从输入张量input_data中读取数据，并调用该节点对应的Layer计算对应的结果，最后再将结果放入到output_data中。整个计算图第一个节点的输入也是计算图全局的输入，同时，最后一个节点的输出也是整个计算图的全局输出。
第一课：环境准备&amp;amp;测试准备 Docker环境准备 首先需要下载Docker，以及了解其使用，这些需要自行了解。
拉取Docker镜像：
1 sudo docker pull registry.cn-hangzhou.aliyuncs.com/hellofss/kuiperinfer:datawhale 创建并运行一个容器 1 sudo docker run -it registry.cn-hangzhou.aliyuncs.com/hellofss/kuiperinfer:datawhale /bin/bash 在容器中输入ifconfig命令查看ip地址。（注意，这里使用的必须是172开头的地址）
在宿主机使用ssh（容器内已经存在开发所需要的环境和openssh）连接容器，这里的用户名固定是me, ip地址是上方ipconfig输出中的inet, 登录密码是1.
1 ssh me@172.17.0.2 VSCode连接容器 在 VSCode 中，连接容器是一件很简单的事情，首先你需要安装 Docker 插件，点击左侧的扩展栏（或是按下 ctrl+shift+X），键入 Docker，随后选择安装。
在成功进入容器之前，我们还需要再安装几个小插件，我们接着搜索 Dev container 以及 Remote Development 插件，都安装第一个即可。
接下来，你需要右键之前启动的容器 registry.cn-hangzhou.aliyuncs.com/hellofss/kuiperinfer:datawhale，选择 附加 Visual Studio Code 进入 Docker 环境。</description>
    </item>
    
  </channel>
</rss>
