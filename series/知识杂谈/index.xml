<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>《知识杂谈》 on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/series/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</link>
    <description>Recent content in 《知识杂谈》 on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 16 Oct 2023 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/series/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python知识杂谈</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</link>
      <pubDate>Mon, 16 Oct 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</guid>
      <description>Python知识杂谈 Python中的赋值 当使用:
1 a = &amp;#34;Python&amp;#34; Python解释器干的事情：
1.创建变量a
2.创建一个对象(分配一块内存)，来存储值 &amp;lsquo;python&amp;rsquo;
3.将变量与对象，通过指针连接起来，从变量到对象的连接称之为引用(变量引用对象)
赋值：只是复制了新对象的引用，不会开辟新的内存空间。 并不会产生一个独立的对象单独存在，只是将原有的数据块打上一个新标签，所以当其中一个标签被改变的时候，数据块就会发生变化，另一个标签也会随之改变。
浅拷贝：创建新对象，其内容是原对象的引用。 浅拷贝有三种形式： 切片操作，工厂函数，copy模块中的copy函数。
Example： lst = [1,2,[3,4]]
切片操作：lst1 = lst[:] 或者 lst1 = [each for each in lst]
工厂函数：lst1 = list(lst)
copy函数：lst1 = copy.copy(lst)
浅拷贝只拷贝了一层，拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用
1）当浅拷贝的值是不可变对象（字符串、元组、数值类型）时和“赋值”的情况一样，对象的id值与浅拷贝原来的值相同。
2）当浅复制的值是可变对象（列表、字典、集合）时会产生一个“不是那么独立的对象”存在。有两种情况：
第一种情况：拷贝的对象中无复杂子对象，原来值的改变并不会影响浅拷贝的值，同时浅拷贝的值改变也并不会影响原来的值。原来值的id值与浅拷贝原来的值不同。
第二种情况：拷贝的对象中有复杂子对象（例如列表中的一个子元素是一个列表），如果不改变其中拷贝子对象，浅拷贝的值改变并不会影响原来的值。 但是改变原来的值中的复杂子对象的值会影响浅拷贝的值。
深拷贝：与浅拷贝对应，深拷贝拷贝了对象的所有元素，包括多层嵌套的元素。深拷贝出来的对象是一个全新的对象，不再与原来的对象有任何关联。
Example：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import copy a = 1 b = a b = 2 print(f&amp;#34;a:{a}&amp;#34;) print(f&amp;#34;b:{b}&amp;#34;) print(&amp;#34;------------------------&amp;#34;) c = copy.</description>
    </item>
    
    <item>
      <title>C 编程知识杂谈</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</link>
      <pubDate>Fri, 15 Sep 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</guid>
      <description>C编程知识杂谈 typedef vs define typedef和define都是替一个对象取一个别名，以此增强程序的可读性，区别如下：
原理不同： #define是C语言中定义的语法，是预处理指令，在预处理时进行简单而机械的字符串替换，不作正确性检查，只有在编译已被展开的源程序时才会发现可能的错误并报错。
typedef是关键字，在编译时处理，有类型检查功能。它在自己的作用域内给一个已经存在的类型一个别名，但不能在一个函数定义里面使用typedef。用typedef定义数组、指针、结构等类型会带来很大的方便，不仅使程序书写简单，也使意义明确，增强可读性。
功能不同：
typedef用来定义类型的别名，起到类型易于记忆的功能。
另一个功能是定义机器无关的类型。
如定义一个REAL的浮点类型，在目标机器上它可以获得最高的精度：typedef long double REAL， 在不支持long double的机器上，会被看成typedef double REAL，在不支持double的机器上，会被看成typedef float REAL
#define不只是可以为类型取别名，还可以定义常量、变量、编译开关等。
作用域不同：
#define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用，而typedef有自己的作用域。
extern关键字 在C语言中，修饰符extern用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处引用”。extern声明不是定义，即不分配存储空间。
也就是说，在一个文件中定义了变量和函数， 在其他文件中要使用它们， 可以有两种方式：
1.使用头文件，然后声明它们，然后其他文件去包含头文件
2.在其他文件中直接extern
使用场景
现在要写一个c语言的模块，供以后使用（以后的项目可能是c的也可能是c++的），源文件事先编译好，编译成.so或.o都无所谓。头文件中声明函数时要用条件编译包含起来，如下： 1 2 3 4 5 6 7 8 9 #ifdef __cpluscplus extern &amp;#34;C&amp;#34; { #endif //some code #ifdef __cplusplus } #endif 也就是将所有函数的声明放在some code的位置。
如果这个模块已经存在了，模块的.h文件中没有extern &amp;ldquo;C&amp;quot;关键字，这个模块又不希望被改动的情况下，可以这样，在你的c++文件中，包含该模块的头文件时加上extern &amp;ldquo;C&amp;rdquo;, 如下： 1 2 3 extern &amp;#34;C&amp;#34; { #include &amp;#34;test_extern_c.h&amp;#34; } ifstream std::ifstream 是 C++ 标准库中的输入文件流类。它是 std::basic_ifstream 类的具体化，用于从文件中读取数据。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Tool: CMake</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bcmake%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bcmake%E5%B7%A5%E5%85%B7/</guid>
      <description>CMake CMake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile 通常依赖于当前的编译平台，而且编写 makefile 的工作量比较大，解决依赖关系时也容易出错。
CMake 恰好能解决上述问题， 其允许开发者指定整个工程的编译流程，在根据编译平台，自动生成本地化的Makefile和工程文件，最后用户只需make编译即可，所以可以把CMake看成一款自动生成 Makefile的工具
CMake的使用 注释 CMake使用#进行行注释，使用#[[]]形式进行块注释
只有源文件的情况 假设我们有这样的目录结构：
1 2 3 4 5 6 7 8 $ tree . ├── add.c ├── div.c ├── head.h ├── main.c ├── mult.c └── sub.c 那么我们为其添加的CMakeLists.txt如下所示：
1 2 3 cmake_minimum_required(VERSION 3.0) project(CALC) add_executable(app add.c div.c main.c mult.c sub.c) cmake_minimum_required的作用是指定使用的cmake的最低版本 可以通过cmake --version来查看本机的cmake版本
project：定义工程名称，并可指定工程的版本、工程描述、web主页地址、支持的语言（默认情况支持所有语言），如果不需要这些都是可以忽略的，只需要指定出工程名字即可。 其语法如下：
1 2 3 4 5 6 project(&amp;lt;PROJECT-NAME&amp;gt; [&amp;lt;language-name&amp;gt;.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Tool: GDB</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C&#43;&#43; Tool: gflag</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgflags%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgflags%E5%B7%A5%E5%85%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C&#43;&#43; Tool: gtest</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgtest/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgtest/</guid>
      <description>Google开源框架：gtest gtest，它主要用于写单元测试，检查真自己的程序是否符合预期行为。这不是QA（测试工程师）才学的，也是每个优秀后端开发codoer的必备技能。
构建依赖环境 先介绍下怎么基于CMakeLists.txt构建依赖环境。
由于Google没有为googletest/samples中的samples写CMakeLists.txt，因此，gtest从github克隆下来后，也无法直接运行这些samples。
在loOK后端公众号，回复「gtest」即可获取gtest压缩包。
查看当前目录结构： 1 2 3 4 5 6 7 8 9 10 $ tree -L 2 demo ├── CMakeLists.txt ├── build # 空的文件夹 ├── include │ ├── CMakeLists.txt │ ├── gflags │ └── googletest ├── main.cc └── my_gtest_demo_1.cc 然后，在demo/build路径下，执行命令： 1 cmake .. &amp;amp;&amp;amp; make -j 4 这些samples生成的可执行文件都在demo/build/bin路径下。
assertion 在gtest中，是通过断言（assertion）来判断代码实现的功能是否符合预期。断言的结果分为success、non-fatal failture和fatal failture。
根据断言失败的种类，gtest提供了两种断言函数：
success：即断言成功，程序的行为符合预期，程序继续向下允许。
non-fatal failure：即断言失败，但是程序没有直接crash，而是继续向下运行。
gtest提供了宏函数EXPECT_XXX(expected, actual)：如果condition(expected, actual)返回false，则EXPECT_XXX产生的就是non-fatal failure错误，并显示相关错误。
fatal failure：断言失败，程序直接crash，后续的测试案例不会被运行。 gtest提供了宏函数ASSERT_XXX(expected, actual)。
在写单元测试时，更加倾向于使用EXPECT_XXX，因为ASSERT_XXX是直接crash退出的，可能会导致一些内存、文件资源没有释放，因此可能会引入一些bug。
具体的EXPECT_XXX、ASSERT_XXX函数及其判断条件，如下两个表:</description>
    </item>
    
    <item>
      <title>Python中的import</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E4%B8%AD%E7%9A%84import/</link>
      <pubDate>Sat, 06 May 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E4%B8%AD%E7%9A%84import/</guid>
      <description>Import的常用方法 最初的项目相关的代码都在Windows系统下运行，写这个也是因为了在Linux系统下运行代码的需求。我们会发现在Pycharm里能运行的代码，在Linux下就会报错，大部分错误都来自import的错误。
场景及使用方法 绝对路径import Note：在Python3的新版本中文件夹下面不需要__init__.py这个文件，也可以视为一个Package，不过也可以用该文件来实现一些额外的功能。
在下面的例子中大写字母开头的英文代表文件夹，小写字母开头的代表文件。
同级目录下的单个脚本引用 目录：
ROOT- example.py- test.py 如果你想要在test.py文件中引用example.py的方法，你可以使用以下的代码：
1 2 3 4 5 6 # 引入example.py中的所有内容作 import test # 引入example.py中的方法 from test import &amp;#39;方法名&amp;#39; # 使用.引入的文件中的类 x = test.Class_A 同级目录下的单个文件夹引用 目录:
ROOT- Package-- example.py- test.py 如果想要在test.py中引入Package整个包，你可以使用如下代码：
1 2 3 4 5 6 7 8 # 引入整个包 import Package # 引入包中的一个文件 import Package.example # 这样import的方式会让Package这个文件夹加入系统的路径 # 将某个文件赋值给某个变量 import Package.example as ep # 这样ep的内容就变成了example这个文件 # 从Package里引入某个文件中的某个方法或者类 from Package.</description>
    </item>
    
  </channel>
</rss>
