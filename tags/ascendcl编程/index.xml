<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AscendCL编程 on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/tags/ascendcl%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in AscendCL编程 on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 08 Aug 2023 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/tags/ascendcl%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AscendCL快速入门</title>
      <link>https://caixiongjiang.github.io/blog/2023/hpc/ascendcl%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 08 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/hpc/ascendcl%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>AscendCL快速入门 ACL（Ascend Computing Language，昇腾计算语言），是华为提供的一套用于昇腾系列处理器上进行并行加速计算的API。基于这套的API，可以管理和使用昇腾软硬件计算资源，并进行机器学习相关计算。当前ACL提供了C/C++和Python的编程接口，这和TensorRT提供的接口一致。
鉴于之前使用TensorRT部署的语义分割模型使用的是Python接口，这次在昇腾处理器上准备使用C++进行处理。
ACL的主要功能 加载离线模型进行推理 加载单个算子做计算 对图形图像的数据进行预处理 使用ResNet50进行图片推理 准备工作：需要准备一张素材图片和一个转化好的ResNet50.om离线模型。
先用伪代码看一下main函数需要做什么：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int main() { char *picturePath = &amp;#34;./data/dog1_1024_683.bin&amp;#34;; char *modelPath = &amp;#34;./model/resnet50.om&amp;#34;; // 准备计算需要的资源	InitResource(); LoadModel(modelPath); LoadPicture(picturePath); inference(); PrintResult(); // 卸载模型 UnloadModel(); // 卸载图片 UnloadPicture(); // 销毁资源 DestroyResource(); } AscendCL接口函数 ACL的初始化和去初始化
在调用ACL的任何接口之前，首先要做ACL的初始化。初始化的代码如下：
aclInit(nullptr);: 这个接口调用会帮您准备好ACL的运行时环境。其中调用时传入的参数是一个配置文件在磁盘上的路径，这里暂时不需要关注。
aclFinalize();： 去初始化非常机简单，在确定完成了ACL的所有调用之后，要做去初始化操作，接口调用十分简单。
申请和释放计算资源
使用昇腾处理器提供的加速计算，首先在运行时申请计算资源。
aclrtSetDevice(0);： 这个接口会告诉运行时环境我们使用的设备，或者更具体一点在使用哪个芯片。但是需要注意的是，芯片和我们传入的编号之间并没有物理上的一一对应关系。
aclrtResetDevice(0);： 这里传入的设备编号和申请设备的时候使用的是同一个编号。调用这个接口会将对应设备上的所有计算资源进行复位。如果此时该设备上还有未完成的计算，则会等待该设备上的所有计算过程结束再复位设备。
加载数据</description>
    </item>
    
  </channel>
</rss>
