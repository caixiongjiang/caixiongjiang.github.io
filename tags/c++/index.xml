<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 🌀riba2534&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 01 Jan 2019 20:07:00 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;11：左值引用与右值引用</title>
      <link>https://caixiongjiang.github.io/blog/2019/cpp11%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link>
      <pubDate>Tue, 01 Jan 2019 20:07:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/cpp11%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid>
      <description>C++11：左值引用与右值引用 在 C++11 的新标准中，出现了「右值引用」的说法，既然有了右值引用，那么传统的引用也就叫做左值引用。
右值引用 (Rvalue Referene) 是 C++ 新标准 (C++11, 11 代表 2011 年 ) 中引入的新特性 , 它实现了转移语义 (Move Sementics) 和精确传递 (Perfect Forwarding)。它的主要目的有两个方面：
 消除两个对象交互时不必要的对象拷贝，节省运算存储资源，提高效率。 能够更简洁明确地定义泛型函数。  左值与右值的定义 C++( 包括 C) 中所有的表达式和变量要么是左值，要么是右值。通俗的左值的定义就是非临时对象，那些可以在多条语句中使用的对象。所有的变量都满足这个定义，在多条代码中都可以使用，都是左值。右值是指临时的对象，它们只在当前的语句中有效。请看下列示例 :
  简单的赋值语句
如：int i = 0;
在这条语句中，i 是左值，0 是临时值，就是右值。在下面的代码中，i 可以被引用，0 就不可以了。立即数都是右值。
  右值也可以出现在赋值表达式的左边，但是不能作为赋值的对象，因为右值只在当前语句有效，赋值没有意义。
如：((i&amp;gt;0) ? i : j) = 1;
在这个例子中，0 作为右值出现在了”=”的左边。但是赋值对象是 i 或者 j，都是左值。
在 C++11 之前，右值是不能被引用的，最大限度就是用常量引用绑定一个右值，如 :
const int &amp;amp;a = 1;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 面试知识总结</title>
      <link>https://caixiongjiang.github.io/blog/2018/c-cpp-%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 25 Dec 2018 12:09:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2018/c-cpp-%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>本文转载自:C/C++ 面试知识总结
C/C++ 面试知识总结 C/C++ 面试知识总结，只为复习、分享。部分知识点与图片来自网络，侵删。
勘误新增请 Issue、PR，建议、讨论请 #issues/12，排版使用 中文文案排版指北
使用建议：
 Ctrl + F：快速查找定位知识点 TOC 导航：jawil/GayHub 插件快速目录跳转  目录  C/C++ STL 数据结构 算法 Problems 操作系统 计算机网络 网络编程 数据库 设计模式 链接装载库 海量数据处理 音视频 其他 书籍 复习刷题网站 招聘时间岗位 面试题目经验  C/C++ const 作用  修饰变量，说明该变量不可以被改变； 修饰指针，分为指向常量的指针和指针常量； 常量引用，经常用于形参类型，即避免了拷贝，又避免了函数对值的修改； 修饰成员函数，说明该成员函数内不能修改成员变量。  使用 const 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  // 类 class A { private: const int a; // 常对象成员，只能在初始化列表赋值  public: // 构造函数  A() { }; A(int x) : a(x) { }; // 初始化列表  // const可用于对重载函数的区分  int getValue(); // 普通成员函数  int getValue() const; // 常成员函数，不得修改类中的任何数据成员的值 }; void function() { // 对象  A b; // 普通对象，可以调用全部成员函数  const A a; // 常对象，只能调用常成员函数、更新常成员变量  const A *p = &amp;amp;a; // 常指针  const A &amp;amp;q = a; // 常引用  // 指针  char greeting[] = &amp;#34;Hello&amp;#34;; char* p1 = greeting; // 指针变量，指向字符数组变量  const char* p2 = greeting; // 指针变量，指向字符数组常量  char* const p3 = greeting; // 常指针，指向字符数组变量  const char* const p4 = greeting; // 常指针，指向字符数组常量 } // 函数 void function1(const int Var); // 传递过来的参数在函数内不可变 void function2(const char* Var); // 参数指针所指内容为常量 void function3(char* const Var); // 参数指针为常指针 void function4(const int&amp;amp; Var); // 引用参数在函数内为常量  // 函数返回值 const int function5(); // 返回一个常数 const int* function6(); // 返回一个指向常量的指针变量，使用：const int *p = function6(); int* const function7(); // 返回一个指向变量的常指针，使用：int* const p = function7();   static 作用  修饰普通变量，修改变量的存储区域和生命周期，使变量存储在静态区，在 main 函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。 修饰普通函数，表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命令函数重名，可以将函数定位为 static。 修饰成员变量，修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。 修饰成员函数，修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内不能访问非静态成员。  this 指针  this 指针是一个隐含于每一个非静态成员函数中的特殊指针。它指向正在被该成员函数操作的那个对象。 当对一个对象调用成员函数时，编译程序先将对象的地址赋给 this 指针，然后调用成员函数，每次成员函数存取数据成员时，由隐含使用 this 指针。 当一个成员函数被调用时，自动向它传递一个隐含的参数，该参数是一个指向这个成员函数所在的对象的指针。 this 指针被隐含地声明为: ClassName *const this，这意味着不能给 this 指针赋值；在 ClassName 类的 const 成员函数中，this 指针的类型为：const ClassName* const，这说明不能对 this 指针所指向的这种对象是不可修改的（即不能对这种对象的数据成员进行赋值操作）； this 并不是一个常规变量，而是个右值，所以不能取得 this 的地址（不能 &amp;amp;this）。 在以下场景中，经常需要显式引用 this 指针：  为实现对象的链式引用； 为避免对同一对象进行赋值操作； 在实现一些数据结构时，如 list。    inline 内联函数 特征  相当于把内联函数里面的内容写在调用内联函数处； 相当于不用执行进入函数的步骤，直接执行函数体； 相当于宏，却比宏多了类型检查，真正具有函数特性； 不能包含循环、递归、switch 等复杂操作； 在类声明中定义的函数，除了虚函数的其他函数都会自动隐式地当成内联函数。  使用 inline 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // 声明1（加 inline，建议使用） inline int functionName(int first, int secend,.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11:decltype类型推导及追踪返回值类型</title>
      <link>https://caixiongjiang.github.io/blog/2018/cpp11_decltype%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC%E5%8F%8A%E8%BF%BD%E8%B8%AA%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 24 Dec 2018 17:37:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2018/cpp11_decltype%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC%E5%8F%8A%E8%BF%BD%E8%B8%AA%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B/</guid>
      <description>C++11:decltype类型推导及追踪返回值类型 使用decltype进行自动类型推导 先看一段cppreference上面的解释：decltype 指定符
可以看下面的一段代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; struct { char *name; } anon_u; struct { int d; decltype(anon_u) id; //没有告诉id的类型，用decltype自动推导 } anon_s[100]; //匿名的struct数组 int main() { decltype(anon_s) as;//注意 as 的类型。  return 0; }   再这段代码里面，首先定义了一个匿名的结构体anon_u，然后又定义了一个新的匿名结构体，其中有一个成员id,这时候并没有给它指明类型，而是让编译器自己去推导，指定id的类型为anon_u代表的这个类型。起到了重用匿名结构体的作用。
比如以下代码可以更容易的看出decltype关键字的作用。
1 2 3 4  int a = 6; decltype(a) c;//把c定义成a这个变量的类型 c = 21; cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;   泛型编程中结合auto，用于追踪函数的返回值类型</description>
    </item>
    
    <item>
      <title>常量指针和指针常量和常量指针常量</title>
      <link>https://caixiongjiang.github.io/blog/2018/%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Sun, 23 Dec 2018 21:20:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2018/%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F/</guid>
      <description>常量指针和指针常量和常量指针常量 常量指针：指向常量的指针。
示例一：
1 2  int n = 10; const int *p = &amp;amp;n;   此时不能通过指针修改数据对象的值，但可以改变指针的指向。比如此时指针p不能改变n的值，但是可以指向另一个变量，把上面的代码做修改:
1 2 3 4  int n = 10, m = 30; const int *p = &amp;amp;n;//常量指针p初始化指向n *p = 20;// 这一步错误，这是一个常量指针，不能更改目标数据对象的值 p = &amp;amp;m;//这一步正确，可以修改指向   示例二:
1  void PrintObj(const int *p);   比如我们要定义一个函数，功能是打印某个对象的值，我们此时只希望函数有打印功能，不希望传进来的指针可以被修改，我们就把它变成常量指针，这样就只能打印，不能修改.
指针常量：指针指向的位置不可变化。
要注意一下，指针常量和其他常量一样，必须在定义时初始化。
此时不可以把指针指向其他地方，但是可以改变指针所指的目标数据对象的值。
示例一：
1 2 3 4  int n = 10, m = 30; int *const p = &amp;amp;n;//定义一个指针常量指向n *p = 40;//合法，可以改变指针所指的目标数据对象的值 p = &amp;amp;m;//不合法，不能修改指针指向。   常量指针常量：指向常量的指针常量（指针的双重只读属性）</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中main函数的参数</title>
      <link>https://caixiongjiang.github.io/blog/2018/cpp%E4%B8%ADmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sun, 23 Dec 2018 16:52:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2018/cpp%E4%B8%ADmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</guid>
      <description>C++中main函数的参数 问题 对于一个C/CPP文件来说，一般都有main函数，一个程序的执行一定会是先从main函数这个入口开始，一个最基本的程序框架大概长这样:
1 2 3 4 5  #include &amp;lt;stdio.h&amp;gt;int main() { return 0; }   但是，我们有时候看到的main函数这个括号里面还有别的东西，比如:
1 2 3 4 5  #include &amp;lt;stdio.h&amp;gt;int main(int argc, char *argv[]) { return 0; }   或者
1 2 3 4 5  #include &amp;lt;stdio.h&amp;gt;int main(int argc, char **argv) { return 0; }   那么问题来了，这个argc和argv有什么用呢，为什么会有这个东西，有没有这个东西貌似对程序的执行并没有什么影响.
问题的探究 首先很容易看出char **argv和char *argv[]是等价的，无非是同一种东西两种写法。
argc是int型的，我们可以做一个测试，我们尝试打印一下这个值，看看它是什么?
我们可以测试一下以下程序:
1 2 3 4 5 6  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Makefile的简单教程</title>
      <link>https://caixiongjiang.github.io/blog/2018/makefile%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sat, 22 Dec 2018 17:02:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2018/makefile%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</guid>
      <description>Makefile的简单教程 概述  什么是makefile？或许很多Winodws的程序员都不知道这个东西，因为那些Windows的集成开发环境 （integrated development environment，IDE）都为你做了这个工作，但我觉得要作一个好的和专 业的程序员，makefile还是要懂。这就好像现在有这么多的HTML编辑器，但如果你想成为一个专业人士， 你还是要了解HTML的标签的含义。特别在Unix下的软件编译，你就不能不自己写makefile了，会不会 写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。
 说起makefile，很多人可能不知道是干什么的，当一个工程可能包含很多个文件的时候，编译起来可能会很复杂，这个时候我们可以写一个makefile编译脚本来定义一下编译的规则，然后只需要执行make命令，就会自动的执行编译脚本里面定义好的编译规则来编译项目，来得到希望得到的可执行文件。
在这里我简述一下几种简单的makefile文件的写法，已经可以解决很大一部分问题了。
提起makefile就必须得说一下make，make是一个工具，它可以解释makefile这个脚本，然后根据规则来编译一个项目。makefile定义规则，make来编译它。
关于makefile的更多知识，可以参考一下跟我一起写Makefile
语法规范 大概就长这个样子：
1 2 3 4  target ... : prerequisites ... command ... ...    target：你要生成的可执行文件 prerequisites：你要生成的可执行文件的依赖 command：通过什么命令来生成它  示例 概念说得再多，不如几个例子来的亲切。
以下包含几个例子以及如何写makefile文件来进行编译。
例子一： 现在我们随便写一个代码，用来找出一个数组中的最大值。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // main.cpp #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int find_max(int arr[], int n) { int maxx = 0; for (int i = 0; i &amp;lt; n; i++) maxx = max(maxx, arr[i]); return maxx; } int main() { int arr[5] = {1, 8, 6, 3, 4}; printf(&amp;#34;max is %d.</description>
    </item>
    
  </channel>
</rss>
