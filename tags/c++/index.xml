<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Aug 2023 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Tool: CMake</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bcmake%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bcmake%E5%B7%A5%E5%85%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C&#43;&#43; Tool: GDB</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C&#43;&#43; Tool: gflag</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgflags%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgflags%E5%B7%A5%E5%85%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C&#43;&#43; Tool: gtest</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgtest/</link>
      <pubDate>Wed, 16 Aug 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/c&#43;&#43;-tool%E4%B9%8Bgtest/</guid>
      <description>Google开源框架：gtest gtest，它主要用于写单元测试，检查真自己的程序是否符合预期行为。这不是QA（测试工程师）才学的，也是每个优秀后端开发codoer的必备技能。
构建依赖环境 先介绍下怎么基于CMakeLists.txt构建依赖环境。
由于Google没有为googletest/samples中的samples写CMakeLists.txt，因此，gtest从github克隆下来后，也无法直接运行这些samples。
在loOK后端公众号，回复「gtest」即可获取gtest压缩包。
查看当前目录结构： 1 2 3 4 5 6 7 8 9 10 $ tree -L 2 demo ├── CMakeLists.txt ├── build # 空的文件夹 ├── include │ ├── CMakeLists.txt │ ├── gflags │ └── googletest ├── main.cc └── my_gtest_demo_1.cc 然后，在demo/build路径下，执行命令： 1 cmake .. &amp;amp;&amp;amp; make -j 4 这些samples生成的可执行文件都在demo/build/bin路径下。
assertion 在gtest中，是通过断言（assertion）来判断代码实现的功能是否符合预期。断言的结果分为success、non-fatal failture和fatal failture。
根据断言失败的种类，gtest提供了两种断言函数：
success：即断言成功，程序的行为符合预期，程序继续向下允许。
non-fatal failure：即断言失败，但是程序没有直接crash，而是继续向下运行。
gtest提供了宏函数EXPECT_XXX(expected, actual)：如果condition(expected, actual)返回false，则EXPECT_XXX产生的就是non-fatal failure错误，并显示相关错误。
fatal failure：断言失败，程序直接crash，后续的测试案例不会被运行。 gtest提供了宏函数ASSERT_XXX(expected, actual)。
在写单元测试时，更加倾向于使用EXPECT_XXX，因为ASSERT_XXX是直接crash退出的，可能会导致一些内存、文件资源没有释放，因此可能会引入一些bug。
具体的EXPECT_XXX、ASSERT_XXX函数及其判断条件，如下两个表:</description>
    </item>
    
    <item>
      <title>第十三讲：heap&amp;priority_queue深度探索</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC13%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 28 Jun 2022 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC13%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第十三讲：heap&amp;amp;priority_queue深入探索 heap概述 heap不是STL容器组件，它是扮演priority queue的助手。priority queue允许用户以任何次序将任何元素推入容器中， 但取出时一定是从优先权最高的元素开始取。binary max heap正具有这样的特性，适合作为priority queue的底层机制。
priority queue选用binary heap来实现，它是一种完全二叉树，也就是说除了最底层的叶子节点之外，是填满的，且 最底层的叶节点由左至右不能右空隙。因为整棵树没有任何节点漏洞，我们可以使用array来存储所有的节点。
binary heap是一颗完全二叉树，那么它就具备完全二叉树的特点：当某个节点位于array的i处，其左子节点必位于array的 2i处，其右子节点一定位于array的2i+1处，其父节点必定位于&amp;quot;i/2&amp;quot;处。
binary heap使用一个array（保存数据）和一组heap算法（用来插入元素、删除元素、取极值）。这种使用array表述 tree的方式，被称为隐式表达。
当然heap要能动态的改变大小，所以用vector存储数据会更好。
heap可以分为max-heap以及min-heap，前者每个节点的键值都大于或等于其子节点键值，后者的每个节点键值都小于或 等于其子节点键值。可以推出，max-heap的最大键值在根节点，min-heap的最小键值在根节点。
heap算法 push_heap算法 在很多书籍当中，通常通过一个上浮的操作来完成push_heap。其基本原理可见下图（假设新加入的元素是50）：
1.将50插入到数组的末尾。
2.将其于父元素相比较，发现24小于50，交换这两个元素。上浮一次
3.继续上述操作直到找到一个合适的位置，也即其父元素大于50的位置，则上浮结束。
一个简易的c++实现：
1 2 3 4 5 6 7 8 9 10 template&amp;lt;typename T&amp;gt; void push_heap(std::vector&amp;lt;T&amp;gt; &amp;amp;vec, T value) { vec.push_back(value); int i = vec.size()-1; while (i &amp;gt; 1 &amp;amp;&amp;amp; vec[i] &amp;gt; vec[i / 2]) { std::swap(vec[i], vec[i / 2]); i = i / 2; } } pop_heap算法 pop操作是类似的：</description>
    </item>
    
    <item>
      <title>第十二讲：hashtable深度探索</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC12%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 12 May 2022 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC12%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第十二讲：hashtable深度探索 为什么要使用hashtable？ 如上图所示，如果空间足够，我们当然可以按照次序进行存储，但往往存储是比较有限的，我们就可以使用 hashtable的结构来存储！
如何处理hashtable的碰撞现象？ 如果我们使用hashtable的结构，一定会存在取余之后相等的情况：例如15%7和22%7就会发生碰撞！
我们解决的办法是：如果发生碰撞，就将它们以一个链表的形式串在一起，如下图所示。
特点：
发生碰撞时使用形成链表的形式来解决碰撞。
链表的搜寻时间是线性增长的（ 平均时间复杂度为O(n) ），但如果list够小，搜寻的速度荏苒很快。
如果所有链表的总节点数超过了bucket（这里指模的值，图中为53，也是GNU中使用的初始值）的数量， 采用再哈希的方法:
方式为将bucket的数量扩充到原来的值的2倍，然后选取离它最近的素数作为新的bucket值。 每次扩充都需要对每个元素重新计算新的位置。 在源码中已经将所有bucket的值全部算好了，需要扩充时，直接取就ok！ hashtable部分源码（GNU2.9）：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 template &amp;lt;class Value, class Key, class HashFcn, class ExtractKey, class EqualKey, class Alloc&amp;gt; class hashtable { public: //将传进来的参数重新换了一个名称 typedef HashFcn hasher; typedef EqualKey key_equal; typedef size_t size_type; private: // 以下三者都是function objects。&amp;lt;stl_hash_fun.</description>
    </item>
    
    <item>
      <title>第十一讲：set/multiset &amp; map/multimap深度探索</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC11%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 10 May 2022 08:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC11%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第十一讲：set/multiset &amp;amp; map/multimap深度探索 set和multiset特性 set/multiset以红黑树为底层结构，因此有自动排序的特性，排序的依据是key，而set和multiset的value和key 是合二为一的：value就是key（key和data合成value） set和multiset提供遍历的操作以及iterator，按照正常的规则遍历就能获得排序状态。 无法使用iterator来改变元素值（底层为将iterator设为const），因为key有其严谨的排序规则。 set的key必须独一无二，因此其insert()用的是rb_tree的insert_unique() multiset元素的key可以重复，因此其insert()用的是rb_tree的insert_equal() set容器 模版定义：（GNU2.9）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //set默认采用key值降序排列 template &amp;lt;class Key, class Compare = less&amp;lt;Key&amp;gt;, class Alloc = alloc&amp;gt; class set { public: // typedefs: typedef Key key_type; typedef Key value_type; // 注意，以下 key_compare 和 value_compare 使用相同的比較函式 typedef Compare key_compare; typedef Compare value_compare; private: typedef rb_tree&amp;lt;key_type, value_type, identity&amp;lt;value_type&amp;gt;, key_compare, Alloc&amp;gt; rep_type; rep_type t; // 采用紅黑树（RB-tree）來表現 set public: typedef typename rep_type::const_iterator iterator;//这里的迭代器不能改变 //set的所有操作都转而呼叫底层（红黑树）的操作 .</description>
    </item>
    
    <item>
      <title>第十讲：rb_tree深度探索</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC10%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 20 Apr 2022 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC10%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第十讲：rb_tree深度探索 rb_tree vs AVL树 AVL是一个高度平衡的二叉树，而红黑树不是 红黑树每次插入一个元素，最多只需要两次旋转；而AVL可能需要更多次平衡操作 搜索速度：AVL树更加快，因为其严格遵守高度平衡，搜索查找的平均时间复杂度为log2(n) 插入速度：红黑树更加快，因为最多只需要两次旋转再加一些重新着色。 AVL树是rb_tree的子集 红黑树的结构 红黑树是平衡二分搜索树中常常使用的一种，平衡二分搜索树的特性：排列规则有利search和insert，并保持适度平衡。
红黑树提供遍历的功能及iterators。按正常规则（++ite）遍历，便能获得排序状态。
红黑树的结构样例：
排序的状态为红黑树的中序遍历，begin()在左下，end()是在右下
红黑树的规则(首先需要是一颗二分查找树{BST})：
1.每个节点不是红色就是黑色 2.根节点为黑色 3.如果节点为红，其子节点必须是黑（如果节点为黑，其子节点既可以是红也可以是黑） 4.任一节点至NULL(树尾端)的任何路径，所含黑色节点数必须相同 根据规则4，新增节点必须为红；根据规则3，新增节点之父节点必须为黑，当新节点根据二叉搜索树的规则到达其插入点， 但未能符合上述要求，就必须调整颜色并旋转树形
我们不应该用红黑树的iterators改变元素值（因为元素有其严谨的排序规则）。但是编程层面并未阻止此事，rb_tree将会为set和map服务，而map允许元素的data被改变， 只有元素的key才是不能被改变的。
rb_tree提供两种insertion操作（红黑树本身对重复与否没有限制，而取决于insert的方式）：insert_unique()和insert_equal()。前者表示节点的key一定在整个树中独一无二， 否则安插失败；后者表示节点的key可以重复。
部分源码（在这里将key和data合起来的节点合成value）：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //这里的Value是key和data的组合，如果value只传一个值说明没有value（set） template &amp;lt;class Key, class Value, class KeyOfValue, class Compare, class Alloc = alloc&amp;gt; class rb_tree { protected: typedef __rb_tree_node&amp;lt;Value&amp;gt; rb_tree_node;//红黑树的结构 ··· public: // 注意，没有定义iterator（喔，不，定义在后面） typedef rb_tree_node* link_type;//指向红黑树节点的指针 ··· protected: //rb_tree只以三个资料表现它自己 size_type node_count;//rb_tree的大小（节点数量） link_type header; Compare key_compare;//key的大小比较准则；应会是个function object ··· } 测试rb_tree（GNU2.</description>
    </item>
    
    <item>
      <title>第九讲：deque，queue，stack深度探索</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC9%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 20 Apr 2022 18:14:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC9%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第九讲：deque，queue，stack深度探索 容器deque deque的结构和设计 deque的底层结构：
如上图所示：
deque的迭代器是一个class，内部有四个元素cur，first，last，node node指向某一个buffer，first和last分别指向这一个buffer的头部和尾部，cur指向当前元素 cur一旦走到了一个buffer的边界，则直接走到下一个buffer的开头（维持左闭右开） deque向前扩充和向后扩充都是使用buffer来进行的（之前已经讲过了） start和finish是为了维护改容器的begin()和end() 源码如下(GNU2.9)：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 template&amp;lt;class T, class Alloc=alloc, size_t BufSiz=0&amp;gt; class deque { public: typedef T value_type; typedef __deque_iterator&amp;lt;T, T&amp;amp;, T*, BufSiz&amp;gt; iterator; protected: typedef pointer* map_pointer;//T** 指向指针的指针 protected: iterator start;//对应begin()的iterator类 iterator finish;//对应end()的iterator类 map_pointer map;//单个buffer size_type map_size;//控制中心的大小（也就是有多少个buffer） public: iterator begin() { return start; } iterator edn() { return finish; } size_type size() const { return finish - start; } }; 谈一谈参数的设置：如果BufSiz传入5，则为5；如果没有指定，则默认为0；如果元素大小sz大于512Bytes ，它就让一个缓冲区只放一个元素；如果小于512Bytes,则传回512/sz。（不过新版本不允许指定大小）</description>
    </item>
    
    <item>
      <title>第八讲：array和forward_list深度探索</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC8%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 19 Apr 2022 18:14:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC8%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第八讲：array和forward_list深度探索 容器array array在c中本身就存在，为什么array要成为一个容器？
array成为容器的好处：array可以使用迭代器，可以使用标准算法，更加地快捷。
使用标准array的方法：
1 2 3 4 5 array&amp;lt;int, 10&amp;gt; myArray; auto it = myArray.begin(); //array&amp;lt;int, 10&amp;gt;::iterator it = myArray.begin(); it += 3; cout &amp;lt;&amp;lt; *it; 源码如下图，较简单(TR1版本)：
forward_list 单向链表的结构与list双向链表的结构类似，可以类推。（c++11以前为slist）</description>
    </item>
    
    <item>
      <title>第七讲：vector容器深入探索</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC7%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 17 Apr 2022 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC7%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第七讲：vector容器深入探索 vector是动态空间，随着元素的加入，它的内部机制会自动扩充空间以容纳新元素。
vector扩容机制(GNU 2.9版) 从途中可以看出，有三个非常关键的指针start，finish，end_of_storage:
start指向第一个元素的内存空间，也就是begin()方法指向的内存空间。 finish指向当前使用中的最后一个元素的后一个位置的内存空间，也就是end()方法指向的内存空间！ end_of_storage指向当前最大可用空间的尾。 源码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 template &amp;lt;class T, class Alloc = alloc&amp;gt; // 預設使用 alloc 為配置器 class vector { public: // 以下標示 (1),(2),(3),(4),(5)，代表 iterator_traits&amp;lt;I&amp;gt; 所服務的5個型別。 typedef T value_type;	// (1) typedef value_type* pointer; // (2) typedef const value_type* const_pointer; typedef const value_type* const_iterator; typedef value_type&amp;amp; reference; // (3) typedef const value_type&amp;amp; const_reference; typedef size_t size_type; typedef ptrdiff_t difference_type; // (4) // 以下，由於vector 所維護的是一個連續線性空間，所以不論其元素型別為何， // 原生指標都可以做為其迭代器而滿足所有需求。 typedef value_type* iterator; /* 根據上述寫法，如果客端寫出這樣的碼： vector&amp;lt;Shape&amp;gt;::iterator is; is 的型別其實就是Shape* 而STL 內部運用 iterator_traits&amp;lt;is&amp;gt;::reference 時，獲得 Shape&amp;amp; 運用iterator_traits&amp;lt;is&amp;gt;::iterator_category 時，獲得 random_access_iterator_tag	(5) （此乃iterator_traits 針對原生指標的特化結果） */ // vector採用簡單的線性連續空間。以兩個迭代器start和end分別指向頭尾， // 并以迭代器end_of_storage指向容量尾端。容量可能比(尾-头)还大 protected: iterator start; iterator finish; iterator end_of_storage; public: iterator begin() { return start; } const_iterator begin() const { return start; } iterator end() { return finish; } /*通过函数相减有利于后期修改指针时，不需要修改size()方法*/ size_type size() const { return size_type(end() - begin()); } /*capacity代表最大容量*/ size_type capacity() const { return size_type(end_of_storage - begin()); } bool empty() const { return begin() == end(); } /*连续空间的容器都会有[]的运算符重载*/ reference operator[](size_type n) { return *(begin() + n); } // 取出第一個元素內容 reference front() { return *begin(); } // 取出最後一個元素內容 reference back() { return *(end() - 1); } } 通过push_back()方法来看扩容机制：</description>
    </item>
    
    <item>
      <title>第六讲：迭代器设计的原则&amp;iterator traits的作用与设计</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC6%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 08 Apr 2022 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC6%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第六讲：迭代器设计的原则&amp;amp;iterator traits的作用与设计 iterator traits iterator traits是为了提取出迭代器的特点，迭代器必须有能力回答algorithm提出的问题。
c++标准库设计了5种回答方式,集成在class中（迭代器相关的类型，迭代器模版中本身必须定义出来）：
iterator_category：迭代器的类型，具体表现在能否++或者&amp;ndash;或者一下加减很多步 difference_type：代表两个iterator的距离应该用什么type来表现（随机访问：unsign interger，实现链表的都用ptrdiff_t类型） value_type：iterator所指元素的类型 reference：引用（暂未使用） pointer：指针（暂未使用） 但如果iterator本身不是class，例如native pointer（退化的iterator），如何回答算法的5个问题？
iterator traits用于分离class iiterators和non-class iterators</description>
    </item>
    
    <item>
      <title>第五讲：深入理解容器</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC5%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 08 Apr 2022 13:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC5%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第五讲：深入理解容器 容器的结构再分类 heap 和 priority_queue中有vector的结构 stack 和 queue中有deque的结构 set 和 map系列有rb_tree的结构 unordered系列容器中有hashtable的结构 在c++11中：slist &amp;ndash;&amp;gt; forward_list； hash_~ &amp;ndash;&amp;gt; unordered_~。 深度探索list list（环状双向链表）其本身是一个指针，指向一个node节点，其结构为两个指针（一个向前一个向后）+数据值
1 sizeof(list&amp;lt;int&amp;gt;()) //其值为4Bytes（GNU2.9） 8Bytes(GNU4.9) list的结构 node的设计（GNU2.9）： 1 2 3 4 5 6 7 tempalate&amp;lt;class T&amp;gt; struct __list_node { typedef void* void_pointer;//一个空的指针置于尾端的一个空白节点，符合&amp;#34;前闭后开&amp;#34;的要求 void_pointer prev;//向前的指针 void_pointer next;//向后的指针 T data;//数据 }; iterator的设计（GNU2.9）： 1 2 3 4 5 6 7 8 tempalte&amp;lt;class T, class Ref, class Ptr&amp;gt; struct __list_iterator { typedef T value_type; typedef Ptr pointer; typedef Ref reference; ··· //具体看《STL源码剖析》p131 }; G4.</description>
    </item>
    
    <item>
      <title>第四讲：深入理解分配器</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC4%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 08 Apr 2022 10:54:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC4%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第四讲：深入理解分配器 operator new() &amp;amp; malloc() operator() new会调用malloc(), malloc()作用是分配内存。
看图：
size部分为我们所需要的内存，可以看出malloc()分配的内存比所需要的内存多。多分配的内存空间如果称为开销的话，也就是说我们的单个内存越大，开销所占比例就越小！
分配器最重要的两个函数：allocate &amp;amp; deallocate VC++下和BC++下：
申请内存：allocator--&amp;gt;operator new()--&amp;gt;malloc() 释放内存：deallocator--&amp;gt;operator delete()--&amp;gt;free() 分配512个int整数：
1 2 int *p = allocator&amp;lt;int&amp;gt;().allocate(512, (int*)0); allocator&amp;lt;int&amp;gt;().deallocate(p, 512); 注：一个type +（）形成了一个临时对象，才能调用其中的成员函数。举例：queue&amp;lt;int&amp;gt;()
alloc的优点 GNU2.9下：
申请内存：allocator--&amp;gt;allocate()--&amp;gt;operator new()--&amp;gt;malloc() 释放内存：deallocator--&amp;gt;deallocate()-&amp;gt;operator delete()--&amp;gt;free() 注：虽然GNU标准allocator被设计出来，但它的容器基本都不用标准的allocator，而是使用alloc
使用malloc()和free()会带来很大的额外开销，如果区块小，开销比例会很大。 额外开销中的cookie记录内存的大小，但因为容器元素的大小是一样的，所以alloc使用一个长链表（i = 0～15），第i个对应cookie大小为8(i + 1)Bytes的内存大小，容器的内存大小会被调整为8的倍数，这样就只需要用少量cookie来记录内存大小！ 所以使用alloc存放1000000个元素，可以省掉cookie开销大约8000000个Bytes GNU4.9下：
容器使用的分配器又变为了allocator，继承于new_allocator，使用operator new() 和 operator delete() 4.9下的alloc被更名为__pool_alloc，属于__gnu_cxx::__pool_alloc </description>
    </item>
    
    <item>
      <title>第三讲:泛型编程和模版技术</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC3%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 07 Apr 2022 15:21:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC3%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第三讲:泛型编程和模版技术 源代码之分布 VC的标准库文件夹: GNU c++标准库文件夹: OOP(面向对象编程) vs GP(泛型编程) OOP将datas和methods关联在一起（成员变量和成员函数都放在类里面） demo:list内部本身存在有sort()算法，使用语法如下：
1 c.sort() GP是将datas和methods分开来
demo：vector和deque内部都没有sort()函数，sort()函数是放在算法里面的，使用语法如下：
1 ::sort(c.begin(), c.end()); 注：list本身是链式容器，无法支持随机访问，所以需要本身自己重新定义sort()。
采用GP的好处：
容器和算法团队可以各自写自己的东西，其间用迭代器来进行关联。 算法通过迭代器确定操作范围，并通过迭代器取用容器的元素。 两个石头如何比较大小不需要类来决定，而是用仿函数来决定。 max()算法的demo：
第二个版本的参数3接收的是函数对象或者是仿函数，用于自定义的比较规则制定！
操作符重载复习 操作符操作单个数或者多个数，以及能否成为类内部的成员函数
模版Template复习 类模版: 函数模版: 成员模版 模版中泛化 vs 特化 泛化的特点是可以接收大多数type的数据结构 特化的特点是为了某些特殊的数据（数据有不同的特点）进行的模版中特殊化的写法 demo:
特化中的偏特化（局部特化） 个数的偏特化: 范围的偏特化： </description>
    </item>
    
    <item>
      <title>第二讲:容器之分类及各种测试</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC2%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 07 Apr 2022 10:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC2%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第二讲:容器之分类及各种测试 容器结构及分类 序列式容器 数组（Array）：定长数组，无法扩充 vector：可扩充的数组（分配器做内存扩充） Deque：双端队列 List：双向链表 Forward-List：单向链表 关联式容器（key-&amp;gt;value） Set/Multiset（Multiset中的值可以重复）：内部为红黑数 Map/Multimap（Multimap中的value值可以重复）：内部为红黑树 无序容器（unordered,大类上属于关联式容器） 介绍一个常用的结构hashtable：根据公式进行分类， 但会产生碰撞， 产生碰撞的元素全部放在一个链表中。但如果链表太长如何做呢？后面会继续介绍。
先写用于测试的几个辅助函数:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using std::cin; using std::cout; using std::string; long get_a_target_long() { long target = 0; cout &amp;lt;&amp;lt; &amp;#34;target (0~&amp;#34; &amp;lt;&amp;lt; RAND_MAX &amp;lt;&amp;lt; &amp;#34;):&amp;#34;; return target; } string get_a_target_string() { long target = 0; char buf[10]; cout &amp;lt;&amp;lt; &amp;#34;target (0~&amp;#34; &amp;lt;&amp;lt; RAND_MAX &amp;lt;&amp;lt; &amp;#34;):&amp;#34;; cin &amp;gt;&amp;gt; target; //snprintf功能为格式化成字符串 // 1-- 目标字符串 2 -- 拷贝字节数 3 -- 格式化成字符串。4 -- 可变参数。 snprintf(buf, 10, &amp;#34;%d&amp;#34;, target); return string(buf); } //比较两个long数据是否相等 int compareLongs(const void* a, const void* b) { return (*(long*)a - *(long*)b); } //比较两个string数据是否相等 int compareStrings(const void* a, const void* b) { if(*(string*)a &amp;gt; *(string*)b) return 1; else if(*(string*)a &amp;lt; *(string*)b) return -1; else return 0; } 顺序容器使用及测试 使用容器array：array.</description>
    </item>
    
    <item>
      <title>第一讲:STL体系结构介绍</title>
      <link>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC1%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 07 Apr 2022 08:15:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AC%AC1%E8%AE%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>第一讲:STL体系结构介绍 c++标准库 vs c++ Standard Library 总体来说 c++标准库 &amp;gt; c++ Standard Library
标准库以头文件（.h）的形式呈现:
c++标准库的header files不带副档名（.h）, 例如#include 新式c header files 不带副档名（.h），例如 #include 旧式c header files 带有副档名（.h）仍然可用，例如 #include &amp;lt;stdio.h&amp;gt; 新式headers内的组件封装为 namespace &amp;ldquo;std&amp;rdquo; using namespace std;（相当于把std文件全部打开） using std::cout; 旧式headers内的组件不封装在namespace &amp;ldquo;std&amp;rdquo; demo：
1 2 3 4 5 6 #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;functional&amp;gt; using namespace std; 重要的网站（c++标准库） cplusplus.com cppreference.com gcc.gnu.org STL六大部件 容器（containers） 分配器（allocators） 算法（algorithms） 迭代器（iterators） 适配器（addpters） 仿函数（functors） 六大部件的关系：
容器可以使我们不用管c++的内存，分配器支持容器进行内存管理。 容器的数据操作使用算法，访问数据使用迭代器，迭代器（类似于指针）是算法操作容器内部数据的桥梁。 仿函数类似于函数，暂时可以用函数来理解。 适配器是用来转换的，可以对容器，仿函数，迭代器进行转换。 模版编程和面向对象编程的区别</description>
    </item>
    
    <item>
      <title>《Effective C&#43;&#43;》导读&amp;条款1~3</title>
      <link>https://caixiongjiang.github.io/blog/2022/effective-c&#43;&#43;/effective-c&#43;&#43;%E5%AF%BC%E8%AF%BB%E6%9D%A1%E6%AC%BE1~3/</link>
      <pubDate>Tue, 01 Mar 2022 18:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/effective-c&#43;&#43;/effective-c&#43;&#43;%E5%AF%BC%E8%AF%BB%E6%9D%A1%E6%AC%BE1~3/</guid>
      <description>《Effective c++》学习笔记 导读部分 正式开始55条条款之前，这本书的目的是为了让c++程序员如何写出更加安全高效的程序准备的，属于进阶书籍，如果观看本书还有很多不明白的地方，还需要去学基础，推荐《c++ Primer》,看本书前需要知道的有：c++面向过程，c++面向对象，c++泛型编程，c++ STL标准库， c++多线程编程。
术语 1.std命名空间是几乎所有c++标准程序库元素的栖息地，所以在导入c++头文件的时候，一定要在std命名空间内写程序
2.size_t是一个typedef，是c++计算个数（字符串内的个数或者STL容器内的元素个数）时使用的，它属于无符号整数
3.一个类的构造函数使用explicit关键字可以阻止它们被用来隐式类型转换，但他们仍然可被用于显示类型转化。被声明为explicit关键字的构造函数通常比没有它更受欢迎，因为它们禁止编译器执行非预期的类型
demo：
头文件（.h）:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 class A{ public: A(); //default构造函数 }; class B{ public: explicit B(int x = 0, bool b = true);//default构造函数 两个参数都已经设置默认值 }; class C{ public: explicit C(int x);//不是default构造函数 }; 执行文件（.cpp）:
1 2 3 4 5 6 7 8 9 10 void doSomething(B bObject); //函数声明，接收一个类型为B的对象 B bObj1; doSomething(bObj1); B bObj2(28);//正确，根据int28建立一个B doSomething(28);//错误！doSomething应该接收一个B //int至B之间没有隐式类型转化 doSomething(B(28));//正确，使用B构造函数将int显示转换 4.</description>
    </item>
    
  </channel>
</rss>
