<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dp on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/tags/dp/</link>
    <description>Recent content in dp on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 08 May 2020 01:56:15 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeecCode 221 最大正方形(dp)</title>
      <link>https://blog.riba2534.cn/blog/2020/leeccode-221-%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2dp/</link>
      <pubDate>Fri, 08 May 2020 01:56:15 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/leeccode-221-%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2dp/</guid>
      <description>题目链接：最大正方形
在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。
示例:
输入: 1 0 1 0 01 0 1 1 11 1 1 1 11 0 0 1 0输出: 4思路 定义dp[i][j]代表以当前坐标(i,j)为正方形右下角的点的最大边长。
我们只需要考虑矩阵中为1的点，只有为1的点才会对答案产生影响，易得dp[i][0]=dp[0][j]=1
对于其他的点，可以由左,上,左上转移过来，对这三个值取最小值，再加上当前点就是答案。即：
$dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1$
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  class Solution { public: int maximalSquare(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt; &amp;amp;matrix) { if (matrix.</description>
    </item>
    
    <item>
      <title>LeetCode 983 最低票价(dp)</title>
      <link>https://blog.riba2534.cn/blog/2020/leetcode-983-%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7dp/</link>
      <pubDate>Wed, 06 May 2020 01:14:04 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/leetcode-983-%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7dp/</guid>
      <description>题目链接：最低票价
在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。
火车票有三种不同的销售方式：
 一张为期一天的通行证售价为 costs[0] 美元； 一张为期七天的通行证售价为 costs[1] 美元； 一张为期三十天的通行证售价为 costs[2] 美元。  通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。
示例 1：
输入：days = [1,4,6,7,8,20], costs = [2,7,15]输出：11解释： 例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, .</description>
    </item>
    
    <item>
      <title> 牛客网-网易2017笔试 合唱团(dp)</title>
      <link>https://blog.riba2534.cn/blog/2018/-%E7%89%9B%E5%AE%A2%E7%BD%91-%E7%BD%91%E6%98%932017%E7%AC%94%E8%AF%95-%E5%90%88%E5%94%B1%E5%9B%A2dp/</link>
      <pubDate>Sun, 30 Dec 2018 16:16:00 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2018/-%E7%89%9B%E5%AE%A2%E7%BD%91-%E7%BD%91%E6%98%932017%E7%AC%94%E8%AF%95-%E5%90%88%E5%94%B1%E5%9B%A2dp/</guid>
      <description>题目来源:合唱团
题目描述  有 n 个学生站成一排，每个学生有一个能力值，牛牛想从这 n 个学生中按照顺序选取 k 名学生，要求相邻两个学生的位置编号的差不超过 d，使得这 k 个学生的能力值的乘积最大，你能返回最大的乘积吗？
 输入描述:  每个输入包含 1 个测试用例。每个测试数据的第一行包含一个整数 n (1 &amp;lt;= n &amp;lt;= 50)，表示学生的个数，接下来的一行，包含 n 个整数，按顺序表示每个学生的能力值 ai（-50 &amp;lt;= ai &amp;lt;= 50）。接下来的一行包含两个整数，k 和 d (1 &amp;lt;= k &amp;lt;= 10, 1 &amp;lt;= d &amp;lt;= 50)。
 输出描述:  输出一行表示最大的乘积。
 输入 37 4 72 50输出 49思路 给出 n 个数字，要求按顺序选择 k 个，使得选出的数的乘积最大。且要求选择的相邻两个人的距离必须小于等于 d.
定义 dp[n][k] 为以位置为 n 的人为结尾（位置为 n 的人就是选择的第k个人），选择 k 个人(包括自己)所能获得的最大乘积</description>
    </item>
    
  </channel>
</rss>
