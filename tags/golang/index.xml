<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/tags/golang/</link>
    <description>Recent content in golang on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 25 May 2021 02:35:34 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Linq 使用</title>
      <link>https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 25 May 2021 02:35:34 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2021/go-linq%E4%BD%BF%E7%94%A8/</guid>
      <description>前言 最近我负责了一个新项目，大概流程是从 DB 里拿出一堆数据之后，得到一个包含字段很多的结构体的 List，然后需要对这个 List 进行一系列的过滤，包括但不限于类似 sql 中的 where、group by、select 、按照某个字段排序、求并补交集之类的操作。
如果让我自己写，我肯定是一个一个条件慢慢写，但是代码库我是接手的别人的，我看了下现有的实现，大呼牛逼，原来目前对于这种操作已经有了成熟的解决方案了。
那就是：LINQ
Go-linq 介绍 语言集成查询（Language Integrated Query），缩写为 LINQ，是微软的一项技术，并且被应用在了 C# 中，它直接将一些列的查询操作集成在了编程语言中，使得开发者筛选数据的时候可以大大加快速度。详见：语言集成查询
在 Golang 中，语言本身并没有内置这种操作，不过好在有开源社区帮助我们实现了一个库 ahmetb/go-linq ，详细的支持的函数列表和操作可以看这里： https://pkg.go.dev/github.com/ahmetb/go-linq/v3
特性如下：
 没有使用任何第三方依赖，只使用了go 原生库 通过迭代器模式实现了惰性求值 并发安全 支持泛型方法 支持 array、slice、map、string、channel 和自定义集合类  go-linq 提供的方法可以按照是否支持泛型分为两大类。泛型方法都以 T 结尾。非泛型方法需要将函数的入参类型限制为 interface{} 并做类型断言。
基本使用 牛刀小试 首先，肯定是先引入包：
1  go get github.com/ahmetb/go-linq/v3   引入之后，就可以在项目里面用起来了。
我们找个例子先试一试，假设我要筛选出一个数组中的所有偶数，可以对比一下自己写和使用库的写法的区别：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.</description>
    </item>
    
    <item>
      <title>Go Channel 详解</title>
      <link>https://blog.riba2534.cn/blog/2020/go-channel-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 01 Sep 2020 11:13:34 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/go-channel-%E8%AF%A6%E8%A7%A3/</guid>
      <description>Go Channel 详解 Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。
它的操作符是箭头 &amp;lt;- 。
1 2  ch &amp;lt;- v // 发送值v到Channel ch中 v := &amp;lt;-ch // 从Channel ch中接收数据，并将数据赋值给v   (箭头的指向就是数据的流向)
就像 map 和 slice 数据类型一样, channel必须先创建再使用:
1  ch := make(chan int)   Channel类型 Channel类型的定义格式如下：
1  ChannelType = ( &amp;#34;chan&amp;#34; | &amp;#34;chan&amp;#34; &amp;#34;&amp;lt;-&amp;#34; | &amp;#34;&amp;lt;-&amp;#34; &amp;#34;chan&amp;#34; ) ElementType .   它包括三种类型的定义。可选的&amp;lt;-代表channel的方向。如果没有指定方向，那么Channel就是双向的，既可以接收数据，也可以发送数据。
1 2 3  chan T // 可以接收和发送类型为 T 的数据 chan&amp;lt;- float64 // 只可以用来发送 float64 类型的数据 &amp;lt;-chan int // 只可以用来接收 int 类型的数据   &amp;lt;-总是优先和最左边的类型结合。(The &amp;lt;- operator associates with the leftmost chan possible)</description>
    </item>
    
    <item>
      <title>Golang的反射reflect深入理解和示例</title>
      <link>https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Thu, 29 Aug 2019 22:16:02 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/golang%E7%9A%84%E5%8F%8D%E5%B0%84reflect%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%92%8C%E7%A4%BA%E4%BE%8B/</guid>
      <description>Golang的反射reflect深入理解和示例 编程语言中反射的概念 在计算机科学领域，反射是指一类应用，它们能够自描述和自控制。也就是说，这类应用通过采用某种机制来实现对自己行为的描述（self-representation）和监测（examination），并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。
每种语言的反射模型都不同，并且有些语言根本不支持反射。Golang语言实现了反射，反射机制就是在运行时动态的调用对象的方法和属性，官方自带的reflect包就是反射相关的，只要包含这个包就可以使用。
多插一句，Golang的gRPC也是通过反射实现的。
interface 和 反射 在讲反射之前，先来看看Golang关于类型设计的一些原则
 变量包括（type, value）两部分  理解这一点就知道为什么nil != nil了   type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型 类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.  接下来要讲的反射，就是建立在类型之上的，Golang的指定类型的变量的类型是静态的（也就是指定int、string这些的变量，它的type是static type），在创建变量的时候就已经确定，反射主要与Golang的interface类型相关（它的type是concrete type），只有interface类型才有反射一说。
在Golang的实现中，每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型:
1  (value, type)   value是实际变量值，type是实际变量的类型。一个interface{}类型的变量包含了2个指针，一个指针指向值的类型【对应concrete type】，另外一个指针指向实际的值【对应value】。
例如，创建类型为*os.File的变量，然后将其赋给一个接口变量r：
1 2 3 4  tty, err := os.OpenFile(&amp;#34;/dev/tty&amp;#34;, os.O_RDWR, 0) var r io.Reader r = tty   接口变量r的pair中将记录如下信息：(tty, *os.File)，这个pair在接口变量的连续赋值过程中是不变的，将接口变量r赋给另一个接口变量w:
1 2  var w io.</description>
    </item>
    
    <item>
      <title>Gin官方文档</title>
      <link>https://blog.riba2534.cn/blog/2019/gin%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 17 Jul 2019 10:32:01 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/gin%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</guid>
      <description>安装与配置 安装：
1  $ go get gopkg.in/gin-gonic/gin.v1   注意：确保 GOPATH GOROOT 已经配置
导入：
1  import &amp;#34;gopkg.in/gin-gonic/gin.v1&amp;#34;   框架架构  HTTP 服务器  1.默认服务器
1  router.Run()   2.HTTP 服务器
除了默认服务器中 router.Run() 的方式外，还可以用 http.ListenAndServe()，比如
1 2 3 4  func main() { router := gin.Default() http.ListenAndServe(&amp;#34;:8080&amp;#34;, router) }   或者自定义 HTTP 服务器的配置：
1 2 3 4 5 6 7 8 9 10 11 12  func main() { router := gin.</description>
    </item>
    
    <item>
      <title>Golang 中的 Map 原理</title>
      <link>https://blog.riba2534.cn/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 14 Jul 2019 17:12:00 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/golang%E4%B8%ADmap%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <description>什么是映射函数 要明白 map 是如何工作的的，我们需要先讨论一下 map 函数。一个 map 函数用以将一个值映射到另一个值。给定一个值，我们叫 key，它就会返回另外一个值，称为 value。
map(key) → value现在，map 还没什么用，除非我们放入一些数据。我们需要一个函数来将数据添加到 map 中
insert(map, key, value)和一个函数从 map 中移除数据
delete(map, key)在实现上还有一些有趣的点比如查询某个 key 当前在 map 中是否存在，但这已经超出了我们今天要讨论的范围。相反我们今天只专注于这几个点；插入，删除和如何将 key 映射到 value。
Go 中的 map 是一个 hashmap Hashmap 是我要讨论的的 map 的一种特定实现，因为这也是 Go runtime 中所采用的实现方式。Hashmap 是一种经典的数据结构，提供了平均 O(1) 的查询时间复杂度，即使在最糟的情况下也有 O(n) 的复杂度。也就是说，正常情况下，执行 map 函数的时间是个常量。
这个常量的大小部分取决于 hashmap 的设计方式，而 map 存取时间从 O(1) 到 O(n) 的变化则取决于它的 hash 函数。
hash 函数 什么是 hash 函数 ？一个 hash 函数用以接收一个未知长度的 key 然后返回一个固定长度的 value。</description>
    </item>
    
    <item>
      <title>GoLang相关的问题以及搜到的解决办法</title>
      <link>https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Tue, 07 May 2019 22:11:55 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/golang%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>GoLang相关的问题以及搜到的解决办法 在使用 golang 的时候，会碰到很多问题，但是自己每一个问题都发个博客这样有点浪费，所以记载一下问题以及解决方法的链接。
golang 中反引号（tag）的作用  Tags in Golang Golang的Tag语法   </description>
    </item>
    
  </channel>
</rss>
