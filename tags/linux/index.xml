<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/tags/linux/</link>
    <description>Recent content in Linux on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 Aug 2020 01:49:53 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux内核数据结构</title>
      <link>https://blog.riba2534.cn/blog/2020/linux%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 28 Aug 2020 01:49:53 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/linux%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Linux 内核数据结构 获得源码 目前，Linux 内核的源码维护在 GitHub 上，地址为：https://github.com/torvalds/linux
 克隆到本地  git clone https://github.com/torvalds/linux 本书使用的源码版本为 2.6.34 ，所以切换到对应 Tag：  cd linuxgit checkout v2.6.34或者直接在：https://github.com/torvalds/linux/releases/tag/v2.6.34 下载
Linux 源码树根目录说明 $ tree -L 1.├── arch # 特定体系结构的源码├── block # 块设备 I/O 层├── COPYING # 内核许可证（GNU GPL v2）├── CREDITS # 内核代码开发者列表├── crypto # 加密 API├── Documentation # 内核源码文档├── drivers # 设备驱动程序├── firmware # 使用某些驱动程序而需要的设备固件 ├── fs # VFS 和各种文件系统├── include # 内核头文件├── init # 内核引导和初始化├── ipc # 进程间通信代码├── Kbuild # 用于编译Linux内核文件，对makefile进行了扩充 ├── kernel # 像调度程序这样的核心子系统├── lib # 通用内核函数├── MAINTAINERS # 维护者列表以及如何提交内核更改的说明文件├── Makefile # makefile├── mm # 内存管理子系统和vm ├── net # 网络子系统 ├── README # README├── REPORTING-BUGS # Linux内核常见问题解答 ├── samples # 示例├── scripts # 编译内核所用的脚本 ├── security # Linux安全模块├── sound # 语音子系统├── tools # 在Linux开发中有用的工具├── usr # 早期用户空间代码（所谓的 inittranfs）└── virt # 虚拟化基础结构21 directories, 7 files内核数据结构简介 介绍通用数据结构中最有用的几个：</description>
    </item>
    
    <item>
      <title>Linux的进程、线程、文件描述符是什么</title>
      <link>https://blog.riba2534.cn/blog/2020/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sat, 02 May 2020 01:35:51 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>Linux的进程、线程、文件描述符是什么 说到进程，恐怕面试中最常见的问题就是线程和进程的关系了，那么先说一下答案：在 Linux 系统中，进程和线程几乎没有区别。
Linux 中的进程就是一个数据结构，看明白就可以理解文件描述符、重定向、管道命令的底层工作原理，最后我们从操作系统的角度看看为什么说线程和进程基本没有区别。
一、进程是什么 首先，抽象地来说，我们的计算机就是这个东西：
这个大的矩形表示计算机的内存空间，其中的小矩形代表进程，左下角的圆形表示磁盘，右下角的图形表示一些输入输出设备，比如鼠标键盘显示器等等。另外，注意到内存空间被划分为了两块，上半部分表示用户空间，下半部分表示内核空间。
用户空间装着用户进程需要使用的资源，比如你在程序代码里开一个数组，这个数组肯定存在用户空间；内核空间存放内核进程需要加载的系统资源，这一些资源一般是不允许用户访问的。但是注意有的用户进程会共享一些内核空间的资源，比如一些动态链接库等等。
我们用 C 语言写一个 hello 程序，编译后得到一个可执行文件，在命令行运行就可以打印出一句 hello world，然后程序退出。在操作系统层面，就是新建了一个进程，这个进程将我们编译出来的可执行文件读入内存空间，然后执行，最后退出。
你编译好的那个可执行程序只是一个文件，不是进程，可执行文件必须要载入内存，包装成一个进程才能真正跑起来。进程是要依靠操作系统创建的，每个进程都有它的固有属性，比如进程号（PID）、进程状态、打开的文件等等，进程创建好之后，读入你的程序，你的程序才被系统执行。
那么，操作系统是如何创建进程的呢？对于操作系统，进程就是一个数据结构，我们直接来看 Linux 的源码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  struct task_struct { // 进程状态 	long	state; // 虚拟内存结构体 	struct mm_struct *mm; // 进程号 	pid_t	pid; // 指向父进程的指针 	struct task_struct __rcu *parent; // 子进程列表 	struct list_head	children; // 存放文件系统信息的指针 	struct fs_struct	*fs; // 一个数组，包含该进程打开的文件指针 	struct files_struct	*files; };   task_struct就是 Linux 内核对于一个进程的描述，也可以称为「进程描述符」。源码比较复杂，我这里就截取了一小部分比较常见的。</description>
    </item>
    
    <item>
      <title>关于Linux Shell需要知道的</title>
      <link>https://blog.riba2534.cn/blog/2020/%E5%85%B3%E4%BA%8Elinux-shell%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84/</link>
      <pubDate>Sat, 02 May 2020 01:27:17 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/%E5%85%B3%E4%BA%8Elinux-shell%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84/</guid>
      <description>我个人很喜欢使用 Linux 系统，虽然说 Windows 的图形化界面做的确实比 Linux 好，但是对脚本的支持太差了。一开始有点不习惯命令行操作，但是熟悉了之后反而发现移动鼠标点点点才是浪费时间的罪魁祸首。。。
那么对于 Linux 命令行，本文不是介绍某些命令的用法，而是说明一些简单却特别容易让人迷惑的细节问题。
1、标准输入和命令参数的区别。
2、在后台运行命令在退出终端后也全部退出了。
3、单引号和双引号表示字符串的区别。
4、有的命令和sudo一起用就 command not found。
一、标准输入和参数的区别 这个问题一定是最容易让人迷惑的，具体来说，就是搞不清什么时候用管道符|和文件重定向&amp;gt;，&amp;lt;，什么时候用变量$。
比如说，我现在有个自动连接宽带的 shell 脚本connect.sh，存在我的家目录：
1 2  $ where connect.sh /home/fdl/bin/connect.sh   如果我想删除这个脚本，而且想少敲几次键盘，应该怎么操作呢？我曾经这样尝试过：
1  $ where connect.sh | rm   实际上，这样操作是错误的，正确的做法应该是这样的：
1  $ rm $(where connect.sh)   前者试图将where的结果连接到rm的标准输入，后者试图将结果作为命令行参数传入。
标准输入就是编程语言中诸如scanf或者readline这种命令；而参数是指程序的main函数传入的args字符数组。
前文「Linux文件描述符」说过，管道符和重定向符是将数据作为程序的标准输入，而$(cmd)是读取cmd命令输出的数据作为参数。
用刚才的例子说，rm命令源代码中肯定不接受标准输入，而是接收命令行参数，删除相应的文件。作为对比，cat命令是既接受标准输入，又接受命令行参数：
1 2 3 4 5 6 7 8  $ cat filename ...file text... $ cat &amp;lt; filename .</description>
    </item>
    
    <item>
      <title>Linux 网络通信瑞士军刀 nc 命令使用</title>
      <link>https://blog.riba2534.cn/blog/2019/linux-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-nc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 27 Sep 2019 18:36:41 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/linux-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-nc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
      <description>Linux 网络通信瑞士军刀 nc 命令使用 简介 netcat也就是nc被称为TCP/IP的瑞士军刀。以体积小，功能灵活著称。在各个发行版有默认安装，可以用来做很多网络相关的工作。它是一款拥有多种功能的 CLI 工具，可以用来在网络上读、写以及重定向数据。 它被设计成可以被脚本或其他程序调用的可靠的后端工具。同时由于它能创建任意所需的连接，因此也是一个很好的网络调试工具。甚至还可以作为简单的 TCP 代理。
我简单的列一下我使用过的常用的命令。
命令选项：
1 2 3 4 5 6 7 8 9 10 11 12 13 14  -g&amp;lt;网关&amp;gt;：设置路由器跃程通信网关，最多设置 8 个； -G&amp;lt;指向器数目&amp;gt;：设置来源路由指向器，其数值为 4 的倍数； -h：在线帮助； -i&amp;lt;延迟秒数&amp;gt;：设置时间间隔，以便传送信息及扫描通信端口； -l：使用监听模式，监控传入的资料； -n：直接使用 ip 地址，而不通过域名服务器； -o&amp;lt;输出文件&amp;gt;：指定文件名称，把往来传输的数据以 16 进制字码倾倒成该文件保存； -p&amp;lt;通信端口&amp;gt;：设置本地主机使用的通信端口； -r：指定源端口和目的端口都进行随机的选择； -s&amp;lt;来源位址&amp;gt;：设置本地主机送出数据包的 IP 地址； -u：使用 UDP 传输协议； -v：显示指令执行过程； -w&amp;lt;超时秒数&amp;gt;：设置等待连线的时间； -z：使用 0 输入/输出模式，只在扫描通信端口时使用。   常用命令 传输测试 1  nc -l 8080   这个命令会监听本机 8080 端口，直到有 http 请求过来，然后显示出相关信息。</description>
    </item>
    
    <item>
      <title>Ubuntu&#43;Apache2配置腾讯云ssl证书实现https</title>
      <link>https://blog.riba2534.cn/blog/2018/ubuntuapache2%E9%85%8D%E7%BD%AE%E8%85%BE%E8%AE%AF%E4%BA%91ssl%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0https/</link>
      <pubDate>Fri, 28 Dec 2018 19:22:00 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2018/ubuntuapache2%E9%85%8D%E7%BD%AE%E8%85%BE%E8%AE%AF%E4%BA%91ssl%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0https/</guid>
      <description>Ubuntu+Apache2配置腾讯云ssl证书实现https 前言 本文所用的服务器环境是 Ubuntu18.04 + Apache2 .通过部署 ssl 来达到默认使用https方式访问网站的目的。
 超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种透过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。
历史上，HTTPS连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。在2000年代晚期和2010年代早期，HTTPS开始广泛使用于保护所有类型网站上的网页真实性，保护账户和保持用户通信，身份和网络浏览的私密性。
&amp;mdash; 来自《维基百科》
 其实可以解决很大部分的运营商劫持问题，比如别人打开你的网站，网页上面会出现一些广告之类的，所以需要配置 https 来防止这个问题。
正文 Ubuntu 下 LAMP 环境的搭建，就不细说了，主要讲一下如何配置证书。
申请证书 打开腾讯云https://buy.cloud.tencent.com/ssl来获得腾讯云提供的免费证书：
点击域名型免费版，然后进去填一下网址和邮箱即可申请到。
过了几分钟，就会受到一个邮件，是一个压缩包，里面有各种服务器的 ssl 证书文件，我们进入 Apache2 这个目录，然后发现里面有三个文件：
1 2 3  1_root_bundle.crt # 证书文件 2_xxx.xxx.xxx.crt # 证书文件 3_xxx.xxx.xxx.key # 私钥文件    1_root_bundle.crt包含一段代码-----BEGIN CERTIFICATE-----和-----END CERTIFICATE----- 2_xxx.xxx.xxx.crt文件包括一段证书代码-----BEGIN CERTIFICATE-----和-----END CERTIFICATE----- 3_xxx.xxx.xxx.key文件包括一段私钥代码-----BEGIN RSA PRIVATE KEY-----和-----END RSA PRIVATE KEY-----  这是这几个文件的作用。</description>
    </item>
    
    <item>
      <title>Linux使用中杂七杂八的问题总结</title>
      <link>https://blog.riba2534.cn/blog/2018/linux%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 16 Dec 2018 13:07:00 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2018/linux%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>前言 在Linux的使用中会碰到很多配置上的问题，在这里总结一下自己在使用过程中碰到的问题的一些行之有效的解决方法。
ubuntu18.04应用程序自启 环境:操作系统是:Ubuntu18.04 LTS
 按Alt+F2,然后输入命令:gnome-session-properties,按回车,会进入一个启动应用程序首选项的界面 添加要启动的命令即可 如果是桌面应用程序，可以去/usr/share/applications目录下找到对应的.desktop文件，然后就可以查看当前应用程序的启动参数。  当我亲自试验以后，发现添加到启动菜单候每次只启动一次，第二次开机就没有了。。于是我找到了一个曲线救国的方法。
 去坚果云官网下载坚果云 开启坚果云的自动启动 去前面说的目录里面改坚果云的启动参数，改成要启动的软件，这样就可每次开机都有了  参考: ubuntu18.04设置开机自启动
ubuntu18.04开启速度优化  systemd-analyze blame可以显示开机启动项的启动时间 可以发现NetworkManager-wait-online.service这一项特别慢，搜索了一下发现这一项貌似是加载一些网络上的代码，无关紧要可以禁用掉 sudo systemctl disable NetworkManager-wait-online.service禁用掉  参考链接: Ubuntu | Linux加快开机启动 What does NetworkManager-wait-online.service do? Ubuntu 18.04 踩坑记录(In Update)
zsh和oh-my-zsh安装  安装git和zshsudo apt install git zsh -y 获取安装脚本:wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 切换成zsh:chsh -s /bin/zsh  如果出现PAM验证之类的问题，可以参考这个方案:
 删除已经写入本地的文件rm -rf ~/.oh-my-zsh/ 获取脚本:curl -L http://install.ohmyz.sh &amp;gt; install.sh sh install.</description>
    </item>
    
  </channel>
</rss>
