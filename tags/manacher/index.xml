<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Manacher on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/tags/manacher/</link>
    <description>Recent content in Manacher on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Aug 2020 02:35:42 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/tags/manacher/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 647 回文子串(Manacher)</title>
      <link>https://blog.riba2534.cn/blog/2020/leetcode-647-%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2manacher/</link>
      <pubDate>Wed, 19 Aug 2020 02:35:42 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/leetcode-647-%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2manacher/</guid>
      <description>题目链接：回文子串
给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。
具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。
示例 1：
输入：&amp;quot;abc&amp;quot;输出：3解释：三个回文子串: &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;示例 2：
输入：&amp;quot;aaa&amp;quot;输出：6解释：6个回文子串: &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aaa&amp;quot;提示：
 输入的字符串长度不会超过 1000 。  思路 首先这题长度不超过1000，那$O(n^2)$ 算法肯定能做。
但是标程肯定是用 Manacher 算法来做的。
关于此算法原理，可以看 最长回文子串——Manacher 算法
首先给原串间隔的添加一个不相关的符号隔开。
在这里我们知道几点关键点即可：
 p[i] 代表以第 i 个位置为中心的最长回文半径（包括 i） p[i]-1 代表，原串中以第 i 个位置为中心的最长回文串长度 pos 代表当前最右边为 max_right 元素时的回文串中心 max_right 代表当前访问到的所有回文子串，所能触及的最右一个字符的位置。  对于本题，我们可以知道所有的 p[i] ，则 p[i]-1 就是当前位置最长回文串长度，我们对于每个位置的长度向上取整除以2，累加起来就是不同子串数量。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  class Solution { public: vector&amp;lt;int&amp;gt; p; int pos, max_right; string init(string s) { string ans = &amp;#34;#&amp;#34;; for (char ch : s) ans = ans + ch + &amp;#39;#&amp;#39;; return ans; } int countSubstrings(string s) { int ans = 0; s = init(s); p.</description>
    </item>
    
    <item>
      <title>LeetCode 5 最长回文子串(Manacher)  </title>
      <link>https://blog.riba2534.cn/blog/2020/leetcode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2manacher-/</link>
      <pubDate>Wed, 19 Aug 2020 02:34:55 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/leetcode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2manacher-/</guid>
      <description>题目链接：最长回文子串
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
示例 1：
输入: &amp;quot;babad&amp;quot;输出: &amp;quot;bab&amp;quot;注意: &amp;quot;aba&amp;quot; 也是一个有效答案。示例 2：
输入: &amp;quot;cbbd&amp;quot;输出: &amp;quot;bb&amp;quot;思路 Manacher 算法模板题，关于此算法原理，可以看 最长回文子串——Manacher 算法
首先给原串间隔的添加一个不相关的符号隔开。
在这里我们知道几点关键点即可：
 p[i] 代表以第 i 个位置为中心的最长回文半径（包括 i） p[i]-1 代表，原串中以第 i 个位置为中心的最长回文串长度 pos 代表当前最右边为 max_right 元素时的回文串中心 max_right 代表当前访问到的所有回文子串，所能触及的最右一个字符的位置。  本题我们只需要求出来最大的 p[i] 的位置即可，然后构造答案。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  class Solution { public: vector&amp;lt;int&amp;gt; p; int pos, max_right; string init(string s) { string ans = &amp;#34;#&amp;#34;; for (char ch : s) ans = ans + ch + &amp;#39;#&amp;#39;; return ans; } string longestPalindrome(string s) { s = init(s); p.</description>
    </item>
    
  </channel>
</rss>
