<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MQ on 🌀riba2534&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/tags/mq/</link>
    <description>Recent content in MQ on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Dec 2019 20:32:00 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/tags/mq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>主流消息队列介绍</title>
      <link>https://caixiongjiang.github.io/blog/2019/%E4%B8%BB%E6%B5%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 13 Dec 2019 20:32:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/%E4%B8%BB%E6%B5%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%8B%E7%BB%8D/</guid>
      <description>主流消息队列介绍  RabbitMQ  特点  Erlang 语言编写 为电信行业可靠性设计 支持 AMQP 协议 轻量级，容易部署及使用 每秒几万到十几万   劣势  消息大量堆积时，性能会下降 性能相比较于其他的比较差 Erlang 太冷门，不好维护     RocketMQ  特点  阿里巴巴 2012 开源，后来捐给 Apache 成了顶级项目 可靠性、稳定性高的国产消息队列，时延低 中文社区活跃 JAVA 开发，贡献者大多是中国人 比 RabbitMQ 的性能高出一个数量级，每秒钟能处理几十万条消息   劣势  作为国产的消息队列，在国际上没有那么流行     Kafka  特点  由 LinkedIn 开发，也是 Apache 顶级项目 早期为了获得高性能，设计方面有牺牲  不保证消息可靠性 可能丢失消息 不支持集群   当前的 Kafka 已经成熟，可靠性稳定性已经可以满足绝大多数场景 周边生态好，在大数据和流式计算领域，所有的相关开源软件都会优先支持 kafka 使用 Scala 和 JAVA 开发，Kafka 的异步收发性能是三者最好的   劣势  同步收发消息响应时延比较高  客户端发一条消息时，kafka 不会立即发送，而是要等一会攒一批再发送，所以不适合在线业务场景       ActiveMQ  特点  最老牌开源消息队列 十年前唯一可供选择的消息队列 存在的意义是兼容还在用的爷爷辈的系统   劣势  社区不活跃 功能和性能差     ZeroMQ  基于消息队列的多线程网络库 如果需求是把消息队列的功能集成进系统进程中，可以考虑使用   Pulsar  新兴消息队列产品 处于成长期 存储和计算分离设计 也许是未来发展方向，建议关注    </description>
    </item>
    
    <item>
      <title>消息队列的消息模型</title>
      <link>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 13 Dec 2019 20:32:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B/</guid>
      <description>消息队列的消息模型   主题和队列
  好的队列不是设计出来的，而是演进出来的
  最初的消息队列模型
 严格意义上的队列，数据结构中的队列 满足先进先出 要求满足严格有序 队列没有读操作，只有「出队」 多个生产者写，可消费到的信息是这些生产者生产的消息合集，每个消费者只能收到队列的一部分信息，任何一条消息只能被一个消费者收到 如果需要每个消费者都受到全量的消息怎么办？  为每个消费者单独创建一个队列，让生产者发送多份  方法比较蠢 浪费资源 生产者必须要知道有多少个消费者，违背了「解耦」的初衷        发布-订阅模型
  模型图
  发送方被称为发布者，接收方被称为订阅者
  服务端存放消息的容器叫做主题
  发布者将消息发布进主题中，订阅者需要先「订阅主题」
  「订阅」是一个动作，同时可以认为是主题在消费时的一个逻辑副本，每份订阅中，订阅者都可以接收到主题的所有消息
    对比
 在消息队列历史上很长时间，这两种模式是并存的，有些消息队列同时支持这两种模型，比如 ActiveMQ。 这两种模型，生产者就是发布者，消费者就是订阅者，队列就是主题 最大区别就是，一份消息数据能不能被消费多次      RabbitMQ 消息模型
  坚持使用队列模型的产品之一
  通过 Exchange 模块，此模块位于生产者和队列之间，生产者并不关心将消息发到哪个队列，而是将消息发送给 Exchange，由 Exchange 配置的策略来决定将消息投递到哪些队列当中</description>
    </item>
    
    <item>
      <title>消息队列的功能和用途</title>
      <link>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E7%94%A8%E9%80%94/</link>
      <pubDate>Fri, 13 Dec 2019 20:31:00 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E7%94%A8%E9%80%94/</guid>
      <description>消息队列的功能和用途  解耦  上游关注通知，不关注处理 下游只关注处理，约定好消息格式   流量控制  应对突发流量，削峰填谷  大量请求先放入消息队列，然后服务端按照自己最大能力去处理     广播  一条消息，可以被多个下游处理   异步  收到消息之后，不需要马上进行，提高效率  秒杀系统  用户秒杀只需要通过风险控制以及库存锁定这两个操作就可以了 后续生成订单，短信通知，可以用消息队列异步处理       冗余  消息可以被持久化，容易回溯   选择消息队列的基本标准  消息的可靠传递，确保不丢消息 Cluster 支持集群，确保不会因为某个节点而导致集群不可用 性能，性能要满足场景的需要    </description>
    </item>
    
  </channel>
</rss>
