<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 🌀Jarson Cai&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/tags/python/</link>
    <description>Recent content in python on 🌀Jarson Cai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Jul 2024 18:18:05 +0800</lastBuildDate><atom:link href="https://caixiongjiang.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python的编程艺术</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/</link>
      <pubDate>Tue, 30 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/</guid>
      <description>Python的编程艺术 策略模式 当前我们需要写一个处理文件的类：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from abc import abstractmethod, ABC class ProcessStrategy(ABC): # 约束子类必须实现process_file方法 @abstractmethod def process_file(self, filepath): pass class ExcelProcessStrategy(ProcessStrategy): def process_file(self, filepath): print(&amp;#34;Processing excel file&amp;#34;) class CsvProcessStrategy(ProcessStrategy): def process_file(self, filepath): print(&amp;#34;Process csv file&amp;#34;) class TxtProcessStrategy(ProcessStrategy): def process_file(self, filepath): print(&amp;#34;Process txt file&amp;#34;) class FileProcessor: def __init__(self, file_path: str, strategy: ProcessStrategy) -&amp;gt; None: self.</description>
    </item>
    
    <item>
      <title>Python进阶用法（四）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E5%9B%9B/</link>
      <pubDate>Mon, 22 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E5%9B%9B/</guid>
      <description>Python进阶笔记（四） 切片 废话不多说，直接看例子：
1 2 3 4 5 6 7 8 9 10 11 12 # 注意都是英文冒号 receipt1 = &amp;#34;物品1: 苹果 数量: 5 单价: 3.00元&amp;#34; receipt2 = &amp;#34;物品2: 香蕉 数量: 10 单价: 2.00元&amp;#34; receipt3 = &amp;#34;物品3: 橙子 数量: 3 单价: 5.00元&amp;#34; print(f&amp;#34;item: {receipt1[5:7]}, price: {receipt1[19:23]}&amp;#34;) print(f&amp;#34;item: {receipt2[5:7]}, price: {receipt2[19:23]}&amp;#34;) print(f&amp;#34;item: {receipt3[5:7]}, price: {receipt3[19:23]}&amp;#34;) # item: 苹果, price: 3.00 # item: 香蕉, price: 2.00 # item: 橙子, price: 5.00 上面的例子是为了从字符串中提取名称和价格，但可以看出这种写法明显是不合理的，索引使用的多了，所有的地方都需要进行修改。这里可以使用slice对象进行预先定义：
1 2 3 4 5 6 7 8 9 10 receipt1 = &amp;#34;物品1: 苹果 数量: 5 单价: 3.</description>
    </item>
    
    <item>
      <title>Python中的多进程、多线程、协程原理和使用探究</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Mon, 22 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>Python中的多进程、多线程、协程原理和使用探究 </description>
    </item>
    
    <item>
      <title>Python进阶用法（三）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%89/</link>
      <pubDate>Thu, 11 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%89/</guid>
      <description>Python进阶笔记（三） 魔法方法 来看一个例子：
1 2 3 4 print(f&amp;#34;{1+2 = }&amp;#34;) print(f&amp;#34;{&amp;#39;a&amp;#39; + &amp;#39;b&amp;#39; =}&amp;#34;) # 1+2 = 3 # &amp;#39;a&amp;#39; + &amp;#39;b&amp;#39; =&amp;#39;ab&amp;#39; 其实其内部发生了这件事：
1 2 print((x:=1).__add__(2)) print(&amp;#39;a&amp;#39;.__add__(&amp;#39;b&amp;#39;)) 这种内置的方法也可以用于自定义的类中：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from typing import List class ShoppingCart: def __init__(self, items: List[str]): self.items = items def __add__(self, another_cart): new_cart = ShoppingCart(self.items + another_cart.items) return new_cart cart1 = ShoppingCart([&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;]) cart2 = ShoppingCart([&amp;#34;orange&amp;#34;, &amp;#34;pear&amp;#34;]) new_cart = cart1 + cart2 print(new_cart.</description>
    </item>
    
    <item>
      <title>Python进阶用法（二）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jul 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%BA%8C/</guid>
      <description>Python进阶笔记（二） Python中“*”的功能 Python中*最常用的便是作为一个运算符号使用，但其实*也可用于实现重复、打包、解包功能。
*的重复功能，看一个例子： 1 2 3 4 print(&amp;#34;hahaha&amp;#34; * 3) # hahahahahahahahaha print([1, 2, 3] * 3) # [1, 2, 3, 1, 2, 3, 1, 2, 3] *的打包功能，它可以将多个值捆绑到一个容器中 1 2 3 4 5 6 numbers = [1, 2, 3, 4, 5] first, *rest = numbers print(first) print(rest) # 1 # [2, 3, 4, 5] 还有一个典型的例子便是返回yaml文件的值时，如果不需要用到全部值，可以使用这个方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import yaml def config_read(): config_path = &amp;#34;.</description>
    </item>
    
    <item>
      <title>Python进阶用法（一）</title>
      <link>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%80/</link>
      <pubDate>Sun, 23 Jun 2024 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2024/python%E8%BF%9B%E9%98%B6/python%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%80/</guid>
      <description>Python进阶笔记（一） 面向对象编程 在之前的Python类编程中，只知道类似的self调用类内方法，今天来学习一下类变量、类方法、静态方法。
类变量 来看一个类的例子：
1 2 3 4 5 6 class Student: def __init__(self, name, sex): self.name = name self.sex = sex s1 = Student(&amp;#34;Caicai&amp;#34;, &amp;#34;male&amp;#34;) 可以看到name和sex属性都代表了单个实例的信息，这时，假设我需要统计学生类的人数，也就是学生类实例的个数，我们就可以使用类变量的方法。
1 2 3 4 5 6 7 8 9 10 11 class Student: student_num = 0 def __init__(self, name, sex): self.name = name self.sex = sex Student.student_num += 1 s1 = Student(&amp;#34;Caicai&amp;#34;, &amp;#34;male&amp;#34;) print(f&amp;#34;Student.student_num: {Student.student_num}&amp;#34;) # Student.student_num: 0 在类下面添加的变量就是类变量，类变量的访问需要通过类直接进入。
假设我们将上述代码改成了如下形式：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Student: student_num = 0 def __init__(self, name, sex): self.</description>
    </item>
    
    <item>
      <title>Python知识杂谈</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</link>
      <pubDate>Mon, 16 Oct 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/</guid>
      <description>Python知识杂谈 Python中的赋值 当使用:
1 a = &amp;#34;Python&amp;#34; Python解释器干的事情：
1.创建变量a
2.创建一个对象(分配一块内存)，来存储值 &amp;lsquo;python&amp;rsquo;
3.将变量与对象，通过指针连接起来，从变量到对象的连接称之为引用(变量引用对象)
赋值：只是复制了新对象的引用，不会开辟新的内存空间。 并不会产生一个独立的对象单独存在，只是将原有的数据块打上一个新标签，所以当其中一个标签被改变的时候，数据块就会发生变化，另一个标签也会随之改变。
浅拷贝：创建新对象，其内容是原对象的引用。 浅拷贝有三种形式： 切片操作，工厂函数，copy模块中的copy函数。
Example： lst = [1,2,[3,4]]
切片操作：lst1 = lst[:] 或者 lst1 = [each for each in lst]
工厂函数：lst1 = list(lst)
copy函数：lst1 = copy.copy(lst)
浅拷贝只拷贝了一层，拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用
1）当浅拷贝的值是不可变对象（字符串、元组、数值类型）时和“赋值”的情况一样，对象的id值与浅拷贝原来的值相同。
2）当浅复制的值是可变对象（列表、字典、集合）时会产生一个“不是那么独立的对象”存在。有两种情况：
第一种情况：拷贝的对象中无复杂子对象，原来值的改变并不会影响浅拷贝的值，同时浅拷贝的值改变也并不会影响原来的值。原来值的id值与浅拷贝原来的值不同。
第二种情况：拷贝的对象中有复杂子对象（例如列表中的一个子元素是一个列表），如果不改变其中拷贝子对象，浅拷贝的值改变并不会影响原来的值。 但是改变原来的值中的复杂子对象的值会影响浅拷贝的值。
深拷贝：与浅拷贝对应，深拷贝拷贝了对象的所有元素，包括多层嵌套的元素。深拷贝出来的对象是一个全新的对象，不再与原来的对象有任何关联。
Example：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import copy a = 1 b = a b = 2 print(f&amp;#34;a:{a}&amp;#34;) print(f&amp;#34;b:{b}&amp;#34;) print(&amp;#34;------------------------&amp;#34;) c = copy.</description>
    </item>
    
    <item>
      <title>Python中的import</title>
      <link>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E4%B8%AD%E7%9A%84import/</link>
      <pubDate>Sat, 06 May 2023 18:18:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2023/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%B0%88/python%E4%B8%AD%E7%9A%84import/</guid>
      <description>Import的常用方法 最初的项目相关的代码都在Windows系统下运行，写这个也是因为了在Linux系统下运行代码的需求。我们会发现在Pycharm里能运行的代码，在Linux下就会报错，大部分错误都来自import的错误。
场景及使用方法 绝对路径import Note：在Python3的新版本中文件夹下面不需要__init__.py这个文件，也可以视为一个Package，不过也可以用该文件来实现一些额外的功能。
在下面的例子中大写字母开头的英文代表文件夹，小写字母开头的代表文件。
同级目录下的单个脚本引用 目录：
ROOT- example.py- test.py 如果你想要在test.py文件中引用example.py的方法，你可以使用以下的代码：
1 2 3 4 5 6 # 引入example.py中的所有内容作 import test # 引入example.py中的方法 from test import &amp;#39;方法名&amp;#39; # 使用.引入的文件中的类 x = test.Class_A 同级目录下的单个文件夹引用 目录:
ROOT- Package-- example.py- test.py 如果想要在test.py中引入Package整个包，你可以使用如下代码：
1 2 3 4 5 6 7 8 # 引入整个包 import Package # 引入包中的一个文件 import Package.example # 这样import的方式会让Package这个文件夹加入系统的路径 # 将某个文件赋值给某个变量 import Package.example as ep # 这样ep的内容就变成了example这个文件 # 从Package里引入某个文件中的某个方法或者类 from Package.</description>
    </item>
    
    <item>
      <title>《数字图像处理》课程设计——表格图片文字识别</title>
      <link>https://caixiongjiang.github.io/blog/2022/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E8%A1%A8%E6%A0%BC%E5%9B%BE%E7%89%87%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</link>
      <pubDate>Thu, 05 May 2022 19:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E8%A1%A8%E6%A0%BC%E5%9B%BE%E7%89%87%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</guid>
      <description>《数字图像处理》课程设计——表格图片文字识别 目标任务 1、将图片中的信息提取为表格：提取“姓名”、“准考证号”、“已录取”，保存为新表格 2、在已有表格中查找指定数据并进行标注；将“已录取”数据增加到原有表格中 思路步骤 1.使用灰度方法读取图片，并利用局部阈值分割方法分割为像素只有0和255的图片 2.使用基于形态学腐蚀操作和膨胀操作，分别识别横线和竖线 3.找出横线和竖线的交点，并把交点像素的位置保存起来 4.通过图片相减得到纯文字的图片，根据像素位置来分割图片 5.对分割好的图片使用cnocr文字识别识别中文，使用tesseract识别数字，并将其保存到数组中 6.将书组中的内容分别放入新的excel表格并保存，并根据名字信息对原有表格进行修改 思路具体实现 灰度读取图片&amp;amp;自适应阈值分割 灰度读取图片的目的是为了消除色彩对后续处理的影响 自适应阈值分割的目的是为了将图片的背景变为纯黑色（像素值为0），文字以及其他信息变为纯白色（像素值为255） 为什么使用阈值分割的方法？
图像分割思想：控制背景环境，降低分割难度；聚焦于感兴趣的部分。在这里其实就是将图片中的文字信息都集中起来，将图片的背景设置为黑色 基本策略：根据图像的像素灰度值的相似性来选择分割的阈值 为什么使用自适应阈值分割？
整副图像的对比度较低，存在多个目标（多个单峰灰度分布），需要使用多阈值分割方法。 自适应阈值分割的阈值选取的方法：根据图像不同区域亮度分布，计算其局部阈值，所以对于图像不同区域，能够自适应计算不同的阈值。 自适应的阈值确定方法有两种：计算某个邻域(局部)的均值、高斯加权平均(高斯滤波)来确定阈值，这里采用高斯加权平均。 二值化方法：这里采用THRESH_BINARY方法;超过阈值则设为最大像素值，不超过则设为0 形态学腐蚀 形态学腐蚀原理
使用卷积模版在图像上移动，如果发现有像素等于目标图像，就将其模板中原点的位置变成1 使用基于形态学的腐蚀和膨胀，可以将不同于该形态的区域剔除，保留相似的部分 实现
构建一个类似于横线和竖线的形态学模版，对目标图像进行腐蚀和膨胀操作，单独提取出横线和竖线 寻找横线竖线的交点 横线竖线交点寻找很简单，但因为交点的大小不一，可能一个交点包含很多个像素，但我们只需要一个。所以在选取像素的横纵坐标时需要进行特别的处理
根据交点进行图片分割 首先通过原图减去横线图和竖线图得到纯文字图片，再进行图片分割 这里的图片分割不同于上面，其代表的是字面意思，也就是根据保存好的横纵坐标选取不同的区域的图片 注意根据提取的信息，还需要对子图片再次进行分割，还有就是一些冗余信息的去除。 包含多个信息： 包含冗余信息： 中英文文字识别 为什么不自己写文字识别？因为本课程主要是为了学习opencv而不是机器学习，所以这里只调用第三方库。 中文使用cnocr库识别。 英文或数字使用tesseract程序+pytesseract库进行识别。 其中tesseract需要下载文件，下载地址：https://digi.bib.uni-mannheim.de/tesseract/ 向表格添加数据 使用openpyxl库进行excel表格的操作。 注意添加数据的函数，因为需要识别多张图片进行多次添加数据，每次添加时索引需要重新定位没有数据的第一行位置。 源码import math import cv2 as cv import openpyxl #图像二值化 &amp;#39;&amp;#39;&amp;#39; 使用自适应阈值分割： 它的思想不是计算全局图像的阈值，而是根据图像不同区域亮度分布，计算其局部阈值，所以对于图像不同区域，能够自适应计算不同的阈值，因此被称为自适应阈值法。 如何确定局部阈值呢？可以计算某个邻域(局部)的均值、中值、高斯加权平均(高斯滤波)来确定阈值。 cv2.</description>
    </item>
    
    <item>
      <title>爬虫：使用selenium模拟12306购票</title>
      <link>https://caixiongjiang.github.io/blog/2022/%E4%BD%BF%E7%94%A8selenium%E6%A8%A1%E6%8B%9F12306%E8%B4%AD%E7%A5%A8/</link>
      <pubDate>Thu, 28 Apr 2022 10:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/%E4%BD%BF%E7%94%A8selenium%E6%A8%A1%E6%8B%9F12306%E8%B4%AD%E7%A5%A8/</guid>
      <description>使用selenium模拟12306购票 selenium介绍 selenium是一种自动化测试工具，可以通过浏览器引擎来自动化帮人类做某些事。 selenium也可以作为一种轻量化爬虫工具。优点是它能绕过网站自身加密后的源码，通过浏览器解析后来获取网页中的元素，也就是文本信息；缺点也很明显，就是它本身是通过浏览器去运行的，非常容易受浏览器访问时网络波动的影响，因此通常要设置睡眠短暂时间来等待浏览器的加载，整体效率就不高。 总体来说，selenium适合轻量化数据的爬虫。 本小程序原理介绍 通过python使用selenium自动操控浏览器引擎模拟人的购票动作。 通过第三方图像识别破解复杂验证码。（以前的12306登录有这个环节，现在取消了） 本小程序没有涉及UI界面的设计，只为学习爬虫工具，粗浅了解网页结构。 资源准备 1.谷歌浏览器（你也可以使用火狐浏览器）
2.下载谷歌浏览器驱动：
查看浏览器的版本：点击浏览器右上角的三个点按钮，找到帮助中的关于Google Chrome，点击就可以看到自己的版本号了 打开网址：https://registry.npmmirror.com/binary.html?path=chromedriver/,选择浏览器版本对应的镜像，根据操作系统来选择下载哪一个镜像 下载解压后，将文件改为chromedriver，放入python解释器所在的文件夹，也就是你python环境配置的地方，这里我使用的PyCharm,所以把它放在了我的项目目录下的bin文件中。 3.下载selenium库（哪种ok就哪种）:
1 2 pip install selenium pip install selenium -i 清华源 破解12306检测自动化控制 12306的滑窗验证会自动检测自动化测试，导致机器滑窗验证失败。
反识别自动化控制工具使用：
如果你的chrome版本小于88，在启动浏览器的时候（此时没有加载任何内容），向页面潜入js代码，去掉webdriver：
1 2 3 4 5 6 7 8 9 10 11 from selenium.webdriver import Chrome web = Chrome() web.execute_cdp_cmd(&amp;#34;Page.addScriptToEvaluateOnDocument&amp;#34;, { &amp;#34;source&amp;#34; : &amp;#34;&amp;#34;&amp;#34; navigator.webdriver = undefined Object.defineProperty(navigator, &amp;#39;webdriver&amp;#39;, { get: () =&amp;gt; undefined }) &amp;#34;&amp;#34;&amp;#34; }) 如果你的chrome版本大于88，引入option:
1 2 3 4 5 6 7 from selenium.</description>
    </item>
    
    <item>
      <title>《数字图像处理》第三章——图像增强</title>
      <link>https://caixiongjiang.github.io/blog/2022/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/</link>
      <pubDate>Mon, 14 Mar 2022 19:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/</guid>
      <description>《数字图像处理》第三章——图像增强 图像增强是突出图像中的某些部分，将图像变得易于人眼观察，通常用于去噪，平滑，锐化，阈值处理。
处理方式：
空间域处理 点处理 邻域处理 频率域处理 点像素处理法 阈值处理：最常用的是二分阈值，也就是像素值大于某个阈值全部变成255，小于该阈值全部变成0。 图像反转：常用于灰度图的黑白反转，使得想要显示的图像细节变成低像素值，其他变成高像素值，公式如下： $$ s = L - 1 -r $$ 伽马校正：原理是将图像的像素点再有效范围内分布更加均匀。它通常用于常用显示器显示图像或者对整体过亮的图像进行延展。公式如下： $$ s = cr^{\gamma} $$ 注：这里通过调整上标伽马的参数来进行校正 像素拉伸：原理是在低像素和高像素区域的像素值都乘以一个小于1的系数，处于中间像素区域的像素值都乘以一个大于1的系数。 图像均衡 直方图均衡化 直方图的定义：横坐标为像素值，纵坐标为像素的个数。 直方图归一化：横坐标依然为像素值，纵坐标变成了该像素值出现的概率。 直方图的目的是通过一个函数来使原图像的直方图分布从不均匀到一个均匀分布，公式如下： $$ s = T(r) = (L - 1)\int_{0}^{r}P_{r}(w)dw $$
注：其中L为256（8bit的最大数加1），P为概率分布函数
该函数为一个递增函数，由旧的像素值（整数）变成新的像素值（浮点数），又一个取整的过程，所以直方图均衡化之后，直方图分布并不是完全平均
直方图匹配 直方图匹配是指给定一张图像，要将其直方图分布变换成特定直方图分布。
直方图匹配的实现：
1.先对原图像进行直方图均衡化处理，得到结果T 2.对目标直方图进行直方图均衡化处理，得到映射关系 3.对T进行步骤2的逆映射处理 邻域矩阵处理法 这也就是我们通常所说的滤波。通常使用一个n×n矩阵和图像中的所有n×n子块进行求内积的操作
均值滤波（局部）：使用全为1的矩阵进行求内积。注意矩阵乘法之前必须进行归一化，防止数据超过原有的范围。 $$\sum_{i}(a - a_{i})^2取最小时就是其均值（误差较大）$$
高斯滤波：使用高斯滤波进行局部平均，相当于离中间像素值越大的其权重分配的越小，差值越小的权重分配的越大。
中值滤波：对图像的n×n子块，排序取中间值来替代原像素的值。（通常用于去除椒盐噪声，效果很好）
$$\sum_{i}\lvert a - a_{i} \rvert取最小时就是其中值（误差鲁棒性更小）$$
非局部均值滤波：根据图像的自相似性，我们可以将相似的局部区域一起做一个平均。 1 2 3 4 5 6 7 -p0指所有相似区域p1～pn的相同的部分 -s1～sn指所有区域不同的部分 p1 = p0 + s1 p2 = p0 + s2 ··· pn = p0 + sn 如何进行相似区域的寻找？</description>
    </item>
    
    <item>
      <title>Open cv模块学习</title>
      <link>https://caixiongjiang.github.io/blog/2022/opencv%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 04 Mar 2022 18:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/opencv%E5%AD%A6%E4%B9%A0/</guid>
      <description>图像基本操作 数据读取-图像 cv2.IMREAD_COLOR:彩色图像 cv2.IMREAD_GRAYSCALE:灰度图像 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import cv2 as cv # opencv模块，读取图片的的格式是BGR import matplotlib.pyplot as plt # 制做图表的模块 import numpy as np # 数据处理模块 img1 = cv.imread(&amp;#34;cat.jpg&amp;#34;) # 读取图片（彩色图片） # 输出img1为一个三个的二维矩阵，dtype为 uint8（代表0～255之间的整数） # 图像的显示 cv.imshow(&amp;#34;image&amp;#34;, img1) #参数：（图片标题，图片名） # 等待时间，毫秒级，0表示按任意键终止图像显示 cv.watKey(0) cv.destroyAllWindows() # 可以将显示图像放到一个函数当中 def cv_show(name, img): cv.</description>
    </item>
    
    <item>
      <title>《数字图像处理》第二章——图像压缩</title>
      <link>https://caixiongjiang.github.io/blog/2022/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Mon, 28 Feb 2022 18:07:05 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2022/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/</guid>
      <description>《数字图像处理》第二章——图像压缩 图像压缩基本概念 压缩比： Cr = n1 / n2 相对数据冗余： Rd = 1 - 1 / Cr 无损压缩： 压缩编码冗余和像素冗余称为无损压缩 图像压缩标准（包括视频） 主流的静态图像压缩标准（JPEG家族）：JPEG, JPEG-LS(无损压缩), JPEG-2000 主流的视频压缩标准（MPEG家族）：MPEG-1, MPEG-2, MPEG-3, MPEG-4 AVC 图像压缩的流程 以JPEG的压缩流程为例：
输入的图像——&amp;gt;图像分块——&amp;gt;映射器——&amp;gt;量化器——&amp;gt;编码器 解码器——&amp;gt;反映射——&amp;gt;输出图片 量化器是该过程中唯一对图像质量有损耗的
JPEG压缩 编码器 JPEG使用的是哈夫曼编码，哈夫曼编码得到的是一种无前缀编码，这会使得出现概率越高的元素编码长度越短，出现概率越低的元素编码长度越长，最后总的编码长度编程最短
哈夫曼编码使用规则：
1.每次取集合中最小的两个值，相加之后再加入原有的集合，再重复取最小的两个值，到最后只剩一个元素 2.将原有集合的数字进行编码，层数越高，编码长度越短 在JPEG中应用为：对像素出现的概率高低进行编码！
demo：
a1 - 0.4 a2 - 0.3 a3 - 0.1 对应编码： a1 - 1 a2 - 01 a3 - 00 编码熵：$ -\sum_{i = 1}^n p(s)log_2^{p(s)}$ （概率*对应的自信息）
图像分块 在JPEG中采用8✖️8的小块进行分别处理，这么做的原因是分别对小块进行处理比对整张图像进行处理更加高效、
若JPEG为RGB的彩色图像，我们需要先将RGB通道转化为YCbCr通道，再对每个通道进行分块处理
模式“RGB”转换为“YCbCr”的公式如下：
Y= 0.</description>
    </item>
    
  </channel>
</rss>
