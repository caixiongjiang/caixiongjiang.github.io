<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TCP/IP on 🌀riba2534&#39;s Blog</title>
    <link>https://caixiongjiang.github.io/tags/tcp/ip/</link>
    <description>Recent content in TCP/IP on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://caixiongjiang.github.io/tags/tcp/ip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP三次握手、四次挥手复习</title>
      <link>https://caixiongjiang.github.io/blog/2020/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Mon, 27 Apr 2020 16:18:53 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2020/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%A4%8D%E4%B9%A0/</guid>
      <description>TCP三次握手、四次挥手 三次握手四次挥手知识点复习
   TCP报文头
  格式：
  source port/destination port 分别代表源端口和目标端口
  sequence/acknowledge number 用来标记发送和接收的字节数(序列号和ACK)
  data offset 占 4 位，代表报文头中的字(32位)数，如果没有 options，则为固定值5
  Flags，共 9 位
 NS、CWR、ECE、URG，不懂 ACK，设置了后表示 acknowledge 字段生效 PSH，要求将缓存的数据推送给接收方 RST，重置连接，比如接收方已经关闭连接，收到迟到的报文，则会重置报文 SYN，三次握手第一次，代表同步 sequence number FIN，四次挥手时的结束报文    Window size，拥塞控制中的窗口大小
  Checksum，校验码，用于传输检测过程中的错误
  Urgent pointer，不懂
  Options，一般在三次握手、四次挥手中用到。不懂
    三次握手
  客户端随机生成一个序列号（sequence number），并发送SYN报文到服务端，请求连接
  服务端发送 SYN+ACK ，在应答请求的同时，也生成一个sequence id，请求同步</description>
    </item>
    
    <item>
      <title>Linux 网络通信瑞士军刀 nc 命令使用</title>
      <link>https://caixiongjiang.github.io/blog/2019/linux-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-nc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 27 Sep 2019 18:36:41 +0800</pubDate>
      
      <guid>https://caixiongjiang.github.io/blog/2019/linux-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-nc-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
      <description>Linux 网络通信瑞士军刀 nc 命令使用 简介 netcat也就是nc被称为TCP/IP的瑞士军刀。以体积小，功能灵活著称。在各个发行版有默认安装，可以用来做很多网络相关的工作。它是一款拥有多种功能的 CLI 工具，可以用来在网络上读、写以及重定向数据。 它被设计成可以被脚本或其他程序调用的可靠的后端工具。同时由于它能创建任意所需的连接，因此也是一个很好的网络调试工具。甚至还可以作为简单的 TCP 代理。
我简单的列一下我使用过的常用的命令。
命令选项：
1 2 3 4 5 6 7 8 9 10 11 12 13 14  -g&amp;lt;网关&amp;gt;：设置路由器跃程通信网关，最多设置 8 个； -G&amp;lt;指向器数目&amp;gt;：设置来源路由指向器，其数值为 4 的倍数； -h：在线帮助； -i&amp;lt;延迟秒数&amp;gt;：设置时间间隔，以便传送信息及扫描通信端口； -l：使用监听模式，监控传入的资料； -n：直接使用 ip 地址，而不通过域名服务器； -o&amp;lt;输出文件&amp;gt;：指定文件名称，把往来传输的数据以 16 进制字码倾倒成该文件保存； -p&amp;lt;通信端口&amp;gt;：设置本地主机使用的通信端口； -r：指定源端口和目的端口都进行随机的选择； -s&amp;lt;来源位址&amp;gt;：设置本地主机送出数据包的 IP 地址； -u：使用 UDP 传输协议； -v：显示指令执行过程； -w&amp;lt;超时秒数&amp;gt;：设置等待连线的时间； -z：使用 0 输入/输出模式，只在扫描通信端口时使用。   常用命令 传输测试 1  nc -l 8080   这个命令会监听本机 8080 端口，直到有 http 请求过来，然后显示出相关信息。</description>
    </item>
    
  </channel>
</rss>
