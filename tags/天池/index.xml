<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>天池 on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/tags/%E5%A4%A9%E6%B1%A0/</link>
    <description>Recent content in 天池 on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 30 Aug 2020 13:05:00 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/tags/%E5%A4%A9%E6%B1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>超级码力在线编程大赛初赛 第2场 题解</title>
      <link>https://blog.riba2534.cn/blog/2020/%E8%B6%85%E7%BA%A7%E7%A0%81%E5%8A%9B%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B-%E7%AC%AC2%E5%9C%BA-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Sun, 30 Aug 2020 13:05:00 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/%E8%B6%85%E7%BA%A7%E7%A0%81%E5%8A%9B%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B-%E7%AC%AC2%E5%9C%BA-%E9%A2%98%E8%A7%A3/</guid>
      <description>超级码力在线编程大赛初赛 第2场 题解 下面的题解仅代表个人观点，出了问题，概不负责。
比赛链接：https://tianchi.aliyun.com/oj/15165469968503404?spm=5176.15098393.J_6210563800.8.6b8b5cd6dK6WtT
1. 三角魔法 描述 小栖必须在一个三角形中才能施展魔法，现在他知道自己的坐标和三个点的坐标，他想知道他能否施展魔法
 −109&amp;lt;=x,y&amp;lt;=109 点在边上也属于三角形内  示例 输入: triangle = [[0,0],[2,0],[1,2]] point= [1,1]输出: &amp;quot;Yes&amp;quot;输入: triangle = [[0,0],[2,0],[1,1]] point= [2,1]输出: &amp;quot;No&amp;quot;思路 判断是否在三角形内，模板题。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134  class Vector2d { public: double x_; double y_; public: Vector2d(double x, double y) : x_(x), y_(y) {} Vector2d() : x_(0), y_(0) {} //二维向量叉乘, 叉乘的结果其实是向量，方向垂直于两个向量组成的平面，这里我们只需要其大小和方向  double CrossProduct(const Vector2d vec) { return x_ * vec.</description>
    </item>
    
  </channel>
</rss>
