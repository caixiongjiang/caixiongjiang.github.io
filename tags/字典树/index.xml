<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字典树 on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/tags/%E5%AD%97%E5%85%B8%E6%A0%91/</link>
    <description>Recent content in 字典树 on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 Aug 2020 09:28:51 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/tags/%E5%AD%97%E5%85%B8%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 336 回文对（字典树，思路）</title>
      <link>https://blog.riba2534.cn/blog/2020/leetcode-336-%E5%9B%9E%E6%96%87%E5%AF%B9%E5%AD%97%E5%85%B8%E6%A0%91%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Thu, 06 Aug 2020 09:28:51 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2020/leetcode-336-%E5%9B%9E%E6%96%87%E5%AF%B9%E5%AD%97%E5%85%B8%E6%A0%91%E6%80%9D%E8%B7%AF/</guid>
      <description>题目链接：回文对
给定一组唯一的单词， 找出所有*不同* 的索引对 (i, j)，使得列表中的两个单词， words[i] + words[j] ，可拼接成回文串。
示例 1:
输入: [&amp;quot;abcd&amp;quot;,&amp;quot;dcba&amp;quot;,&amp;quot;lls&amp;quot;,&amp;quot;s&amp;quot;,&amp;quot;sssll&amp;quot;]输出: [[0,1],[1,0],[3,2],[2,4]] 解释: 可拼接成的回文串为 [&amp;quot;dcbaabcd&amp;quot;,&amp;quot;abcddcba&amp;quot;,&amp;quot;slls&amp;quot;,&amp;quot;llssssll&amp;quot;]示例 2:
输入: [&amp;quot;bat&amp;quot;,&amp;quot;tab&amp;quot;,&amp;quot;cat&amp;quot;]输出: [[0,1],[1,0]] 解释: 可拼接成的回文串为 [&amp;quot;battab&amp;quot;,&amp;quot;tabbat&amp;quot;]思路  枚举所有的串，利用某种数据结构，存储后缀是否存在 对于每个串，假设一个串的取值范围是 [0,m-1]，以 j为界，把串分成两个子串 [0,j-1]和 [j,m-1] 处理这两个子串，如果 [0,j-1]是回文串，那么只需要找到 [j,m-1]这个串的镜像串，这样就可以组成一个大回文串。同理 [j,m-1]回文，那么只需要找到 [0,j-1]的镜像串，保存答案即可。  对于存储后缀，可以用哈希也可以用字典树，对于这种如果数据量太大的话，无意字典树更节省空间。
本代码采用标程中给的字典树。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  class Solution { public: struct node { int ch[26]; int flag; node() { flag = -1; memset(ch, 0, sizeof(ch)); } }; vector&amp;lt;node&amp;gt; tree; void insert(string &amp;amp;s, int id) { int len = s.</description>
    </item>
    
  </channel>
</rss>
