<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>状压dp on 🌀riba2534&#39;s Blog</title>
    <link>https://blog.riba2534.cn/tags/%E7%8A%B6%E5%8E%8Bdp/</link>
    <description>Recent content in 状压dp on 🌀riba2534&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 29 Jan 2019 16:07:37 +0800</lastBuildDate><atom:link href="https://blog.riba2534.cn/tags/%E7%8A%B6%E5%8E%8Bdp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HihoCoder - 1044 状态压缩一 (状压dp)</title>
      <link>https://blog.riba2534.cn/blog/2019/hihocoder-1044-%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E4%B8%80-%E7%8A%B6%E5%8E%8Bdp/</link>
      <pubDate>Tue, 29 Jan 2019 16:07:37 +0800</pubDate>
      
      <guid>https://blog.riba2534.cn/blog/2019/hihocoder-1044-%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E4%B8%80-%E7%8A%B6%E5%8E%8Bdp/</guid>
      <description>描述  小Hi和小Ho在兑换到了喜欢的奖品之后，便继续起了他们的美国之行，思来想去，他们决定乘坐火车前往下一座城市——那座城市即将举行美食节！
但是不幸的是，小Hi和小Ho并没有能够买到很好的火车票——他们只能够乘坐最为破旧的火车进行他们的旅程。
不仅如此，因为美食节的吸引，许多人纷纷踏上了和小Hi小Ho一样的旅程，于是有相当多的人遭遇到了和小Hi小Ho一样的情况——这导致这辆车上的人非常非常的多，以至于都没有足够的位置能让每一个人都有地方坐下来。
小Hi和小Ho本着礼让他们的心情——当然还因为本来他们买的就是站票，老老实实的呆在两节车厢的结合处。他们本以为就能够这样安稳抵达目的地，但事与愿违，他们这节车厢的乘务员是一个强迫症，每隔一小会总是要清扫一次卫生，而时值深夜，大家都早已入睡，这种行为总是会惊醒一些人。而一旦相邻的一些乘客被惊醒了大多数的话，就会同乘务员吵起来，弄得大家都睡不好。
将这一切看在眼里的小Hi与小Ho决定利用他们的算法知识，来帮助这个有着强迫症的乘务员——在不与乘客吵起来的前提下尽可能多的清扫垃圾。
小Hi和小Ho所处的车厢可以被抽象成连成一列的N个位置，按顺序分别编号为1..N，每个位置上都有且仅有一名乘客在休息。同时每个位置上都有一些垃圾需要被清理，其中第i个位置的垃圾数量为Wi。乘务员可以选择其中一些位置进行清理，但是值得注意的是，一旦有编号连续的M个位置中有超过Q个的位置都在这一次清理中被选中的话（即这M个位置上的乘客有至少Q+1个被惊醒了），就会发生令人不愉快的口角。而小Hi和小Ho的任务是，计算选择哪些位置进行清理，在不发生口角的情况下，清扫尽可能多的垃圾。
提示一：无论是什么动态规划，都需要一个状态转移方程！
提示二：好像什么不对劲？状态压缩哪里去了？
 输入  每个测试点（输入文件）有且仅有一组测试数据。
每组测试数据的第一行为三个正整数N、M和Q，意义如前文所述。
每组测试数据的第二行为N个整数，分别为W1到WN，代表每一个位置上的垃圾数目。
对于100%的数据，满足N&amp;lt;=1000, 2&amp;lt;=M&amp;lt;=10,1&amp;lt;=Q&amp;lt;=M, Wi&amp;lt;=100
 输出  对于每组测试数据，输出一个整数Ans，表示在不发生口角的情况下，乘务员最多可以清扫的垃圾数目。
 样例输入 5 2 136 9 80 69 85 样例输出 201思路 题意是给出有 $n$ 个数的数组，每一个位置有一个权值 $w[i]$ ，现在你需要选择一些位置，使得取得的权值和最大。
选择位置的条件是：对于任意长度为 $m$ 的区间，选择的位置的数量必须小于等于 $q$ 个。
思路是状态压缩。因为 $m$ 的范围是 $10$ ,那么用二进制的思想，二进制为 $1$ 表示当前位置被选择，为 $0$ 表示没有被选择，那么一共需要 $m$ 个二进制位来表示状态，那么压缩成十进制，就需要 $2^m-1$ 个状态来表示。
定义：
 $dp[i][j]$ 表示前 $i$ 个位置，选择的状态为 $j$ 时所能达到的最大价值。 $j$ 表示的状态是，以第 $i$ 个位置为结尾的连续 $m$ 个位置的选取状态。  举个例子，假设当 $m=3$ 时，所有的状态为：</description>
    </item>
    
  </channel>
</rss>
